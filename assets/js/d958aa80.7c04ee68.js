"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3183],{54833:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));n(61839);const r={},l="\u4ee3\u7801",o={unversionedId:"Swift/gist-swift",id:"Swift/gist-swift",title:"\u4ee3\u7801",description:"OptionSet",source:"@site/docs/language/Swift/gist-swift.md",sourceDirName:"Swift",slug:"/Swift/gist-swift",permalink:"/docs/language/Swift/gist-swift",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift",permalink:"/docs/language/Swift/"},next:{title:"Swift \u91cc\u600e\u4e48\u5199\u4e00\u4e2a\u94fe\u8868",permalink:"/docs/language/Swift/struct"}},s={},u=[{value:"OptionSet",id:"optionset",level:2},{value:"String",id:"string",level:2},{value:"Foundation",id:"foundation",level:2},{value:"URL",id:"url",level:3},{value:"URLSession",id:"urlsession",level:3},{value:"JSONSerialization",id:"jsonserialization",level:3},{value:"\u6587\u4ef6\u76ee\u5f55",id:"\u6587\u4ef6\u76ee\u5f55",level:3},{value:"Bundle",id:"bundle",level:3},{value:"Date",id:"date",level:3},{value:"NSAttributedString",id:"nsattributedstring",level:3},{value:"UIViewController",id:"uiviewcontroller",level:2},{value:"UITabBarController",id:"uitabbarcontroller",level:3},{value:"UIAlertController",id:"uialertcontroller",level:3},{value:"UINavigationController",id:"uinavigationcontroller",level:3},{value:"UIView",id:"uiview",level:2},{value:"tableHeaderView, tableFooterView",id:"tableheaderview-tablefooterview",level:3},{value:"\u5706\u89d2",id:"\u5706\u89d2",level:3},{value:"UILabel",id:"uilabel",level:3},{value:"UIButton",id:"uibutton",level:3},{value:"UICollectionView",id:"uicollectionview",level:3},{value:"UIWindow",id:"uiwindow",level:3},{value:"UIView \u622a\u56fe",id:"uiview-\u622a\u56fe",level:2},{value:"CALayer",id:"calayer",level:2},{value:"CAShapeLayer",id:"cashapelayer",level:3},{value:"CAGradientLayer",id:"cagradientlayer",level:3},{value:"UIImage",id:"uiimage",level:2},{value:"UIColor",id:"uicolor",level:2},{value:"Media Player",id:"media-player",level:2},{value:"\u9875\u9762\u65f6\u957f\u7edf\u8ba1\u6253\u70b9",id:"\u9875\u9762\u65f6\u957f\u7edf\u8ba1\u6253\u70b9",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,i.kt)("h2",{id:"optionset"},"OptionSet"),(0,i.kt)("p",null,"\u9700\u6c42\uff1a\u7528\u6237\u901a\u8fc7\u70b9\u51fb\u6309\u94ae\uff0c\u56de\u7b54\u95ee\u5377\uff0c\u53ef\u591a\u9009\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"struct Answers: OptionSet {\n    let rawValue: Int\n\n    static let A = Answers(rawValue: 1 << 0)\n    static let B = Answers(rawValue: 1 << 1)\n    static let C = Answers(rawValue: 1 << 2)\n    static let D = Answers(rawValue: 1 << 3)\n    static let E = Answers(rawValue: 1 << 4)\n    static let F = Answers(rawValue: 1 << 5)\n    static let G = Answers(rawValue: 1 << 5)\n    static let H = Answers(rawValue: 1 << 5)\n\n    static let all: Answers = [.A, .B, .C, .D, .E, .F, .G, .H]\n}\n")),(0,i.kt)("p",null,"We can pass ",(0,i.kt)("inlineCode",{parentName:"p"},".all")," instead of ","[.all]"," if we want to select all answers. The reason for this is that OptionSet is an ",(0,i.kt)("strong",{parentName:"p"},"object")," that can be initialized using an array literal but it is not an array. Instead, it is an object that stands on its own and it uses a ",(0,i.kt)("strong",{parentName:"p"},"single raw value")," to represent all options that it holds."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let singleOption: ShippingOptions = .priority\nlet multipleOptions: ShippingOptions = [.nextDay, .secondDay, .priority]\nlet noOptions: ShippingOptions = []\nvar freeOptions: ShippingOptions = []\nfreeOptions.insert(.priority)\nif freeOptions.contains(.priority) {}\n")),(0,i.kt)("p",null,"\u7528 python \u6253\u5370\u51fa 100111 \u5bf9\u5e94\u7684\u9009\u9879 ABCF\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'base = 65\nfor i in range(0, 64):\n    string = "{0:b}".format(i)\n    N = len(string)\n    res = str(i) + " "\n    for j in range(N-1, -1, -1):\n        if string[j] == \'1\':\n            res += str(chr(base + N-j-1))\n    print(res)\n')),(0,i.kt)("h2",{id:"string"},"String"),(0,i.kt)("p",null,"\u662f\u5426\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'var str = "HelloaZ0123___"\nvar str2 = "Hello, playground"\nvar str3 = "Hello???"\n\nextension String {\n    // \u662f\u5426\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\n    func matchRegex(_ pattern: String) -> Bool {\n        guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return false }\n        let matches = regex.matches(in: self, options: [], range: NSRange(location: 0, length: self.count))\n        return matches.count > 0\n    }\n}\n\nstr.matchRegex("^[A-Za-z0-9_]+$") // true\nstr2.matchRegex("^[A-Za-z0-9_]+$") // false\nstr3.matchRegex("^[A-Za-z0-9_]+$") // false\n')),(0,i.kt)("p",null,"\u8fc7\u6ee4\uff0c\u53ea\u5141\u8bb8\u6570\u5b57\u3001\u5b57\u6bcd\u3001\u5c0f\u6570\u70b9\u3001\u4e0b\u5212\u7ebf\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let str = "1A_2b_$9.99_\xa58.88"\nlet set = CharacterSet.alphanumerics.union(CharacterSet.init(charactersIn: "_."))\nlet filted = String(v.unicodeScalars.filter(set.contains))\n')),(0,i.kt)("p",null,"\u5c06\u79d2\u6570\u8f6c\u6362\u4e3a\u65f6\u95f4\u5b57\u7b26\u4e32\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'func ms(from count: Int) -> (String, String) {\n    let minute = count / 60\n    let second = count - minute * 60\n    var minuteStr = "\\(minute)"\n    if minuteStr.count == 1 {\n        minuteStr = "0\\(minuteStr[0])"\n    }\n    var secondStr = "\\(second)"\n    if secondStr.count == 1 {\n        secondStr = "0\\(secondStr[0])"\n    }\n    return (minuteStr, secondStr)\n}\n')),(0,i.kt)("p",null,"\u5c06\u79d2\u6570\u8f6c\u6362\u4e3a 00:00 \u683c\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'func str(from seconds: Int) -> String {\n    let minute = seconds / 60\n    let second = seconds - minute * 60\n    var minuteStr = "\\(minute)"\n    if minuteStr.count == 1 {\n        minuteStr = "0\\(String(minuteStr.prefix(1)))"\n    }\n    var secondStr = "\\(second)"\n    if secondStr.count == 1 {\n        secondStr = "0\\(String(secondStr.prefix(1)))"\n    }\n    return "\\(minuteStr):\\(secondStr)"\n}\n')),(0,i.kt)("p",null,"\u8ba1\u7b97 MD5\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'extension String {\n    var md5: String {\n        guard !isEmpty else { return "" }\n        // Create and initialize MD5 context:\n        var context = CC_MD5_CTX()\n        CC_MD5_Init(&context)\n        let data = Data(self.utf8)\n        // Read data and update MD5 context:\n        data.withUnsafeBytes {\n            _ = CC_MD5_Update(&context, $0.baseAddress, numericCast(data.count))\n        }\n        var digest: [UInt8] = Array(repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        _ = CC_MD5_Final(&digest, &context)\n        let hex = digest.map { String(format: "%02hhx", $0) }.joined()\n        return hex\n    }\n}\n\nextension URL {\n    var md5: String {\n        return self.absoluteString.md5\n    }\n}\n')),(0,i.kt)("p",null,"\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u5bbd\u9ad8\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension String {\n    func width(font: UIFont) -> CGFloat {\n        return self.size(withAttributes: [.font: font]).width\n    }\n\n    func height(withConstrainedWidth width: CGFloat, font: UIFont) -> CGFloat {\n        let constraintRect = CGSize(width: width, height: .greatestFiniteMagnitude)\n        let boundingBox = self.boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, attributes: [.font: font], context: nil)\n\n        return ceil(boundingBox.height)\n    }\n\n    func width(withConstrainedHeight height: CGFloat, font: UIFont) -> CGFloat {\n        let constraintRect = CGSize(width: .greatestFiniteMagnitude, height: height)\n        let boundingBox = self.boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, attributes: [.font: font], context: nil)\n\n        return ceil(boundingBox.width)\n    }\n}\n")),(0,i.kt)("h2",{id:"foundation"},"Foundation"),(0,i.kt)("h3",{id:"url"},"URL"),(0,i.kt)("p",null,"\u62fc\u63a5\u53c2\u6570\u5230\u94fe\u63a5\u91cc\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'var domain = "https://github.com"\nvar params = ["device": "iOS", "systemVersion": "13.2.2"]\nvar query = "?"\nparams.forEach { (key, value) in\n    if let valueWithPercentEncoding = value.addingPercentEncoding(withAllowedCharacters: .alphanumerics) {\n        query += key\n        query += "="\n        query += valueWithPercentEncoding\n        query += "&"\n    }\n}\nif query.last == "&" {\n    query.removeLast()\n}\nprint(domain + query)\n\nif let url = URL(string: domain + query), let components = URLComponents(url: url, resolvingAgainstBaseURL: true), let queryItems = components.queryItems {\n    var dict = [String: Any]()\n    for item in queryItems {\n        dict[item.name] = item.value\n    }\n}\n')),(0,i.kt)("h3",{id:"urlsession"},"URLSession"),(0,i.kt)("p",null,"\u65ad\u70b9\u7eed\u4f20\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'/// \u4e0b\u8f7d\u6a21\u578b\uff0c\u5b9e\u73b0\u4e86 URLSessionDataDelegate \u7528\u4e8e\u65ad\u70b9\u7eed\u4f20\nclass NetworkDownloadModel: NSObject, URLSessionDataDelegate {\n    /// \u4e0b\u8f7d\u7684 URL\n    private var url: URL\n    /// \u4e0b\u8f7d\u6587\u4ef6\u7684\u5b58\u653e\u8def\u5f84\uff08\u6ce8\u610f\u5e26.temp\u540e\u7f00\uff09\n    private var destination: URL\n    /// \u4e34\u65f6\u6587\u4ef6\uff0c\u4e0b\u8f7d\u6210\u529f\u540e\u518d\u79fb\u5230\u76ee\u7684\u5730\n    private var tempDestination: URL\n    /// \u4e0b\u8f7d\u5b8c\u6210\u7684\u56de\u8c03\n    private var completion: (Error?) -> Void\n    /// \u6587\u4ef6\u5904\u7406\n    private var fileHandle: FileHandle?\n\n    init(url: URL, destination: URL, completion: @escaping (Error?) -> Void) {\n        self.url = url\n        self.destination = destination\n        self.completion = completion\n        // \u76ee\u7684\u5730\u521b\u5efa\u4e00\u4e2atmp\u6587\u4ef6\u5939\u7528\u4e8e\u5b58\u653e\u6587\u4ef6\n        let tmp = destination.deletingLastPathComponent().appendingPathComponent("tmp")\n        try? FileManager.default.createDirectory(at: tmp, withIntermediateDirectories: true, attributes: nil)\n        self.tempDestination = tmp.appendingPathComponent(destination.lastPathComponent)\n        super.init()\n    }\n\n    /// \u6267\u884c\u4e0b\u8f7d\u4efb\u52a1\n    ///\n    /// - Parameter resumeAtBreakPoint: \u662f\u5426\u65ad\u70b9\u7eed\u4f20\n    @discardableResult\n    func download(resumeAtBreakPoint: Bool) -> URLSessionDataTask {\n        // \u5df2\u4e0b\u8f7d\u7684\u5b57\u8282\u6570\n        var downloadedBytes: UInt64 = 0\n        // \u4e0d\u65ad\u70b9\u7eed\u4f20\u7684\u8bdd\uff0c\u5220\u6389\u65e7\u7684\u6587\u4ef6\u3002\n        if !resumeAtBreakPoint {\n            try? FileManager.default.removeItem(at: tempDestination)\n        }\n        if FileManager.default.fileExists(atPath: tempDestination.path) {\n            // \u5982\u679c\u5df2\u7ecf\u4e0b\u8f7d\u8fc7\uff0c\u53d6\u5f97\u5df2\u4e0b\u8f7d\u7684\u5b57\u8282\u6570\n            if let fileDict = try? FileManager.default.attributesOfItem(atPath: tempDestination.path) as NSDictionary {\n                downloadedBytes = fileDict.fileSize()\n            }\n        } else {\n            // \u5982\u679c\u672a\u4e0b\u8f7d\u8fc7\uff0c\u521b\u5efa\u6587\u4ef6\u7528\u4e8e\u65ad\u70b9\u7eed\u4f20\n            FileManager.default.createFile(atPath: tempDestination.path, contents: nil, attributes: nil)\n        }\n        var urlRequest = URLRequest(url: url)\n        // \u65ad\u70b9\u7eed\u4f20\u7684 header\n        if downloadedBytes > 0 {\n            urlRequest.setValue("bytes=\\(downloadedBytes)-", forHTTPHeaderField: "Range")\n        }\n\n        let configuration = URLSessionConfiguration.default\n        configuration.httpMaximumConnectionsPerHost = 1\n        let session = URLSession(configuration: configuration, delegate: self, delegateQueue: nil)\n        let task = session.dataTask(with: urlRequest)\n        task.resume()\n        return task\n    }\n\n    // MARK: URLSessionDataDelegate\n    func urlSession(_ session: URLSession, dataTask: URLSessionDataTask, didReceive response: URLResponse, completionHandler: @escaping (URLSession.ResponseDisposition) -> Void) {\n        if let httpResponse = response as? HTTPURLResponse {\n            if (200...299).contains(httpResponse.statusCode) {\n                fileHandle = try? FileHandle(forUpdating: tempDestination)\n                completionHandler(.allow)\n            }\n            else {\n                try? FileManager.default.removeItem(at: tempDestination) // \u51fa\u73b0\u670d\u52a1\u5668\u5f02\u5e38\uff0c\u5220\u9664\u65e7\u7684\u4e34\u65f6\u6587\u4ef6\n                completionHandler(.cancel)\n                completion(NSError(domain: "", code: httpResponse.statusCode, userInfo: nil))\n            }\n        }\n    }\n\n    func urlSession(_ session: URLSession, dataTask: URLSessionDataTask, didReceive data: Data) {\n        fileHandle?.seekToEndOfFile()\n        fileHandle?.write(data)\n    }\n\n    // \u8bf7\u6c42\u7ed3\u675f\n    func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {\n        fileHandle?.closeFile()\n        if error == nil {\n            try? FileManager.default.moveItem(at: tempDestination, to: destination)\n        }\n        completion(error)\n    }\n}\n')),(0,i.kt)("p",null,"\u5931\u8d25\u91cd\u8bd5\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"func retry(times: Int, data: Data) {\n    if times == 0 {\n        return\n    }\n    upload(data, success: {}, failure: { error in\n        retry(times: times - 1, data: data)\n    })\n}\n")),(0,i.kt)("h3",{id:"jsonserialization"},"JSONSerialization"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'// \u4ecebundle\u4e2d\u8bfb\u53d6\u4e00\u4e2ajson\u6587\u4ef6\nif let url = Bundle.main.url(forResource: "stickers", withExtension: "json"),\n    let data = try? Data(contentsOf: url),\n    let jsonObject = try? JSONSerialization.jsonObject(with: data),\n    let json = jsonObject as? [String: Any] {\n     // ...\n}\n\n// json \u5b57\u7b26\u4e32\u8f6c\u6210\u5b57\u5178\nif let data = json.data(using: .utf8), let dict = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n    logEventCount(code, dict: dict)\n}\n')),(0,i.kt)("h3",{id:"\u6587\u4ef6\u76ee\u5f55"},"\u6587\u4ef6\u76ee\u5f55"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'var DocumentDirectory: URL {\n    return FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n//    return NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true).first!\n}\n\nvar CacheDirectory: URL {\n    return FileManager.default.urls(for: .cachesDirectory, in: .userDomainMask).first!\n}\n\nfunc VideoDirectory() -> URL {\n    let url = DocumentDirectory.appendingPathComponent("Video", isDirectory: true)\n    // create folder if not exist\n    try? FileManager.default.createDirectory(at: url, withIntermediateDirectories: true, attributes: nil)\n    return url\n}\n')),(0,i.kt)("h3",{id:"bundle"},"Bundle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'private let appVersion = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String ?? "1.0"\nprivate let buildVersion = Bundle.main.object(forInfoDictionaryKey: "CFBundleVersion") as? String ?? "1"\nprivate let osVersion = UIDevice.current.systemVersion\nprivate let deviceString = DeviceGuru().hardwareString() // dependency: DeviceGuru\nprivate let idfv = UIDevice.current.identifierForVendor?.uuidString\nprivate let systemLanguage = Locale.preferredLanguages.first // \u8bbe\u7f6e - \u901a\u7528 - \u8bed\u8a00\u4e0e\u5730\u533a - \u9996\u9009\u8bed\u8a00\u987a\u5e8f\uff08\u7b2c\u4e00\u4f4d\uff09\nprivate let regionCode = Locale.current.regionCode // \u56fd\u5bb6\u6216\u5730\u533a\nUIDevice.current.isBatteryMonitoringEnabled = true\n')),(0,i.kt)("h3",{id:"date"},"Date"),(0,i.kt)("p",null,"\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'private func getCurrentDate() -> String {\n    let dateFormater = DateFormatter()\n    dateFormater.dateFormat = "yyyyMMdd"\n    return dateFormater.string(from: Date())\n}\n')),(0,i.kt)("p",null,"\u8bbe\u7f6e UIDatePicker \u65f6\u95f4\u4e3a\u665a\u4e0a 8 \u70b9\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"picker.datePickerMode = .time\nlet calendar = Calendar.current\nvar components = DateComponents()\ncomponents.hour = 20\ncomponents.minute = 0\npicker.setDate(calendar.date(from: components)!, animated: false)\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.iso.org/iso-8601-date-and-time-format.html"},"ISO 8601"),"\uff1a\u662f\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7\u7684\u65e5\u671f\u548c\u65f6\u95f4\u7684\u8868\u793a\u65b9\u6cd5\u3002"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc3339"},"RFC 3339"),": This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."),(0,i.kt)("p",null,"\u65e5\u671f\u683c\u5f0f\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://nsdateformatter.com/"},"https://nsdateformatter.com/")),(0,i.kt)("p",null,"Date \u5bf9\u8c61\u4f7f\u7528 +0 \u65f6\u533a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let now = Date()\nprint(now) // 2020-07-16 07:12:02 +0000\n")),(0,i.kt)("p",null,"Date \u8f6c String"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let dateFormatter = DateFormatter()\ndateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"\ndateFormatter.locale = Locale.current\nlet dateString = dateFormatter.string(from: now)\nprint(dateString) // 2020-07-16 15:15:17\n')),(0,i.kt)("p",null,"\u6839\u636e\u7528\u6237\u7684\u65f6\u533a\u5c06 Date \u8f6c\u6362\u4e3a Calendar"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"var calendar = Calendar.current\ncalendar.timeZone = TimeZone.current\nlet dateComponents = calendar.dateComponents([.year, .month, .day], from: now)\nprint(dateComponents) // year: 2020 month: 7 day: 16 isLeapMonth: false\n")),(0,i.kt)("p",null,"\u521d\u59cb\u5316\u4e00\u4e2a\u7279\u5b9a\u65e5\u671f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'// \u521d\u59cb\u5316\u4e00\u4e2a\u65e5\u671f\nlet dateFormatter = DateFormatter()\ndateFormatter.dateFormat = "yyyy-MM-dd\'T\'HH:mm:ssZ"\nif let date617 = dateFormatter.date(from: "2020-06-17T23:59:59+0000") {\n    print(date617)\n}\n')),(0,i.kt)("h3",{id:"nsattributedstring"},"NSAttributedString"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'// \u5b57\u95f4\u8ddd\nlet tryText = "TRY FOR FREE!!!"\nlet tryTextMark = "!!!"\nlet substringRange = tryText.range(of: tryTextMark)!\nlet nsRange = NSRange(substringRange, in: tryText)\nlet attrStr = NSMutableAttributedString(string: tryText)\nattrStr.addAttribute(NSAttributedString.Key.kern, value: -5, range: nsRange)\ntryLabel.attributedText = attrStr\ntryLabel.font = UIFont.systemFont(ofSize: 40 * kAppScale, weight: .heavy)\ntryLabel.textColor = UIColor.white\n\nlet line1 = "Your Meditation Program\\n"\nlet line2 = "Listen to meditation audio for weight-loss"\nlet attrString = NSMutableAttributedString(string: line1 + line2)\n\n// \u5b57\u4f53\u53ca\u989c\u8272\nattrString.addAttribute(.font, value: UIFont.systemFont(ofSize: 24 * kAppScale375, weight: .heavy), range: NSRange(location: 0, length: line1.count))\nattrString.addAttribute(.foregroundColor, value: UIColor.black, range: NSRange(location: 0, length: line1.count))\nattrString.addAttribute(.font, value: UIFont.systemFont(ofSize: 14 * kAppScale375, weight: .bold), range: NSRange(location: line1.count, length: line2.count))\nattrString.addAttribute(.foregroundColor, value: UIColor.black, range: NSRange(location: line1.count, length: line2.count))\n\n// \u659c\u4f53\nattrString.addAttribute(NSAttributedString.Key.obliqueness, value: 0.2, range: NSRange(location: line1.count, length: line2.count))\n\n// \u884c\u95f4\u8ddd\nlet style = NSMutableParagraphStyle()\nstyle.lineSpacing = 10.0\nattrString.addAttribute(.paragraphStyle, value: style, range: NSRange(location: 0, length: line1.count + line2.count))\n\nself.listenLabel.attributedText = attrString\n')),(0,i.kt)("h2",{id:"uiviewcontroller"},"UIViewController"),(0,i.kt)("h3",{id:"uitabbarcontroller"},"UITabBarController"),(0,i.kt)("p",null,"\u5706\u89d2 TabBar"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class TabBarController: UITabBarController, UITabBarControllerDelegate {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let sleep = ("sleep_icon_normal", "sleep_icon_hover", "Sleep")\n        let sounds = ("sounds_icon_normal", "sounds_icon_hover", "Sounds")\n        let more = ("more_icon_normal", "more_icon_hover", "More")\n        let tabTuples = [sleep, sounds, more]\n\n        var viewControllers = [UIViewController]()\n        for i in 0 ..< tabTuples.count {\n            let vc = ViewController()\n            let nav = UINavigationController(rootViewController: vc)\n            nav.tabBarItem.image = UIImage(named: tabTuples[i].0)\n            nav.tabBarItem.selectedImage = UIImage(named: tabTuples[i].1)\n            nav.tabBarItem.title = tabTuples[i].2\n            viewControllers.append(nav)\n        }\n\n        self.viewControllers = viewControllers\n        self.selectedIndex = 0\n        self.tabBar.tintColor = UIColor.white\n        self.tabBar.unselectedItemTintColor = UIColor.white.withAlphaComponent(0.42)\n        self.tabBar.backgroundColor = UIColor(red: 16/255, green: 16/255, blue: 16/255, alpha: 1)\n        self.tabBar.backgroundImage = UIImage.from(color: .clear)\n        self.tabBar.shadowImage = UIImage()\n    }\n\n    override func viewWillLayoutSubviews() {\n        let cornerRadius: CGFloat = 30.0\n        if #available(iOS 11.0, *) {\n            self.tabBar.layer.maskedCorners = [.layerMinXMinYCorner, .layerMaxXMinYCorner]\n            self.tabBar.layer.cornerRadius = cornerRadius\n        } else {\n            let bezierpath = UIBezierPath.init(roundedRect: self.tabBar.bounds, byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: cornerRadius, height: cornerRadius))\n            let shape = CAShapeLayer()\n            shape.path = bezierpath.cgPath\n            self.tabBar.layer.mask = shape\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"uialertcontroller"},"UIAlertController"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let alert = UIAlertController(title: "", message: "", preferredStyle: .alert)\nlet cancel = UIAlertAction(title: "", style: .cancel) { (action) in\n}\nlet ok = UIAlertAction(title: "", style: .default) { (action) in\n}\nalert.addAction(cancel)\nalert.addAction(ok)\nalert.preferredAction = ok\nself.parentViewController?.present(alert, animated: true, completion: nil)\n')),(0,i.kt)("h3",{id:"uinavigationcontroller"},"UINavigationController"),(0,i.kt)("p",null,"\u89e3\u51b3 push \u548c pop \u65f6\u52a8\u753b\u5361\u987f\u95ee\u9898\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'// \u80cc\u666f\u56fe\u7247\u7684contentMode\u4e0d\u5bf9\nif let path = Bundle.main.path(forResource: "skin_preview_background", ofType: "png"), let image = UIImage(contentsOfFile: path) {\n    let imageView = UIImageView(frame: view.bounds)\n    imageView.image = image\n    imageView.contentMode = .scaleToFit\n    view.addSubview(imageView)\n}\n\n// \u5f53\u524dvc\u7684\u80cc\u666f\u8272\u8bbe\u4e3a\u767d\u8272\nself.view.backgroundColor = .white\n')),(0,i.kt)("h2",{id:"uiview"},"UIView"),(0,i.kt)("h3",{id:"tableheaderview-tablefooterview"},"tableHeaderView, tableFooterView"),(0,i.kt)("p",null,"extension UIView {\n/// \u521b\u5efa\u4e00\u4e2a\u5360\u4f4d\u7684 UIView\uff0c\u8fd9\u662f\u7528\u4e8e tableHeaderView \u548c tableFooterView\n/// When assigning a view to this property, set the height of that view to a nonzero value.\n/// \u5426\u5219\uff0ctableHeaderView \u548c tableFooterView \u7684\u9ad8\u5ea6\u4f1a\u65e0\u6cd5\u6b63\u786e\u5237\u65b0\nstatic func tableHeaderFooterPlaceholder() -> UIView {\nreturn UIView(frame: CGRect(x: 0, y: 0, width: CGFloat.leastNormalMagnitude, height: CGFloat.leastNormalMagnitude))\n}\n}"),(0,i.kt)("h3",{id:"\u5706\u89d2"},"\u5706\u89d2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"override func layoutSubviews() {\n    let cornerRadius: CGFloat = 20\n    if #available(iOS 11.0, *) {\n        self.layer.maskedCorners = [.layerMinXMinYCorner, .layerMaxXMinYCorner]\n        self.layer.cornerRadius = cornerRadius\n    } else {\n        let bezierpath = UIBezierPath.init(roundedRect: self.bounds, byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: cornerRadius, height: cornerRadius))\n        let shape = CAShapeLayer()\n        shape.path = bezierpath.cgPath\n        self.layer.mask = shape\n    }\n}\n")),(0,i.kt)("h3",{id:"uilabel"},"UILabel"),(0,i.kt)("p",null,"\u5e26\u5185\u8fb9\u8ddd\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@IBDesignable class URLabel: UILabel {\n    @IBInspectable var topInset: CGFloat = 0\n    @IBInspectable var bottomInset: CGFloat = 0\n    @IBInspectable var leftInset: CGFloat = 4\n    @IBInspectable var rightInset: CGFloat = 4\n\n    override func drawText(in rect: CGRect) {\n        let insets = UIEdgeInsets(top: topInset, left: leftInset, bottom: bottomInset, right: rightInset)\n        super.drawText(in: rect.inset(by: insets))\n    }\n\n    override var intrinsicContentSize: CGSize {\n        let size = super.intrinsicContentSize\n        return CGSize(width: size.width + leftInset + rightInset,\n                      height: size.height + topInset + bottomInset)\n    }\n\n    override var bounds: CGRect {\n        didSet {\n            // ensures this works within stack views if multi-line\n            preferredMaxLayoutWidth = bounds.width - (leftInset + rightInset)\n        }\n    }\n}\n")),(0,i.kt)("h3",{id:"uibutton"},"UIButton"),(0,i.kt)("p",null,"\u56fe\u7247\u5728\u4e0a\u9762\uff0c\u6587\u5b57\u5728\u4e0b\u9762\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension UIButton {\n    func centerVertically(padding: CGFloat = 6.0) {\n        guard let imageViewSize = currentImage?.size, let titleLabelSize = titleLabel?.intrinsicContentSize else { return }\n        imageEdgeInsets = UIEdgeInsets.only(top: -(titleLabelSize.height + padding), right: -titleLabelSize.width)\n        titleEdgeInsets = UIEdgeInsets.only(left: -imageViewSize.width, bottom: -(imageViewSize.height + padding))\n    }\n}\n")),(0,i.kt)("p",null,"\u6269\u5927\u70b9\u51fb\u533a\u57df\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"private var pTouchAreaEdgeInsets: UIEdgeInsets = .zero\nextension UIButton {\n    public var touchAreaEdgeInsets: UIEdgeInsets {\n        get {\n            if let value = objc_getAssociatedObject(self, &pTouchAreaEdgeInsets) as? NSValue {\n                var edgeInsets: UIEdgeInsets = .zero\n                value.getValue(&edgeInsets)\n                return edgeInsets\n            }\n            else {\n                return .zero\n            }\n        }\n        set {\n            var newValueCopy = newValue\n            let objCType = NSValue(uiEdgeInsets: .zero).objCType\n            let value = NSValue(&newValueCopy, withObjCType: objCType)\n            objc_setAssociatedObject(self, &pTouchAreaEdgeInsets, value, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n        }\n    }\n\n    override open func point(inside point: CGPoint, with event: UIEvent?) -> Bool {\n        if self.isHidden || !self.isEnabled || self.touchAreaEdgeInsets == .zero {\n            return super.point(inside: point, with: event)\n        }\n        let newRect = self.bounds.inset(by: self.touchAreaEdgeInsets)\n        return newRect.contains(point)\n    }\n}\n")),(0,i.kt)("p",null,"\u6309\u94ae\u5de6\u5bf9\u9f50\uff08\u5de6\u8fb9\u56fe\u7247\uff0c\u53f3\u8fb9\u6587\u5b57\uff09\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class LeftAlignedIconButton: UIButton {\n    override func titleRect(forContentRect contentRect: CGRect) -> CGRect {\n        let titleRect = super.titleRect(forContentRect: contentRect)\n        let imageSize = currentImage?.size ?? .zero\n        let availableWidth = contentRect.width - imageEdgeInsets.right - imageSize.width - titleRect.width\n        return titleRect.offsetBy(dx: round(availableWidth / 2), dy: 0)\n    }\n}\n")),(0,i.kt)("p",null,"\u6309\u94ae\u72b6\u6001\u7684\u7ec4\u5408\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"// https://www.jianshu.com/p/bd232eac8de8\nbutton.setImage(image, for: UIControlState.selected.union(.highlighted))\n")),(0,i.kt)("h3",{id:"uicollectionview"},"UICollectionView"),(0,i.kt)("p",null,"\u5b9e\u73b0\u4e00\u4e2a\u5de6\u53f3\u6ed1\u52a8\u7684\u8f6e\u64ad\u56fe\uff0c\u6bcf\u5f20\u56fe\u7684\u5927\u5c0f\u7565\u5c0f\u4e8e\u5c4f\u5e55\u5bbd\u5ea6\uff0c\u663e\u793a\u7b2c\u4e00\u5f20\u56fe\u65f6\uff0c\u7b2c\u4e8c\u5f20\u56fe\u80fd\u7a0d\u5fae\u9732\u51fa\u4e00\u70b9\u70b9\u3002"),(0,i.kt)("p",null,"Many solutions presented here result in some weird behaviour that doesn't feel like properly implemented paging."),(0,i.kt)("p",null,"The solution presented in ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/@shaibalassiano/tutorial-horizontal-uicollectionview-with-paging-9421b479ee94"},"this tutorial"),", however, doesn't seem to have any issues. It just feels like a perfectly working paging algorithm. You can implement it in 5 simple steps:"),(0,i.kt)("p",null,"Add the following property to your type: ",(0,i.kt)("inlineCode",{parentName:"p"},"private var indexOfCellBeforeDragging = 0")),(0,i.kt)("p",null,"Set the collectionView delegate like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"collectionView.delegate = self")),(0,i.kt)("p",null,"Add conformance to UICollectionViewDelegate: ",(0,i.kt)("inlineCode",{parentName:"p"},"YourType: UICollectionViewDelegate { }")),(0,i.kt)("p",null,"Add the following method to the extension implementing the UICollectionViewDelegate conformance and set a value for pageWidth:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"func scrollViewWillBeginDragging(_ scrollView: UIScrollView) {\n    let pageWidth = // The width your page should have (plus a possible margin)\n    let proportionalOffset = collectionView.contentOffset.x / pageWidth\n    indexOfCellBeforeDragging = Int(round(proportionalOffset))\n}\n")),(0,i.kt)("p",null,"Add the following method to the extension implementing the UICollectionViewDelegate conformance, set the same value for pageWidth (you may also store this value at a central place) and set a value for collectionViewItemCount:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {\n    // Stop scrolling\n    targetContentOffset.pointee = scrollView.contentOffset\n    // Calculate conditions\n    let pageWidth = // The width your page should have (plus a possible margin)\n    let collectionViewItemCount = // The number of items in this section\n    let proportionalOffset = collectionView.contentOffset.x / pageWidth\n    let indexOfMajorCell = Int(round(proportionalOffset))\n    let swipeVelocityThreshold: CGFloat = 0.5\n    let hasEnoughVelocityToSlideToTheNextCell = indexOfCellBeforeDragging + 1 < collectionViewItemCount && velocity.x > swipeVelocityThreshold\n    let hasEnoughVelocityToSlideToThePreviousCell = indexOfCellBeforeDragging - 1 >= 0 && velocity.x < -swipeVelocityThreshold\n    let majorCellIsTheCellBeforeDragging = indexOfMajorCell == indexOfCellBeforeDragging\n    let didUseSwipeToSkipCell = majorCellIsTheCellBeforeDragging && (hasEnoughVelocityToSlideToTheNextCell || hasEnoughVelocityToSlideToThePreviousCell)\n\n    if didUseSwipeToSkipCell {\n        // Animate so that swipe is just continued\n        let snapToIndex = indexOfCellBeforeDragging + (hasEnoughVelocityToSlideToTheNextCell ? 1 : -1)\n        let toValue = pageWidth * CGFloat(snapToIndex)\n        UIView.animate(\n            withDuration: 0.3,\n            delay: 0,\n            usingSpringWithDamping: 1,\n            initialSpringVelocity: velocity.x,\n            options: .allowUserInteraction,\n            animations: {\n                scrollView.contentOffset = CGPoint(x: toValue, y: 0)\n                scrollView.layoutIfNeeded()\n            },\n            completion: nil\n        )\n    } else {\n        // Pop back (against velocity)\n        let indexPath = IndexPath(row: indexOfMajorCell, section: 0)\n        collectionView.scrollToItem(at: indexPath, at: .left, animated: true)\n    }\n}\n")),(0,i.kt)("h3",{id:"uiwindow"},"UIWindow"),(0,i.kt)("p",null,"\u65b0\u5efa\u9879\u76ee\u540e\u5982\u4f55\u4ece\u4ee3\u7801\u4e2d\u52a0\u8f7d ViewController \u800c\u4e0d\u662f Storyboard\uff1f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class SceneDelegate: UIResponder, UIWindowSceneDelegate {\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        guard let windowScene = (scene as? UIWindowScene) else { return }\n        let window = UIWindow(windowScene: windowScene)\n        let vc = ViewController()\n        window.rootViewController = vc\n        window.makeKeyAndVisible()\n        self.window = window\n    }\n}\n")),(0,i.kt)("p",null,"\u53e6\u5916\uff0c\u5220\u9664 Info.plist \u91cc\u9762\u7684\u4e24\u9879\u6709\u5173 Storyboard \u7684\u952e\u503c\u3002"),(0,i.kt)("h2",{id:"uiview-\u622a\u56fe"},"UIView \u622a\u56fe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension UIView {\n    func snapshot() -> UIImage {\n        UIGraphicsBeginImageContextWithOptions(bounds.size, false, UIScreen.main.scale)\n        drawHierarchy(in: bounds, afterScreenUpdates: true)\n        let result = UIGraphicsGetImageFromCurrentImageContext()!\n        UIGraphicsEndImageContext()\n        return result\n    }\n\n    func renderAsImage() -> UIImage {\n        let renderer = UIGraphicsImageRenderer(bounds: bounds)\n        return renderer.image { rendererContext in\n            layer.render(in: rendererContext.cgContext)\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"calayer"},"CALayer"),(0,i.kt)("h3",{id:"cashapelayer"},"CAShapeLayer"),(0,i.kt)("p",null,"CAShapeLayer \u753b\u5706\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let circleView = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))\ncircleView.center = CGPoint(x: kMainScreenWidth/2, y: kMainScreenHeight*0.7)\nlet shapeLayer = CAShapeLayer()\nlet bezierPath = UIBezierPath(ovalIn: circleView!.bounds)\nshapeLayer.path = bezierPath.cgPath\nshapeLayer.strokeColor = UIColor.white.cgColor\nshapeLayer.lineWidth = 5.0\nshapeLayer.strokeStart = 0\nshapeLayer.strokeEnd = 1\nshapeLayer.fillColor = UIColor.clear.cgColor\ncircleView.layer.addSublayer(shapeLayer)\ncircleView.isUserInteractionEnabled = false\nself.view.addSubview(circleView)\n")),(0,i.kt)("p",null,"\u90e8\u5206\u5706\u89d2\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let maskPath = UIBezierPath(roundedRect: normalView.bounds, byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: 10, height: 10))\nlet maskLayer = CAShapeLayer()\nmaskLayer.frame = normalView.bounds\nmaskLayer.path = maskPath.cgPath\nnormalView.layer.mask = maskLayer\n")),(0,i.kt)("h3",{id:"cagradientlayer"},"CAGradientLayer"),(0,i.kt)("p",null,"\u4ece\u5de6\u5230\u53f3\u6e10\u53d8\u8272\uff0c\u6dfb\u52a0\u5b50\u56fe\u5c42\u65b9\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let color1 = UIColor(rgba: "#F4DEA9")\nlet color2 = UIColor(rgba: "#F4C467")\nlet gradientColors: [CGColor] = [color1.cgColor, color2.cgColor]\nlet gradientLayer = CAGradientLayer()\ngradientLayer.colors = gradientColors\ngradientLayer.startPoint = CGPoint(x: 0, y: 0)\ngradientLayer.endPoint = CGPoint(x: 1, y: 0)\ngradientLayer.frame = unlockButton.bounds\nbutton.layer.insertSublayer(gradientLayer, at: 0)\n')),(0,i.kt)("p",null,"\u4ece\u5de6\u5230\u53f3\u6e10\u53d8\u8272\uff0cUIView backing layer\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'private class ProgressView: UIView {\n    override class var layerClass: AnyClass { return CAGradientLayer.self }\n}\n\nlet progressView = ProgressView()\nlet color1 = UIColor(rgba: "#15E78D")\nlet color2 = UIColor(rgba: "#BFF95D")\nlet gradientColors: [CGColor] = [color1.cgColor, color2.cgColor]\nlet gradientLayer = progressView.layer as! CAGradientLayer\ngradientLayer.colors = gradientColors\ngradientLayer.startPoint = CGPoint(x: 0, y: 0)\ngradientLayer.endPoint = CGPoint(x: 1, y: 0)\n')),(0,i.kt)("h2",{id:"uiimage"},"UIImage"),(0,i.kt)("p",null,"\u56fe\u7247\u6a21\u7cca\u5904\u7406\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'/// \u56fe\u7247\u6a21\u7cca\u6548\u679c\u5904\u7406\n/// - parameter image: \u9700\u8981\u5904\u7406\u7684\u56fe\u7247\n/// - parameter level: \u6a21\u7cca\u7a0b\u5ea6\uff080~1\uff09\nfunc blurry(_ image: UIImage, level: CGFloat) -> UIImage {\n\n    // boxSize \u5fc5\u987b\u5927\u4e8e 0\n    let boxSize = level - level.truncatingRemainder(dividingBy: 2) + 1\n\n    let _cgImage = image.cgImage\n\n    // \u56fe\u50cf\u7f13\u5b58: \u8f93\u5165\u7f13\u5b58\u3001\u8f93\u51fa\u7f13\u5b58\n    var inBuffer = vImage_Buffer()\n    var outBuffer = vImage_Buffer()\n    var error = vImage_Error()\n\n    let inProvider = _cgImage?.dataProvider\n    let inBitmapData = inProvider?.data\n\n    inBuffer.width = vImagePixelCount((_cgImage?.width)!)\n    inBuffer.height = vImagePixelCount((_cgImage?.height)!)\n    inBuffer.rowBytes = (_cgImage?.bytesPerRow)!\n    inBuffer.data = UnsafeMutableRawPointer(mutating: CFDataGetBytePtr(inBitmapData!))\n\n    // \u50cf\u7d20\u7f13\u5b58\n    let pixelBuffer = malloc((_cgImage?.bytesPerRow)! * (_cgImage?.height)!)\n    outBuffer.data = pixelBuffer\n    outBuffer.width = vImagePixelCount((_cgImage?.width)!)\n    outBuffer.height = vImagePixelCount((_cgImage?.height)!)\n    outBuffer.rowBytes = (_cgImage?.bytesPerRow)!\n\n    // \u4e2d\u95f4\u7f13\u5b58\u533a, \u6297\u952f\u9f7f\n    let pixelBuffer2 = malloc((_cgImage?.bytesPerRow)! * (_cgImage?.height)!)\n    var outBuffer2 = vImage_Buffer()\n    outBuffer2.data = pixelBuffer2\n    outBuffer2.width = vImagePixelCount((_cgImage?.width)!)\n    outBuffer2.height = vImagePixelCount((_cgImage?.height)!)\n    outBuffer2.rowBytes = (_cgImage?.bytesPerRow)!\n\n    error = vImageBoxConvolve_ARGB8888(&inBuffer, &outBuffer2, nil, 0, 0, UInt32(boxSize), UInt32(boxSize), nil, vImage_Flags(kvImageEdgeExtend))\n    error = vImageBoxConvolve_ARGB8888(&outBuffer2, &outBuffer, nil, 0, 0, UInt32(boxSize), UInt32(boxSize), nil, vImage_Flags(kvImageEdgeExtend))\n\n    if error != kvImageNoError {\n        debugPrint(error)\n    }\n\n    let colorSpace = CGColorSpaceCreateDeviceRGB()\n    let ctx = CGContext(data: outBuffer.data, width: Int(outBuffer.width), height: Int(outBuffer.height), bitsPerComponent: 8, bytesPerRow: outBuffer.rowBytes, space: colorSpace, bitmapInfo: (_cgImage?.bitmapInfo.rawValue)!)\n\n    let finalCGImage = ctx!.makeImage()\n    let finalImage = UIImage(cgImage: finalCGImage!)\n\n    free(pixelBuffer!)\n    free(pixelBuffer2!)\n\n    return finalImage\n}\n\nextension UIImage {\n    func blurred(radius: CGFloat) -> UIImage {\n        let ciContext = CIContext(options: nil)\n        guard let cgImage = cgImage else { return self }\n        let inputImage = CIImage(cgImage: cgImage)\n        guard let ciFilter = CIFilter(name: "CIGaussianBlur") else { return self }\n        ciFilter.setValue(inputImage, forKey: kCIInputImageKey)\n        ciFilter.setValue(radius, forKey: kCIInputRadiusKey)\n        guard let resultImage = ciFilter.value(forKey: kCIOutputImageKey) as? CIImage else { return self }\n        guard let cgImage2 = ciContext.createCGImage(resultImage, from: inputImage.extent) else { return self }\n        return UIImage(cgImage: cgImage2)\n    }\n}\n\nextension UIImage {\n    public func blur(size: Float) -> UIImage! {\n\n        let boxSize = size - size.truncatingRemainder(dividingBy: 2) + 1\n\n        guard let image = self.cgImage else { return nil }\n\n        let height = vImagePixelCount(image.height)\n        let width = vImagePixelCount(image.width)\n        let bytesPerRow = image.bytesPerRow\n\n        let inBitmapData = image.dataProvider!.data!\n        let inData = UnsafeMutableRawPointer(mutating: CFDataGetBytePtr(inBitmapData))\n        var inBuffer = vImage_Buffer(data: inData, height: height, width: width, rowBytes: bytesPerRow)\n\n        let outData = malloc(bytesPerRow * Int(height))\n        var outBuffer = vImage_Buffer(data: outData, height: height, width: width, rowBytes: bytesPerRow)\n\n        let _ = vImageBoxConvolve_ARGB8888(&inBuffer, &outBuffer, nil, 0, 0, UInt32(boxSize), UInt32(boxSize), nil, vImage_Flags(kvImageEdgeExtend))\n\n        let colorSpace = CGColorSpaceCreateDeviceRGB()\n        let context = CGContext(data: outBuffer.data, width: Int(outBuffer.width), height: Int(outBuffer.height), bitsPerComponent: 8, bytesPerRow: outBuffer.rowBytes, space: colorSpace, bitmapInfo: image.bitmapInfo.rawValue)\n        let imageRef = context!.makeImage()\n        let bluredImage = UIImage(cgImage: imageRef!)\n\n        free(outData)\n        return bluredImage\n    }\n}\n\n')),(0,i.kt)("p",null,"\u751f\u6210\u7eaf\u8272\u56fe\u7247\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension UIImage {\n    static func from(color: UIColor) -> UIImage {\n        let rect = CGRect(x: 0, y: 0, width: 1, height: 1)\n        UIGraphicsBeginImageContext(rect.size)\n        let context = UIGraphicsGetCurrentContext()\n        context!.setFillColor(color.cgColor)\n        context!.fill(rect)\n        let img = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        return img!\n    }\n}\n")),(0,i.kt)("p",null,"\u964d\u91c7\u6837\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    // data buffer - \u56fe\u7247\u4ece\u78c1\u76d8\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u8fd9\u662f\u7ecf\u8fc7\u7f16\u7801\u7684\u56fe\u7247\u6570\u636e\n    // image buffer - \u56fe\u7247\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u6bcf\u4e2a\u5143\u7d20\u63cf\u8ff0\u4e00\u4e2a\u56fe\u7247\u50cf\u7d20\u7684\u989c\u8272\u4fe1\u606f\uff0cbuffer \u7684\u5927\u5c0f\u4e3a width*height*4 (rgba)\n    // frame buffer - \u7c7b\u4f3c\u4e8eOpenGL\u7684Frame Buffer\uff0c\u7528\u4e8e\u4e0a\u4f20\u5230GPU\u4e2d\u6210\u50cf\n\n    // Downsampling large images for display at smaller size\n    public class func downsample(imageAt imageURL: URL, to pointSize: CGSize, scale: CGFloat) -> UIImage? {\n        // \u8bbe\u7f6e`kCGImageSourceShouldCache`\u4e3a`false`\uff0c\u53ef\u4ee5\u907f\u514d\u7f13\u5b58\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c64\u4f4d\u8bbe\u7f6e\u4e0a\u9ed8\u8ba4\u662f\u5f00\u542f\u7f13\u5b58\u7684\n        let imageSourceOptions = [kCGImageSourceShouldCache: false] as CFDictionary\n        if let imageSource = CGImageSourceCreateWithURL(imageURL as CFURL, imageSourceOptions) {\n            return downsample(imageAt: imageSource, to: pointSize, scale: scale)\n        } else {\n            return nil\n        }\n    }\n\n    public class func downsample(imageAt imageData: Data, to pointSize: CGSize, scale: CGFloat) -> UIImage? {\n        let imageSourceOptions = [kCGImageSourceShouldCache: false] as CFDictionary\n        if let imageSource = CGImageSourceCreateWithData(imageData as CFData, imageSourceOptions) {\n            return downsample(imageAt: imageSource, to: pointSize, scale: scale)\n        } else {\n            return nil\n        }\n    }\n\n    public class func downsample(imageAt imageSource: CGImageSource, to pointSize: CGSize, scale: CGFloat) -> UIImage? {\n        let maxDimensionInPixels = max(pointSize.width, pointSize.height) * scale\n        let downsampleOptions =\n            [kCGImageSourceCreateThumbnailFromImageAlways: true,\n             kCGImageSourceShouldCacheImmediately: true,\n             kCGImageSourceCreateThumbnailWithTransform: true,\n             kCGImageSourceThumbnailMaxPixelSize: maxDimensionInPixels] as CFDictionary\n        if let downsampledImage =\n            CGImageSourceCreateThumbnailAtIndex(imageSource, 0, downsampleOptions) {\n            return UIImage(cgImage: downsampledImage)\n        } else {\n            return nil\n        }\n    }\n")),(0,i.kt)("p",null,"\u751f\u6210\u6e10\u53d8\u8272\u56fe\u7247\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"func generateGradientImage(colors: [UIColor], imageSize: CGSize) -> UIImage? {\n    let cgColors = colors.map{ $0.cgColor }\n    let gradientLayer = CAGradientLayer()\n    let frame = CGRect(origin: .zero, size: imageSize)\n    gradientLayer.frame = frame\n    gradientLayer.colors = cgColors\n    gradientLayer.startPoint = CGPoint(x: 0.0, y: 0.5)\n    gradientLayer.endPoint = CGPoint(x: 1.0, y: 0.5)\n\n    UIGraphicsBeginImageContextWithOptions(gradientLayer.frame.size, gradientLayer.isOpaque, 0.0);\n\n    guard let context = UIGraphicsGetCurrentContext() else { return nil }\n    gradientLayer.render(in: context)\n    let image = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n\n    return image\n}\n")),(0,i.kt)("p",null,"\u4fee\u6539\u66dd\u5149\u503c\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'extension UIImage {\n    func exposure(_ exposure: Float) -> UIImage {\n        if let cgImage = self.cgImage {\n            let context = CIContext()\n            let ciImage = CIImage(cgImage: cgImage)\n            let filter = CIFilter(name: "CIExposureAdjust")\n            filter?.setValue(ciImage, forKey: kCIInputImageKey)\n            filter?.setValue(exposure, forKey: kCIInputEVKey)\n            if let outputImage = filter?.outputImage, let imageRef = context.createCGImage(outputImage, from: ciImage.extent) {\n                let uiImage = UIImage(cgImage: imageRef)\n                return uiImage\n            }\n        }\n        return self\n    }\n}\n')),(0,i.kt)("h2",{id:"uicolor"},"UIColor"),(0,i.kt)("p",null,"hex \u989c\u8272\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension UIColor {\n    public convenience init(hex: Int) {\n        let red: CGFloat = CGFloat((hex >> 16) & 0x0000FF) / 255.0\n        let green: CGFloat = CGFloat((hex >> 8) & 0x0000FF) / 255.0\n        let blue: CGFloat = CGFloat(hex & 0x0000FF) / 255.0\n        self.init(red:red, green:green, blue:blue, alpha:1.0)\n    }\n}\n")),(0,i.kt)("h2",{id:"media-player"},"Media Player"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/mediaplayer/becoming_a_now_playable_app"},"Becoming a Now Playable App")),(0,i.kt)("h2",{id:"\u9875\u9762\u65f6\u957f\u7edf\u8ba1\u6253\u70b9"},"\u9875\u9762\u65f6\u957f\u7edf\u8ba1\u6253\u70b9"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"private var viewDidAppearDate = Date()\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    NotificationCenter.default.addObserver(self, selector: #selector(appDidBecomeActive(_:)), name: UIApplication.didBecomeActiveNotification, object: nil)\n    NotificationCenter.default.addObserver(self, selector: #selector(appWillResignActive(_:)), name: UIApplication.willResignActiveNotification, object: nil)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    viewDidAppearDate = Date()\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    let duration = Date().timeIntervalSince(self.viewDidAppearDate)\n    if duration < 100000 {\n        log(duration)\n    }\n}\n\n@objc func appDidBecomeActive(_ notification: Any) {\n    viewDidAppearDate = Date()\n}\n\n@objc func appWillResignActive(_ notification: Any) {\n    let duration = Date().timeIntervalSince(self.viewDidAppearDate)\n    if duration < 100000 {\n        log(duration)\n    }\n}\n")))}d.isMDXComponent=!0}}]);