"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8873],{59823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>u,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));t(61839);const i={},u="Dart Concurrency",o={unversionedId:"flutter-concurrency",id:"flutter-concurrency",title:"Dart Concurrency",description:"Concurrency in Dart | Dart",source:"@site/docs/flutter/flutter-concurrency.md",sourceDirName:".",slug:"/flutter-concurrency",permalink:"/docs/flutter/flutter-concurrency",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Flutter Errors",permalink:"/docs/flutter/flutter-error"}},s={},c=[],l={toc:c};function p(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dart-concurrency"},"Dart Concurrency"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dart.dev/guides/language/concurrency"},"Concurrency in Dart | Dart")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dart.dev/codelabs/async-await"},"Asynchronous programming: futures, async, await | Dart")),(0,a.kt)("p",null,"Dart supports concurrent programming with async-await, isolates, and classes such as ",(0,a.kt)("inlineCode",{parentName:"p"},"Future")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream"),"."),(0,a.kt)("p",null,"A promise to eventually provide an int value is typed as ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<int>"),". A promise to provide a series of int values has the type ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream<int>"),"."),(0,a.kt)("p",null,"The synchronous ",(0,a.kt)("inlineCode",{parentName:"p"},"File")," method ",(0,a.kt)("inlineCode",{parentName:"p"},"readAsStringSync()")," reads a file synchronously, blocking until the file is either fully read or an error occurs."),(0,a.kt)("p",null,"The asynchronous equivalent, ",(0,a.kt)("inlineCode",{parentName:"p"},"readAsString()"),", immediately returns an object of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<String>"),". At some point in the future, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<String>")," completes with either a string value or an error."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"img",src:t(15407).Z,width:"1146",height:"622"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title='demo1.dart'",title:"'demo1.dart'"},'import \'dart:async\';\n\nvoid main() {\n  print("main 1");\n\n  // \u8fd9\u4e9b\u4f1a\u88ab\u653e\u5230 eventQueue\n  Future(() => print("event 1"));\n  Future.delayed(Duration.zero, () => print("event 2"));\n  Future.delayed(const Duration(seconds: 1), () => print("event 3"));\n\n  // then\u662f\u5728future\u5b8c\u6210\u65f6\u7acb\u523b\u6267\u884c\uff0c\u4e0d\u4f1a\u518d\u6dfb\u52a0microtask\n  Future.delayed(const Duration(seconds: 1)).then((value) {\n    scheduleMicrotask(() => print("then microtask"));\n    print("then 1");\n  }).then((value) => print("then 2"));\n\n  print("main 2");\n\n  // \u8fd9\u4e9b\u4f1a\u88ab\u653e\u5230 microtaskQueue\n  scheduleMicrotask(() => print("microtask 1"));\n  Future.microtask(() => print("microtask 2"));\n  Future.value(1).then((value) => print("microtask 3")); // \u5df2\u7ecf\u5b8c\u6210\u7684future\u4f7f\u7528then\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230microtask\n\n  print("main 3");\n\n  // \u8fd9\u4e9b\u4f1a\u7acb\u5373\u6267\u884c\n  Future.sync(() => print("sync 1"));\n  Future.value(getName());\n\n  print("main 4");\n}\n\nString getName() {\n  print("sync 2");\n  return "mikko";\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," keywords provide a declarative way to define asynchronous functions and use their results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title='demo2.dart'",title:"'demo2.dart'"},'import \'dart:async\';\n\nvoid main() {\n  future1();\n  future2();\n}\n\nvoid future1() {\n  // future \u6709\u4e09\u79cd\u72b6\u6001\uff1a\u672a\u5b8c\u6210\u3001\u5df2\u5b8c\u6210\u3001\u51fa\u9519\n  getOne()\n      .then((value) {\n        print(value);\n        return ++value;\n      })\n      .then((value) => print(value))\n      .catchError((err) => print(err))\n      .whenComplete(() => print("complete"));\n}\n\nFuture<int> getOne() {\n  // throw Exception("error");\n  return Future.value(1);\n  // return Future.error(Exception("error"));\n}\n\nvoid future2() async {\n  try {\n    int number = await getTwo();\n    print(number);\n    print(++number);\n  } catch (err) {\n    print(err);\n  }\n}\n\nFuture<int> getTwo() async {\n  throw Exception("error");\n  return 2;\n}\n')))}p.isMDXComponent=!0},15407:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/13D9F70F-C26E-495F-83FF-31A4D4AA9BC1-db9d7ad95b957624719d4547c6329d0f.png"}}]);