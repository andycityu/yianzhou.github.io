"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9667],{7996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));n(61839);const o={},i="\u5361\u987f",l={unversionedId:"lag",id:"lag",title:"\u5361\u987f",description:"WWDC 2018 - Practical Approaches to Great App Performance",source:"@site/docs/apple/lag.md",sourceDirName:".",slug:"/lag",permalink:"/docs/apple/lag",draft:!1,editUrl:"https://github.com/yianzhou/yianzhou.github.io/docs/apple/lag.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Instruments",permalink:"/docs/apple/instruments"},next:{title:"LLVM",permalink:"/docs/apple/llvm"}},p={},s=[{value:"\u5361\u987f\u539f\u56e0",id:"\u5361\u987f\u539f\u56e0",level:2},{value:"CADisplayLink",id:"cadisplaylink",level:2},{value:"\u5b50\u7ebf\u7a0b Ping",id:"\u5b50\u7ebf\u7a0b-ping",level:2},{value:"RunLoop \u76d1\u542c",id:"runloop-\u76d1\u542c",level:2},{value:"CPU \u5360\u7528\u8fc7\u9ad8",id:"cpu-\u5360\u7528\u8fc7\u9ad8",level:2},{value:"\u7ebf\u4e0a\u6548\u679c",id:"\u7ebf\u4e0a\u6548\u679c",level:2}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u5361\u987f"},"\u5361\u987f"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://developer.apple.com/videos/play/wwdc2018/407/"},"WWDC 2018 - Practical Approaches to Great App Performance")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/aozhimin/iOS-Monitor-Platform#freezinglag"},"iOS \u6027\u80fd\u76d1\u63a7 SDK"))),(0,r.kt)("h2",{id:"\u5361\u987f\u539f\u56e0"},"\u5361\u987f\u539f\u56e0"),(0,r.kt)("p",null,"\u53ef\u80fd\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u5361\u987f\u7684\u539f\u56e0\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b\u8fd0\u7b97\u91cf\u8fc7\u5927\uff1a\u5927\u91cf UI \u7ed8\u5236\u3001\u5927\u91cf\u8ba1\u7b97\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b\u8fdb\u884c\u4e86\u8017\u65f6\u7684 I/O \u64cd\u4f5c\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u6b7b\u9501\u3001\u4e3b\u5b50\u7ebf\u7a0b\u62a2\u9501\u3001\u7b49\u5f85\u5b50\u7ebf\u7a0b\u540c\u6b65\u5757\u3002")),(0,r.kt)("h2",{id:"cadisplaylink"},"CADisplayLink"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"link = CADisplayLink(target: WeakProxy.init(target: self), selector: #selector(FPSLabel.tick(link:)))\nlink.add(to: RunLoop.main, forMode: .commonModes)\n")),(0,r.kt)("p",null,"YYFPSLabel \u91c7\u7528\u8fd9\u6837\u7684\u529e\u6cd5\u663e\u793a\u5c4f\u5e55\u5e27\u7387\u3002\u8ba1\u7b97\u4e24\u6b21\u5237\u65b0\u7684\u65f6\u95f4\u5dee\uff0c\u5373\u53ef\u663e\u793a\u5e27\u7387\u3002\u4f46\u8ba1\u7b97\u5230\u5361\u987f\u65f6\uff0c\u5361\u987f\u5df2\u7ecf\u8fc7\u53bb\u4e86\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u65e0\u6cd5\u6355\u83b7\u5230\u5361\u987f\u5806\u6808\u3002"),(0,r.kt)("h2",{id:"\u5b50\u7ebf\u7a0b-ping"},"\u5b50\u7ebf\u7a0b Ping"),(0,r.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u76d1\u63a7\u7684\u5b50\u7ebf\u7a0b\u53bb ping \u4e3b\u7ebf\u7a0b\u3002"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://juejin.cn/post/6844904005437489165"},"iOS \u5361\u987f\u76d1\u63a7\u5b9e\u6218\uff08\u5f00\u6e90\uff09")),(0,r.kt)("p",null,"\u9488\u5bf9\u540c\u4e00\u4e2a\u5361\u987f\u53ea\u4f1a\u4e0a\u62a5\u4e00\u6b21\uff0c\u5e76\u6ca1\u6709\u50cf\u5fae\u4fe1\u90a3\u6837\u91cd\u590d\u4e0a\u62a5\u3002\u4e00\u662f\u51fa\u4e8e\u6211\u4eec\u672c\u8eab\u4e1a\u52a1\u8003\u8651\uff1b\u4e8c\u662f\u4e0a\u62a5\u4f7f\u7528\u7684 Fabric\uff0c\u5b83\u4f1a\u5728\u4e0b\u4e00\u6b21\u542f\u52a8\u65f6\u5c06\u6240\u6709\u8bb0\u5f55\u6570\u636e\u63a8\u5230\u5e73\u53f0\uff0c\u5e76\u4e14\u5bf9\u4e8e\u4e0a\u62a5\u91cf\u6709\u9650\u5236\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"private final class PingMainThread: Thread {\n    override func main() {\n        while !isCancelled {\n            autoreleasepool {\n                isResponse = false\n                // \u4e3b\u7ebf\u7a0b\u540c\u6b65\u6807\u5fd7\u4f4d\uff0c\u540c\u65f6\u91ca\u653e\u4fe1\u53f7\u91cf\n                DispatchQueue.main.async {\n                    self.isResponse = true\n                    self.semaphore.signal()\n                }\n                // \u6682\u505c\u6307\u5b9a\u95f4\u9694\uff0c\u68c0\u9a8c\u6b64\u65f6\u6807\u5fd7\u4f4d\u662f\u5426\u4fee\u6539\uff0c\u6ca1\u6709\u4fee\u6539\u5219\u8bf4\u660e\u7ebf\u7a0b\u5361\u987f\uff0c\u9700\u8981\u4e0a\u62a5\n                Thread.sleep(forTimeInterval: TimeInterval(threshold))\n                if !isResponse {\n                    // \u83b7\u53d6\u6240\u6709\u7ebf\u7a0b\n                    // \u83b7\u53d6\u7ebf\u7a0b\u6808\u5bc4\u5b58\u5668\uff0c\u83b7\u5f97\u6307\u4ee4\u5730\u5740\n                }\n                // \u907f\u514d\u91cd\u590d\u4e0a\u62a5\uff0c\u4e00\u6b21\u5361\u987f\u4ec5\u8bb0\u5f55\u4e00\u6b21\uff08\u8fd9\u91cc\u4e0e\u5fae\u4fe1 RunLoop \u65b9\u6848\u6709\u6bd4\u8f83\u5927\u7684\u533a\u522b\uff0c\u5fae\u4fe1\u4f1a\u6309\u7167\u6590\u6ce2\u62c9\u5951\u95f4\u9694\u91cd\u590d\u4e0a\u62a5\uff09\n                _ = semaphore.wait(timeout: DispatchTime.distantFuture)\n            }\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"runloop-\u76d1\u542c"},"RunLoop \u76d1\u542c"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://time.geekbang.org/column/article/89494"},"\u5982\u4f55\u5229\u7528 RunLoop \u539f\u7406\u53bb\u76d1\u63a7\u5361\u987f\uff1f")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"CFRunLoopObserver")," provides a general means to receive callbacks at different points within a running run loop. In contrast to sources, which fire when an asynchronous event occurs, and timers, which fire when a particular time passes, observers fire at special locations within the execution of the run loop, such as before sources are processed or before the run loop goes to sleep, waiting for an event to occur."),(0,r.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a\u5e38\u9a7b\u7684\u5b50\u7ebf\u7a0b\uff0c\u5728\u5b50\u7ebf\u7a0b\u521d\u59cb\u5316\u65f6\uff0c\u6ce8\u518c ",(0,r.kt)("inlineCode",{parentName:"p"},"CFRunLoopObserverContext")," \u89c2\u5bdf\u8005\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u4e3b\u7ebf\u7a0b RunLoop \u7684 common \u6a21\u5f0f\u4e0b\u89c2\u5bdf\u3002"),(0,r.kt)("p",null,"\u4e3b\u7ebf\u7a0b RunLoop \u72b6\u6001\u7684\u6bcf\u4e00\u6b21\u53d8\u8fc1\uff0c\u90fd\u4f1a\u505a\u4e24\u4ef6\u4e8b\u60c5\uff1a1. ",(0,r.kt)("inlineCode",{parentName:"p"},"runLoopActivity")," \u5199\u5165\u5b50\u7ebf\u7a0b\u5b9e\u4f8b\u53d8\u91cf\u4e2d\u8bb0\u5f55\uff1b2. \u5411\u5b50\u7ebf\u7a0b\u7684\u4fe1\u53f7\u91cf\u53d1\u51fa\u4fe1\u53f7\u3002"),(0,r.kt)("div",{class:"mermaid"},"graph LR sleep1[\u4f11\u7720] --\x3e AfterWaiting subgraph \u53d1\u751f\u5361\u987f\u65f6 AfterWaiting --\x3e BeforeTimer BeforeTimer --\x3e BeforeSource end subgraph \u6ca1\u6709\u53d1\u751f\u5361\u987f\u65f6 BeforeWaiting end BeforeSource --\x3e BeforeWaiting BeforeWaiting --\x3e sleep2[\u4f11\u7720]"),(0,r.kt)("p",null,"\u5b50\u7ebf\u7a0b\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," \u51fd\u6570\u662f\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," \u5faa\u73af\uff0c\u4fe1\u53f7\u91cf\u6bcf\u6b21\u7b49\u5f85 2.0 \u79d2\u7684\u9608\u503c\u65f6\u95f4\uff0c\u6216\u8005\u6536\u5230\u4fe1\u53f7\uff0c\u6216\u8005\u8d85\u65f6\u3002"),(0,r.kt)("div",{class:"mermaid"},'graph LR \u7b49\u5f85 --\x3e \u8d85\u65f6 \u7b49\u5f85 --\x3e \u6536\u5230\u4fe1\u53f7 subgraph \u4ee3\u8868\u4e3b\u7ebf\u7a0b\u5728\u5904\u7406\u4efb\u52a1 lag[AfterWaiting,BeforeTimer,BeforeSource] end \u8d85\u65f6 --\x3e lag lag --\x3e backtrace["\u83b7\u53d6\u5e76\u8bb0\u5f55\u5361\u987f\u5806\u6808"] subgraph \u4ee3\u8868\u4e3b\u7ebf\u7a0b\u5df2\u8fdb\u5165\u4f11\u7720 BeforeWaiting end \u8d85\u65f6 --\x3e BeforeWaiting BeforeWaiting --\x3e \u8fdb\u5165\u4e0b\u6b21\u5faa\u73af\u4f53 \u6536\u5230\u4fe1\u53f7 --\x3e \u8fdb\u5165\u4e0b\u6b21\u5faa\u73af\u4f53'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"import Foundation\n\nclass MonitorThread: Thread {\n    private var runLoopObserver: CFRunLoopObserver?\n    private let semaphore = DispatchSemaphore(value: 0)\n    private var runLoopActivity: CFRunLoopActivity?\n\n    override init() {\n        super.init()\n        // Creates a CFRunLoopObserver object with a block-based handler.\n        runLoopObserver = CFRunLoopObserverCreateWithHandler(\n            kCFAllocatorDefault, // The allocator to use to allocate memory for the new object.\n            CFRunLoopActivity.allActivities.rawValue, // Set of flags identifying the activity stages of the run loop during which the observer is called.\n            true, // A flag identifying whether the observer is called only once or every time through the run loop.\n            0, // A priority index indicating the order in which run loop observers are processed.\n            {\n                [weak self] (observer: CFRunLoopObserver!, activity: CFRunLoopActivity) -> Void in\n                // \u5728\u4e3b\u7ebf\u7a0b\u56de\u8c03\n                self?.runLoopActivity = activity\n                self?.semaphore.signal()\n            })\n        CFRunLoopAddObserver(CFRunLoopGetMain(), runLoopObserver, CFRunLoopMode.commonModes)\n    }\n\n    override func main() {\n        while (true) {\n            autoreleasepool {\n                let result = self.semaphore.wait(timeout: .now() + 2.0)\n                if result == .timedOut {\n                    if (self.runLoopObserver == nil) {\n                        return\n                    }\n                    if let activity = self.runLoopActivity {\n                        // \u6ca1\u6709\u53d1\u751f\u5361\u987f\u65f6\uff0c\u6bcf 2 \u79d2 timeout \u4e00\u6b21\uff0c\u6b64\u65f6\u7684 runLoopActivity \u5e94\u8be5\u662f .beforeWaiting\n                        print(activity)\n                    }\n                    if self.runLoopActivity == .beforeTimers || self.runLoopActivity == .beforeSources || self.runLoopActivity == .afterWaiting {\n                        // \u5728\u8fd9\u91cc\u83b7\u53d6\u5168\u7ebf\u7a0b\u5806\u6808\u5e76\u4e0a\u4f20\n                        if let backtrace = BSBacktraceLogger.bs_backtraceOfMainThread() {\n                            print(backtrace)\n                        }\n                        // \u4e3a\u4e86\u5bf9\u952e\u76d8\u6027\u80fd\u5f71\u54cd\u6700\u5c0f\u5316\uff0c\u68c0\u6d4b\u5230\u5361\u987f\u540e\u7ee7\u7eed\u7b49\u5f85\u4fe1\u53f7\u91cf\uff0c\u4e0d\u518d\u91cd\u590d\u8bb0\u5f55\u5806\u6808\u3002\n                        let _ = self.semaphore.wait()\n                    }\n                }\n            }\n        }\n    }\n\n    deinit {\n        CFRunLoopRemoveObserver(CFRunLoopGetCurrent(), runLoopObserver, CFRunLoopMode.commonModes)\n    }\n}\n")),(0,r.kt)("p",null,"\u6a21\u62df\u5361\u987f\u7684\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"var pi = Double.pi\nfor _ in 1...100000000 {\n    pi *= Double.pi\n}\n")),(0,r.kt)("p",null,"\u53c2\u8003\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ming1016/DecoupleDemo/blob/master/DecoupleDemo/SMLagMonitor.m"},"\u6234\u94ed - SMLagMonitor"),"\uff1b\u5361\u987f\u5806\u6808\u7684\u6355\u83b7\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bestswifter/BSBacktraceLogger"},"BSBacktraceLogger"),"\uff0c",(0,r.kt)("a",{parentName:"p",href:"https://github.com/microsoft/plcrashreporter"},"PLCrashReporter"),"\u3002"),(0,r.kt)("h2",{id:"cpu-\u5360\u7528\u8fc7\u9ad8"},"CPU \u5360\u7528\u8fc7\u9ad8"),(0,r.kt)("p",null,"\u6211\u4eec\u4e5f\u8ba4\u4e3a CPU \u8fc7\u9ad8\u4e5f\u53ef\u80fd\u5bfc\u81f4\u5e94\u7528\u51fa\u73b0\u5361\u987f\uff0c\u6240\u4ee5\u5728\u5b50\u7ebf\u7a0b\u68c0\u67e5\u4e3b\u7ebf\u7a0b RunLoop \u72b6\u6001\u7684\u540c\u65f6\uff0c\u5982\u679c\u68c0\u6d4b\u5230 CPU \u5360\u7528\u8fc7\u9ad8\uff0c\u4f1a\u6355\u83b7\u5f53\u524d\u7684\u7ebf\u7a0b\u5feb\u7167\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d\u3002\u76ee\u524d\u5fae\u4fe1\u5e94\u7528\u4e2d\u8ba4\u4e3a\uff0c\u5355\u6838 CPU \u7684\u5360\u7528\u8d85\u8fc7\u4e86 80%\uff0c\u6b64\u65f6\u7684 CPU \u5360\u7528\u5c31\u8fc7\u9ad8\u4e86\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#import <mach/mach.h>\n+ (integer_t)cpuUsage {\n    thread_act_array_t threads; // \u6240\u6709\u7ebf\u7a0b\u7684\u5217\u8868\uff0cint \u7ec4\u6210\u7684\u6570\u7ec4\u6bd4\u5982 thread[1] = 5635\n    mach_msg_type_number_t threadCount = 0; // \u4efb\u52a1\u4e2d\u6240\u6709\u7ebf\u7a0b\u7684\u6570\u91cf\n    kern_return_t kr = task_threads(mach_task_self(), &threads, &threadCount);\n    integer_t cpuUsage = 0;\n    if (kr == KERN_SUCCESS) {\n        for (int i = 0; i < threadCount; i++) {\n            thread_info_data_t threadInfo;\n            thread_basic_info_t threadBaseInfo;\n            mach_msg_type_number_t threadInfoCount = THREAD_INFO_MAX;\n            if (thread_info((thread_act_t)threads[i], THREAD_BASIC_INFO, (thread_info_t)threadInfo, &threadInfoCount) == KERN_SUCCESS) {\n                // \u83b7\u53d6 CPU \u4f7f\u7528\u7387\n                threadBaseInfo = (thread_basic_info_t)threadInfo;\n                if (!(threadBaseInfo->flags & TH_FLAGS_IDLE)) {\n                    cpuUsage += threadBaseInfo->cpu_usage;\n                }\n            }\n        }\n        assert(vm_deallocate(mach_task_self(), (vm_address_t)threads, threadCount * sizeof(thread_t)) == KERN_SUCCESS);\n    }\n    return cpuUsage;\n}\n")),(0,r.kt)("p",null,"\u5185\u5b58\u5360\u7528\u3001FPS\u3001CPU \u7684\u6027\u80fd\u76d1\u63a7\u65b9\u6848\uff0c\u5b83\u4eec\u7684\u4ee3\u7801\u548c\u4e1a\u52a1\u903b\u8f91\u662f\u5b8c\u5168\u89e3\u8026\u7684\uff0c\u76d1\u63a7\u65f6\u57fa\u672c\u90fd\u662f\u76f4\u63a5\u83b7\u53d6\u7cfb\u7edf\u672c\u8eab\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u6ca1\u6709\u989d\u5916\u7684\u8ba1\u7b97\u91cf\uff0c\u56e0\u6b64\u5bf9 App \u672c\u8eab\u7684\u6027\u80fd\u5f71\u54cd\u4e5f\u975e\u5e38\u5c0f\u3002"),(0,r.kt)("h2",{id:"\u7ebf\u4e0a\u6548\u679c"},"\u7ebf\u4e0a\u6548\u679c"),(0,r.kt)("p",null,"\u5e38\u89c1\u5361\u987f\u5806\u6808\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"OpenGL ES \u7279\u6548\u76f8\u5173\u4ee3\u7801"),(0,r.kt)("li",{parentName:"ul"},"Keychain \u8bfb\u5199"),(0,r.kt)("li",{parentName:"ul"},"\u89c6\u56fe\u521d\u59cb\u5316\u3001\u8bfb\u53d6 Bundle \u56fe\u7247"),(0,r.kt)("li",{parentName:"ul"},"\u8d44\u6e90\u7684\u52a0\u8f7d\u3001\u5199\u5165")),(0,r.kt)("p",null,"\u5361\u987f\u5806\u6808\uff0c\u4e0d\u4e00\u5b9a\u80fd\u4fee\u590d\u89e3\u51b3\uff0c\u8981\u770b\u4e1a\u52a1\u9700\u8981\u3001\u5f71\u54cd\u9762\u548c\u4fee\u590d\u7684\u6210\u672c/\u6536\u76ca\u3002\u5361\u987f\u7387\u53ef\u4ee5\u4f5c\u4e3a\u65e5\u5e38\u76d1\u63a7\u548c\u62a5\u8b66\u9879\uff0c\u5b83\u7684\u8d8b\u52bf\u53ef\u4ee5\u8f85\u52a9\u5224\u65ad\u7ebf\u4e0a\u95ee\u9898\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u7248\u672c\u7a81\u7136\u5347\u9ad8\uff0c\u5c31\u8981\u6392\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u7248\u672c\u7684\u6539\u52a8\u70b9\uff0c\u54ea\u4e9b\u53ef\u80fd\u5e26\u6765\u5361\u987f\u3002"))}c.isMDXComponent=!0}}]);