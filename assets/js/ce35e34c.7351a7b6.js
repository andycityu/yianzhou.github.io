"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7935],{30906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));n(61839);const i={},l="\u6811",a={unversionedId:"leetcode/leetcode1",id:"leetcode/leetcode1",title:"\u6811",description:"\u6811\u7684\u904d\u5386",source:"@site/docs/dev/leetcode/leetcode1.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode1",permalink:"/docs/dev/leetcode/leetcode1",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Google",permalink:"/docs/dev/google"},next:{title:"\u52a8\u6001\u89c4\u5212",permalink:"/docs/dev/leetcode/leetcode2"}},p={},s=[{value:"\u6811\u7684\u904d\u5386",id:"\u6811\u7684\u904d\u5386",level:2},{value:"94-\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u3001144-\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u3001145-\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386",id:"94-\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386144-\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386145-\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386",level:3},{value:"102-\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386",id:"102-\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386",level:3},{value:"429-N \u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"429-n-\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",level:3},{value:"199-\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe",id:"199-\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe",level:3},{value:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",id:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",level:3},{value:"105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",level:3},{value:"106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",level:3},{value:"100-\u76f8\u540c\u7684\u6811",id:"100-\u76f8\u540c\u7684\u6811",level:3},{value:"101-\u5bf9\u79f0\u4e8c\u53c9\u6811",id:"101-\u5bf9\u79f0\u4e8c\u53c9\u6811",level:3},{value:"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",id:"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",level:3},{value:"129-\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c",id:"129-\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c",level:3},{value:"226-\u7ffb\u8f6c\u4e8c\u53c9\u6811",id:"226-\u7ffb\u8f6c\u4e8c\u53c9\u6811",level:3},{value:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",level:3},{value:"\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u4e8c\u53c9\u641c\u7d22\u6811",level:2},{value:"99-\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811",id:"99-\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811",level:3},{value:"98-\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",id:"98-\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",level:3},{value:"108-\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",id:"108-\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",level:3},{value:"230-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20",id:"230-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c-k-\u5c0f\u7684\u5143\u7d20",level:3},{value:"96-\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811",id:"96-\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811",level:3},{value:"\u76ee\u6807\u548c\u3001\u6392\u5217\u7ec4\u5408\u95ee\u9898",id:"\u76ee\u6807\u548c\u6392\u5217\u7ec4\u5408\u95ee\u9898",level:2},{value:"112-\u76ee\u6807\u548c\uff08DFS\uff09",id:"112-\u76ee\u6807\u548cdfs",level:3},{value:"113-\u76ee\u6807\u548c II\uff08\u56de\u6eaf\u6cd5\uff09",id:"113-\u76ee\u6807\u548c-ii\u56de\u6eaf\u6cd5",level:3},{value:"437-\u76ee\u6807\u548c III\uff08\u524d\u7f00\u548c\uff09",id:"437-\u76ee\u6807\u548c-iii\u524d\u7f00\u548c",level:3},{value:"560-\u76ee\u6807\u548c\u5b50\u6570\u7ec4\uff08\u524d\u7f00\u548c\uff09",id:"560-\u76ee\u6807\u548c\u5b50\u6570\u7ec4\u524d\u7f00\u548c",level:3},{value:"39-\u7ec4\u5408\u7684\u548c\uff08\u56de\u6eaf\u6cd5\uff09",id:"39-\u7ec4\u5408\u7684\u548c\u56de\u6eaf\u6cd5",level:3},{value:"40-\u7ec4\u5408\u7684\u548c II\uff08\u56de\u6eaf\u6cd5\uff09",id:"40-\u7ec4\u5408\u7684\u548c-ii\u56de\u6eaf\u6cd5",level:3},{value:"216-\u7ec4\u5408\u7684\u548c III\uff08\u56de\u6eaf\u6cd5\uff09",id:"216-\u7ec4\u5408\u7684\u548c-iii\u56de\u6eaf\u6cd5",level:3},{value:"70-\u722c\u697c\u68af\uff08\u52a8\u6001\u89c4\u5212\uff09",id:"70-\u722c\u697c\u68af\u52a8\u6001\u89c4\u5212",level:3},{value:"377-\u7ec4\u5408\u7684\u548c IV\uff08\u52a8\u6001\u89c4\u5212\uff09",id:"377-\u7ec4\u5408\u7684\u548c-iv\u52a8\u6001\u89c4\u5212",level:3},{value:"46-\u5168\u6392\u5217\uff08\u56de\u6eaf\u6cd5\uff09",id:"46-\u5168\u6392\u5217\u56de\u6eaf\u6cd5",level:3}],u={toc:s};function d(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u6811"},"\u6811"),(0,o.kt)("h2",{id:"\u6811\u7684\u904d\u5386"},"\u6811\u7684\u904d\u5386"),(0,o.kt)("h3",{id:"94-\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386144-\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386145-\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/"},"94-\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386"),"\u3001",(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/"},"144-\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386"),"\u3001",(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/"},"145-\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386")),(0,o.kt)("p",null,"\u51e0\u4e4e\u6240\u6709\u7684\u4e8c\u53c9\u6811\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u7528 DFS \u6765\u89e3\u51b3\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(24219).Z,width:"1670",height:"854"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(TreeNode *root, vector<int> &res) {\n        if (!root) return;\n        // preorder\n        dfs(root->left, res);\n        res.push_back(root->val); // inorder\n        dfs(root->right, res);\n        // postorder\n    }\n    vector<int> inorderTraversal(TreeNode *root) {\n        vector<int> res;\n        dfs(root, res);\n        return res;\n    }\n};\n")),(0,o.kt)("p",null,"\u9012\u5f52\u5b9e\u73b0\u65f6\uff0c\u662f\u51fd\u6570\u8c03\u7528\u81ea\u8eab\uff0c\u4e00\u5c42\u5c42\u5730\u5d4c\u5957\u4e0b\u53bb\uff0c\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u5e2e\u6211\u4eec\u7528\u6808\u6765\u4fdd\u5b58\u4e86\u6bcf\u4e2a\u8c03\u7528\u7684\u51fd\u6570\uff1b\u5982\u679c\u4e0d\u7528\u9012\u5f52\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6808\u6765\u6a21\u62df\u8fd9\u4e2a\u8c03\u7528\u8fc7\u7a0b\u3002(\u8fd9\u79cd\u65b9\u6cd5\u6bd4\u8f83\u4e0d\u76f4\u89c2\uff0c\u4e14\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u4e0d\u4e00\u6837\uff0c\u5f88\u96be\u8bb0\u5fc6)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        stack<TreeNode*> stk;\n        while (root || stk.size() != 0) {\n            while (root) {\n                stk.push(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            res.push_back(root->val);\n            root = root->right;\n        }\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"102-\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/"},"102-\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386")),(0,o.kt)("p",null,"\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u6211\u4eec\u7528 DFS \u7684\u65f6\u5019\u8fdc\u8fdc\u591a\u4e8e BFS\u3002\u4e0d\u8fc7\uff0c\u67d0\u4e9b\u573a\u666f\u662f DFS \u505a\u4e0d\u5230\u7684\uff0c\u53ea\u80fd\u4f7f\u7528 BFS\uff0c\u6bd4\u5982\u201c\u5c42\u5e8f\u904d\u5386\u201d\u3002"),(0,o.kt)("p",null,"BFS \u4f1a\u7528\u5230\u961f\u5217\u6570\u636e\u7ed3\u6784\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode *root) {\n        vector<vector<int>> res;\n        if (!root) return res;\n        queue<TreeNode *> q;\n        q.push(root);\n        while (!q.empty()) {\n            vector<int> level;\n            int size = static_cast<int>(q.size());\n            for (int i = 0; i < size; ++i) {\n                TreeNode *front = q.front();\n                q.pop();\n                level.push_back(front->val);\n                if (front->left) {\n                    q.push(front->left);\n                }\n                if (front->right) {\n                    q.push(front->right);\n                }\n            }\n            res.push_back(level);\n        }\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"429-n-\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/"},"429-N \u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386")),(0,o.kt)("p",null,"\u6269\u5c55\u5230 N \u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> levelOrder(Node *root) {\n        vector<vector<int>> res;\n        if (!root) return res;\n        queue<Node *> queue;\n        queue.push(root);\n        while (!queue.empty()) {\n            vector<int> level;\n            int size = queue.size();\n            for (int i = 0; i < size; ++i) {\n                root = queue.front();\n                queue.pop();\n                level.push_back(root->val);\n                for (Node *node : root->children) {\n                    queue.push(node);\n                }\n            }\n            res.push_back(level);\n        }\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"199-\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-right-side-view/"},"199-\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe")),(0,o.kt)("p",null,"\u7b2c\u4e00\u79cd\u601d\u8def\uff0cdfs \u524d\u5e8f\u904d\u5386\uff0c\u6211\u4eec\u6309\u7167\u6839\u7ed3\u70b9 -> \u53f3\u5b50\u6811 -> \u5de6\u5b50\u6811\u7684\u987a\u5e8f\u8bbf\u95ee\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u5c42\u90fd\u6700\u5148\u8bbf\u95ee\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u3002"),(0,o.kt)("p",null,"\u5173\u952e\u662f\uff0c\u5982\u4f55\u5224\u65ad\u6bcf\u5c42\u8bbf\u95ee\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5462\uff1f\u53ef\u4ee5\u7528\u904d\u5386\u6df1\u5ea6\u6765\u9650\u5b9a\u3002\u7531\u4e8e\u6bcf\u5c42\u53ea\u53d6\u6700\u53f3\u8fb9\u8282\u70b9\u7684\u503c\u52a0\u5165 res \u6570\u7ec4\uff0c\u82e5\u6570\u7ec4\u957f\u5ea6\u4e0e\u904d\u5386\u6df1\u5ea6\u76f8\u540c\uff0c\u8bf4\u660e\u662f\u8be5\u5c42\u8bbf\u95ee\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u5b83\u52a0\u5230 res \u6570\u7ec4\u4e2d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(TreeNode *root, vector<int> &res, int level) {\n        if (!root) return;\n        if (res.size() == level)\n            res.push_back(root->val);\n        dfs(root->right, res, level + 1);\n        dfs(root->left, res, level + 1);\n    }\n    vector<int> rightSideView(TreeNode *root) {\n        vector<int> res;\n        dfs(root, res, 0);\n        return res;\n    }\n};\n")),(0,o.kt)("p",null,"\u7b2c\u4e8c\u79cd\u601d\u8def\uff0cbfs \u5c42\u5e8f\u904d\u5386\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> rightSideView(TreeNode *root) {\n        vector<int> res;\n        if (!root) return res;\n        queue<TreeNode *> queue;\n        queue.push(root);\n        int level = 0;\n        while (!queue.empty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; ++i) {\n                root = queue.front();\n                queue.pop();\n                if (res.size() == level)\n                    res.push_back(root->val);\n                if (root->right)\n                    queue.push(root->right); // \u5148\u653e\u53f3\u8fb9\u7684\u8282\u70b9\n                if (root->left)\n                    queue.push(root->left);\n            }\n            ++level;\n        }\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/"},"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c")),(0,o.kt)("p",null,"\u672c\u9898\u4e2d\uff0c\u8def\u5f84\u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u4ece\u6811\u4e2d\u4efb\u610f\u8282\u70b9\u51fa\u53d1\uff0c\u8fbe\u5230\u4efb\u610f\u8282\u70b9\u7684\u5e8f\u5217\u3002"),(0,o.kt)("p",null,"\u627e\u5230\u9012\u5f52\u7ed3\u6784\u662f\u672c\u9898\u7684\u5173\u952e\uff01\u5b9a\u4e49\u51fd\u6570 ",(0,o.kt)("inlineCode",{parentName:"p"},"dfs(root)"),"\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u4ee5 root \u4e3a",(0,o.kt)("strong",{parentName:"p"},"\u8d77\u70b9"),"\u7684\u6811\u7684\u6700\u5927\u8def\u5f84\u548c\u3002"),(0,o.kt)("p",null,"\u90a3\u4e48\uff0c\u4ee5 root \u4e3a\u8d77\u70b9\u7684\u6811\u7684\u6700\u5927\u8def\u5f84\u548c = root->val + max(root->left \u6216 0\uff0croot->right \u6216 0)\uff0c\u8fd9\u662f\u4e00\u4e2a\u540e\u5e8f\u904d\u5386\uff01"),(0,o.kt)("p",null,"\u6ce8\u610f\uff0c\u8ba1\u7b97\u6700\u5927\u548c\u8fd9\u79cd\u95ee\u9898\uff0c\u90fd\u9700\u8981\u8003\u8651\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6811\u7684\u5de6/\u53f3\u652f\u7684\u6700\u5927\u548c\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u201c\u526a\u679d\u201d\u3002"),(0,o.kt)("p",null,"\u672c\u9898\u4e2d\u8def\u5f84\u53ef\u4ee5\u662f\u4efb\u610f\u8282\u70b9\u51fa\u53d1\u5230\u4efb\u610f\u8282\u70b9\uff0c\u4e0d\u4e00\u5b9a\u8981\u4ee5\u6839\u7ed3\u70b9\u4e3a\u8d77\u70b9\u3002\u56e0\u6b64\uff0c\u5728\u6267\u884c\u6bcf\u4e00\u6b21\u9012\u5f52\u65f6\uff0c\u9700\u8981\u5c06 root \u4f5c\u4e3a\u201c\u8fde\u63a5\u70b9\u201d\uff0c\u8ba1\u7b97\uff08\u6839\u8282\u70b9 + \u5de6\u5b50\u6811\u6700\u5927\u8def\u5f84\u548c + \u53f3\u5b50\u6811\u6700\u5927\u8def\u5f84\u548c\uff09\u662f\u5426\u6210\u4e3a\u5168\u5c40\u6700\u4f18\u89e3\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int dfs(TreeNode *root, int &res) {\n        if (!root) return 0;\n        int left = max(0, dfs(root->left, res)); // \u5de6\u5b50\u6811\u7684\u6700\u5927\u8def\u5f84\u548c\uff0c\u6216 0\uff08\u526a\u679d\uff09\n        int right = max(0, dfs(root->right, res)); // \u53f3\u5b50\u6811\u7684\u6700\u5927\u8def\u5f84\u548c\uff0c\u6216 0\uff08\u526a\u679d\uff09\n        res = max(res, left + right + root->val);\n        return max(left, right) + root->val;\n    }\n    int maxPathSum(TreeNode *root) {\n        int res = root->val;\n        dfs(root, res);\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811")),(0,o.kt)("p",null,"\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u3002"),(0,o.kt)("p",null,"\u53ea\u6709\u4e2d\u5e8f+\u524d\u5e8f\u3001\u4e2d\u5e8f+\u540e\u5e8f\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002"),(0,o.kt)("p",null,"\u6839\u636e\u524d\u5e8f\u904d\u5386\u5f97\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5b83\u7684\u5de6\u8fb9\u5c31\u662f\u5de6\u5b50\u6811\u7684\u8282\u70b9\uff0c\u53f3\u8fb9\u5c31\u662f\u53f3\u5b50\u6811\u7684\u8282\u70b9\u3002\u8fd9\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u524d\u5e8f\u904d\u5386\u7684\u8fc7\u7a0b\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(62489).Z,width:"2414",height:"598"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode* build(vector<int>& preorder, int preLeft, int preRight, vector<int>& inorder, int inLeft, int inRight, unordered_map<int, int> &um) {\n        if (preLeft > preRight || inLeft > inRight) return nullptr;\n        TreeNode *root = new TreeNode(preorder[preLeft]);\n        int pIndex = um[root->val];\n        root->left = build(preorder, preLeft + 1, preLeft + pIndex - inLeft, inorder, inLeft, pIndex - 1, um);\n        root->right = build(preorder, preLeft + pIndex - inLeft + 1, preRight, inorder, pIndex + 1, inRight, um);\n        return root;\n    }\n    TreeNode *buildTree(vector<int>& preorder, vector<int>& inorder) {\n        unordered_map<int, int> um;\n        for (int i = 0; i < inorder.size(); ++i) {\n            um[inorder[i]] = i; // value -> position\n        }\n        return build(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1, um);\n    }\n};\n")),(0,o.kt)("h3",{id:"106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"},"106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811")),(0,o.kt)("p",null,"\u6839 - \u5de6 - \u53f3\uff0c\u524d\u5e8f\u904d\u5386\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode *build(vector<int>& inorder, int inLeft, int inRight, vector<int>& postorder, int postLeft, int postRight, unordered_map<int, int> &um) {\n        if (inLeft > inRight || postLeft > postRight) return nullptr;\n        TreeNode *root = new TreeNode(postorder[postRight]);\n        int pIndex = um[root->val];\n        root->left = build(inorder, inLeft, pIndex - 1, postorder, postLeft, postLeft + pIndex - inLeft - 1, um);\n        root->right = build(inorder, pIndex + 1, inRight, postorder, postLeft + pIndex - inLeft, postRight - 1, um);\n        return root;\n    }\n    TreeNode *buildTree(vector<int>& inorder, vector<int>& postorder) {\n        unordered_map<int, int> um;\n        for (int i = 0; i < inorder.size(); ++i) {\n            um[inorder[i]] = i;\n        }\n        return build(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1, um);\n    }\n};\n")),(0,o.kt)("h3",{id:"100-\u76f8\u540c\u7684\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/same-tree/"},"100-\u76f8\u540c\u7684\u6811")),(0,o.kt)("p",null,"\u6839\u8282\u70b9\u76f8\u540c\u3001\u5de6\u5b50\u6811\u76f8\u540c\u3001\u53f3\u5b50\u6811\u4e5f\u76f8\u540c\uff0c\u8fd9\u662f\u4e00\u4e2a\u524d\u5e8f\u904d\u5386\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (!p && !q) return true;\n        if (p && q) {\n            if (p->val != q->val) return false;\n            if (!isSameTree(p->left, q->left)) return false;\n            if (!isSameTree(p->right, q->right)) return false;\n            return true;\n        }\n        return false;\n    }\n};\n")),(0,o.kt)("h3",{id:"101-\u5bf9\u79f0\u4e8c\u53c9\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/symmetric-tree/"},"101-\u5bf9\u79f0\u4e8c\u53c9\u6811")),(0,o.kt)("p",null,"\u82e5 p \u548c q \u76f8\u540c\uff0cp.left \u548c q.right \u76f8\u540c\uff0cp.right \u548c q.left \u76f8\u540c\uff0c\u5219\u4e3a\u5bf9\u79f0\uff0c\u8fd9\u662f\u4e00\u4e2a\u524d\u5e8f\u904d\u5386\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool dfs(TreeNode *p, TreeNode *q) {\n        if (!p && !q) return true;\n        if (p && q) {\n            if (p->val != q->val) return false;\n            if (!dfs(p->left, q->right)) return false;\n            if (!dfs(p->right, q->left)) return false;\n            return true;\n        }\n        return false;\n    }\n    bool isSymmetric(TreeNode* root) {\n        if (!root) return true;\n        return dfs(root->left, root->right);\n    }\n};\n")),(0,o.kt)("h3",{id:"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/"},"104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6")),(0,o.kt)("p",null,"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u7b49\u4e8e max(\u5de6\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u53f3\u5b50\u6811\u7684\u6df1\u5ea6) + 1\uff0c\u8fd9\u662f\u4e00\u4e2a\u540e\u5e8f\u904d\u5386\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (!root) return 0;\n        int left = maxDepth(root->left);\n        int right = maxDepth(root->right);\n        return max(left, right) + 1;\n    }\n};\n")),(0,o.kt)("h3",{id:"129-\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/"},"129-\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c")),(0,o.kt)("p",null,"\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2->3 \u4ee3\u8868\u6570\u5b57 123\u3002\u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002"),(0,o.kt)("p",null,"\u6bcf\u6df1\u5165\u4e00\u5c42\uff0c\u6570\u5b57\u548c\u7b49\u4e8e\uff08\u4e0a\u4e00\u5c42\u7684\u7ed3\u679c\u4e58\u4ee5 10 + \u5f53\u524d\u8282\u70b9\u503c\uff09\u3002\u82e5\u5f53\u524d\u5230\u8fbe\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u5f97\u5230\u4e00\u4e2a\u548c\uff1b\u5426\u5219\uff0c\u5206\u522b\u5411\u5de6\u3001\u53f3\u5b50\u6811\u6df1\u5165\uff0c\u8fd9\u662f\u4e00\u4e2a\u524d\u5e8f\u904d\u5386\uff0c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int dfs(TreeNode *root, int path) {\n        if (!root) return 0;\n        path = path * 10 + root->val;\n        if (!root->left && !root->right)\n            return path;\n        return dfs(root->left, path) + dfs(root->right, path);\n    }\n    int sumNumbers(TreeNode* root) {\n        return dfs(root, 0);\n    }\n};\n")),(0,o.kt)("h3",{id:"226-\u7ffb\u8f6c\u4e8c\u53c9\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/invert-binary-tree/"},"226-\u7ffb\u8f6c\u4e8c\u53c9\u6811")),(0,o.kt)("p",null,"\u540e\u5e8f\u904d\u5386"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode* invertTree(TreeNode *root) {\n        if (!root) return nullptr;\n        TreeNode *left = invertTree(root->right);\n        TreeNode *right = invertTree(root->left);\n        root->left = left;\n        root->right = right;\n        return root;\n    }\n};\n")),(0,o.kt)("h3",{id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/"},"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148")),(0,o.kt)("p",null,"The lowest common ancestor (LCS) is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself)."),(0,o.kt)("p",null,"\u540e\u5e8f\u904d\u5386\uff0c\u627e\u5230 p \u6216 q \u5c31\u8fd4\u56de\u3002"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u82e5 root == p \u6216 q\uff0c\u90a3\u4e48 root \u5c31\u662f p\u3001q \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08p \u6216 q \u672c\u8eab\uff09\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u5411\u5de6\u3001\u53f3\u5b50\u6811\u5206\u522b\u67e5\u627e p \u6216 q\uff1b\u82e5\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e p\u3001q \u5206\u522b\u5728\u5de6\u53f3\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48 LCS \u5c31\u662f root\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u4ec5\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0cp \u548c q \u5b58\u5728\u5de6\u5b50\u6811\u5185\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\uff1b\u53f3\u5b50\u6811\u540c\u7406\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (!root || root == p || root == q) return root;\n        TreeNode *left = lowestCommonAncestor(root->left, p, q);\n        TreeNode *right = lowestCommonAncestor(root->right, p, q);\n        if (!left) return right;\n        if (!right) return left;\n        return root;\n    }\n};\n")),(0,o.kt)("h2",{id:"\u4e8c\u53c9\u641c\u7d22\u6811"},"\u4e8c\u53c9\u641c\u7d22\u6811"),(0,o.kt)("p",null,"BST \u7684\u4e2d\u5e8f\u904d\u5386\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0cBST \u6709\u5173\u7684\u95ee\u9898\u90fd\u662f\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u89e3\u51b3\u3002"),(0,o.kt)("h3",{id:"99-\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/recover-binary-search-tree/"},"99-\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811")),(0,o.kt)("p",null,"\u4e00\u68f5 BST \u4e2d\u7684\u4e24\u4e2a\u8282\u70b9\u88ab\u9519\u8bef\u5730\u4ea4\u6362\u3002\u5728\u4e0d\u6539\u53d8\u5176\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u6062\u590d\u8fd9\u68f5\u6811\u3002"),(0,o.kt)("p",null,"\u601d\u8def\u662f\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u89c2\u5bdf\u95ee\u9898\u7684\u7279\u70b9\uff1a\u88ab\u4ea4\u6362\u7684\u8282\u70b9\u4e0d\u76f8\u90bb ","[5, 2, 3, 4, 1]"," \u6216\u76f8\u90bb ","[2, 1, 3, 4, 5]","\u3002"),(0,o.kt)("p",null,"\u8bb0\u4f4f\u524d\u4e00\u4e2a\u8282\u70b9\u5e76\u4e0e\u5f53\u524d\u8282\u70b9\u6bd4\u8f83\uff0c\u53d1\u73b0\u5e76\u8bb0\u4f4f\u4e71\u5e8f\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u6700\u540e\u4ea4\u6362\u503c\u5373\u53ef\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(TreeNode *root) {\n        if (!root) return;\n        dfs(root->left);\n        if (pre && root->val < pre->val) {\n            if (!first) {\n                first = pre;\n            }\n            second = root;\n        }\n        pre = root;\n        dfs(root->right);\n    }\n    void recoverTree(TreeNode* root) {\n        dfs(root);\n        swap(first->val, second->val);\n    }\nprivate:\n    TreeNode *first;\n    TreeNode *second;\n    TreeNode *pre;\n};\n")),(0,o.kt)("h3",{id:"98-\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/validate-binary-search-tree/"},"98-\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u9a8c\u8bc1\u5176\u662f\u5426 BST\u3002"),(0,o.kt)("p",null,"\u4e2d\u5e8f\u904d\u5386\uff0c\u8bb0\u4f4f\u524d\u4e00\u4e2a\u8282\u70b9\u5e76\u4e0e\u5f53\u524d\u8282\u70b9\u6bd4\u8f83\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isValidBST(TreeNode *root) {\n        if (!root) return true;\n        if (!isValidBST(root->left))\n            return false;\n        if (cur && cur->val >= root->val)\n            return false;\n        cur = root;\n        if (!isValidBST(root->right))\n            return false;\n        return true;\n    }\nprivate:\n    TreeNode *cur;\n};\n")),(0,o.kt)("h3",{id:"108-\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/"},"108-\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811")),(0,o.kt)("p",null,"\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u6210 BST \u6709\u591a\u79cd\u7b54\u6848\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode *build(vector<int>& nums, int lo, int hi) {\n        if (lo > hi) return nullptr;\n        int mid = lo + (hi - lo) / 2;\n        TreeNode *root = new TreeNode(nums[mid]);\n        root->left = build(nums, lo, mid - 1);\n        root->right = build(nums, mid + 1, hi);\n        return root;\n    }\n    TreeNode *sortedArrayToBST(vector<int>& nums) {\n        return build(nums, 0, nums.size() - 1);\n    }\n};\n")),(0,o.kt)("h3",{id:"230-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c-k-\u5c0f\u7684\u5143\u7d20"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/"},"230-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20")),(0,o.kt)("p",null,"\u6267\u884c\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6709\u5e8f\u6570\u7ec4\uff0c\u53d6 res","[k-1]"," \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(TreeNode *root, vector<int> &res) {\n        if (!root) return;\n        dfs(root->left, res);\n        res.push_back(root->val);\n        dfs(root->right, res);\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        vector<int> res;\n        dfs(root, res);\n        return res[k-1];\n    }\n};\n")),(0,o.kt)("p",null,"\u501f\u7528\u6808\u548c\u8fed\u4ee3\u6cd5\uff0c\u53ef\u4ee5\u4e0d\u5fc5\u904d\u5386\u6574\u4e2a\u4e8c\u53c9\u6811\u5f97\u5230\u5b8c\u6574\u6570\u7ec4\uff0c\u800c\u662f\u5728\u627e\u5230\u7b2c K \u4e2a\u5143\u7d20\u65f6\u5c31\u505c\u6b62\u3002\u4e5f\u662f\u4e00\u4e2a\u4e2d\u5e8f\u904d\u5386\u3002"),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u5230 O(H+K)\uff0c\u5176\u4e2d H \u662f\u6811\u7684\u9ad8\u5ea6\u3002\u5728\u6808\u5f00\u59cb pop \u4e4b\u524d\uff0c\u9700\u8981 H \u6b21\u8fd0\u7b97\u6765\u5230\u8fbe\u53f6\u5b50\u7ed3\u70b9\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        stack<TreeNode *> stk;\n        while (true) {\n            while (root) {\n                stk.push(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            k -= 1;\n            if (k == 0) {\n                return root->val;\n            }\n            root = root->right;\n        }\n        return 0;\n    }\n};\n")),(0,o.kt)("h3",{id:"96-\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/unique-binary-search-trees/"},"96-\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u6c42\u4ee5 1 ... n \u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f"),(0,o.kt)("p",null,"\u5b9a\u4e49 f(n) = n \u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2a\u6570\u3002"),(0,o.kt)("p",null,"\u5b9a\u4e49 g(i) = \u4ee5 i \u4e3a\u6839\u8282\u70b9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2a\u6570\uff0c\u5bf9\u4e8e g(i)\uff0c\u5176\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u4e3a i-1\uff0c\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u4e3a n-i\uff0c\u56e0\u6b64 ",(0,o.kt)("inlineCode",{parentName:"p"},"g(i) = f(i-1) * f(n-i)"),"\u3002"),(0,o.kt)("p",null,"f(n) = g(1) + g(2) + ... + g(n) \uff081...n \u6bcf\u4e2a\u6570\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6839\u8282\u70b9\uff09\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numTrees(int n) {\n        vector<int> dp(n+1);\n        dp[0] = 1;\n        dp[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j <= i; ++j) {\n                dp[i] += dp[j-1] * dp[i-j];\n            }\n        }\n        return dp[n];\n    }\n};\n")),(0,o.kt)("h2",{id:"\u76ee\u6807\u548c\u6392\u5217\u7ec4\u5408\u95ee\u9898"},"\u76ee\u6807\u548c\u3001\u6392\u5217\u7ec4\u5408\u95ee\u9898"),(0,o.kt)("h3",{id:"112-\u76ee\u6807\u548cdfs"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/path-sum/"},"112-\u76ee\u6807\u548c"),"\uff08DFS\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u3002\u53f6\u5b50\u7ed3\u70b9\u662f\u6ca1\u6709\u5b50\u6811\u7684\u8282\u70b9\u3002"),(0,o.kt)("p",null,"\u5f53\u524d\u8282\u70b9\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5de6\u5b50\u6811\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3001\u53f3\u5b50\u6811\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff1b\u8fd9\u662f\u4e00\u4e2a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4e14\u662f\u524d\u5e8f\u904d\u5386\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int target) {\n        if (!root) return false;\n        target -= root->val;\n        if (target == 0 && !root->left && !root->right)\n            return true;\n        return hasPathSum(root->left, target) || hasPathSum(root->right, target);\n    }\n};\n")),(0,o.kt)("h3",{id:"113-\u76ee\u6807\u548c-ii\u56de\u6eaf\u6cd5"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/path-sum-ii/"},"113-\u76ee\u6807\u548c II"),"\uff08\u56de\u6eaf\u6cd5\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002"),(0,o.kt)("p",null,"\u95ee\u5b8c\u6210\u4e00\u4ef6\u4e8b\u60c5\u7684\u6240\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u4e00\u822c\u91c7\u7528\u56de\u6eaf\u7b97\u6cd5\uff08\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff09\u5b8c\u6210\u3002"),(0,o.kt)("p",null,"\u89e3\u51b3\u4e00\u4e2a\u56de\u6eaf\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u51b3\u7b56\u6811\u7684\u904d\u5386\u8fc7\u7a0b\u3002\u4f60\u53ea\u9700\u8981\u601d\u8003 3 \u4e2a\u95ee\u9898\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u8def\u5f84\uff1a\u5b58\u50a8\u5df2\u7ecf\u8bbf\u95ee\u7684\u8282\u70b9\u3002\u56de\u6eaf\u65f6\uff0c\u8981\u5c06\u8282\u70b9\u5f39\u51fa\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u7ed3\u675f\u6761\u4ef6\uff1a\u5230\u8fbe\u51b3\u7b56\u6811\u53f6\u5b50\u7ed3\u70b9\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u5b50\u6811\uff1a\u5f53\u524d\u53ef\u4ee5\u8d70\u7684\u8def\u5f84\uff0c\u4e0d\u65ad\u63a5\u8fd1\u53f6\u5b50\u7ed3\u70b9\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(TreeNode *root, int target, vector<int> &path, vector<vector<int>> &res) {\n        if (!root) return;\n        path.push_back(root->val); // \u8282\u70b9\u8fdb\u5165\n        target -= root->val;\n        if (target == 0 && !root->left && !root->right) {\n            res.push_back(vector<int>(path));\n            path.pop_back();\n            return;\n        }\n        dfs(root->left, target, path, res);\n        dfs(root->right, target, path, res);\n        path.pop_back(); // \u8282\u70b9\u5f39\u51fa\n    }\n    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {\n        vector<vector<int>> res;\n        vector<int> path;\n        dfs(root, targetSum, path, res);\n        return res;\n    }\n};\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img",src:n(99208).Z,width:"886",height:"732"})),(0,o.kt)("h3",{id:"437-\u76ee\u6807\u548c-iii\u524d\u7f00\u548c"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/path-sum-iii/"},"437-\u76ee\u6807\u548c III"),"\uff08\u524d\u7f00\u548c\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u603b\u6570\u3002\u8def\u5f84\u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\u3002"),(0,o.kt)("p",null,"\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u5ef6\u7eed\u4e0a\u4e00\u9898\u7684\u601d\u8def\uff0c\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u90fd\u7b97\u4e00\u904d\u548c\u4e3a sum \u7684\u8def\u5f84\u6570\u3002\u4e8c\u53c9\u6811\u7684 dfs \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N)\uff0c\u5bf9 N \u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u6267\u884c\u4e00\u904d dfs\uff0c\u8fd0\u7b97\u6b21\u6570\u7b49\u4e8e N ","*"," \u6811\u7684\u9ad8\u5ea6\uff0c\u5bf9\u4e8e\u5e73\u8861\u4e8c\u53c9\u6811\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(Nlog(N))\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\u7684\u659c\u4e8c\u53c9\u6811\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N^2)\u3002"),(0,o.kt)("p",null,"\u6c42\u6240\u6709\u5177\u4f53\u8def\u5f84\u7684\uff0c\u7528\u56de\u6eaf\u6cd5\uff1b\u4e0d\u6c42\u5177\u4f53\u8def\u5f84\uff0c\u4ec5\u6c42\u89e3\u7684\u4e2a\u6570\u7684\uff0c\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u3001\u52a8\u6001\u89c4\u5212\u3002"),(0,o.kt)("p",null,"\u524d\u7f00\u548c\uff1a\u7ed9\u5b9a\u6570\u7ec4 nums\uff0c\u5b9a\u4e49 ",(0,o.kt)("inlineCode",{parentName:"p"},"prefixSum(n) = nums[0] + nums[1] + ... + nums[n]")," \u4e3a\u6570\u7ec4\u7684\u524d\u7f00\u548c\u3002\u90a3\u4e48\u5219\u6709\uff1a"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"nums[n] = prefixSum(n) - prefixSum(n-1)")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"nums[i] + ... + nums[j] = prefixSum(j) - prefixSum(i-1)")),(0,o.kt)("p",null,"\u76f8\u540c\u7684\u524d\u7f00\u548c\u53ef\u80fd\u51fa\u73b0\u591a\u6b21\uff0c\u5982\u679c prefixSum(i) == prefixSum(j)\uff0c\u90a3\u4e48 (i, j] \u7684\u533a\u95f4\u7684\u6570\u7684\u548c\u4e00\u5b9a\u4e3a 0\u3002"),(0,o.kt)("p",null,"\u5982\u679c prefixSum(i) + target == prefixSum(j)\uff0c\u90a3\u4e48(i, j] \u7684\u533a\u95f4\u7684\u6570\u7684\u548c\u4e00\u5b9a\u4e3a target\u3002"),(0,o.kt)("p",null,"\u672c\u9898\u7684\u5173\u952e\u6280\u5de7\uff0c\u662f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55 {key: \u524d\u7f00\u548c\uff1bvalue: \u51fa\u73b0\u6b21\u6570}\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(TreeNode *root, int target, int prefixSum, unordered_map<int, int> &um) {\n        if (!root) return;\n        prefixSum += root->val;\n        res += um[prefixSum - target];\n        um[prefixSum] += 1;\n        dfs(root->left, target, prefixSum, um);\n        dfs(root->right, target, prefixSum, um);\n        um[prefixSum] -= 1;\n    }\n    int pathSum(TreeNode* root, int sum) {\n        unordered_map<int, int> um;\n        um[0] = 1;\n        dfs(root, sum, 0, um);\n        return res;\n    }\nprivate:\n    int res;\n};\n")),(0,o.kt)("h3",{id:"560-\u76ee\u6807\u548c\u5b50\u6570\u7ec4\u524d\u7f00\u548c"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/subarray-sum-equals-k/"},"560-\u76ee\u6807\u548c\u5b50\u6570\u7ec4"),"\uff08\u524d\u7f00\u548c\uff09"),(0,o.kt)("p",null,"\u524d\u7f00\u548c\u5bf9\u4e8e\u8fde\u7eed\u5b50\u6570\u7ec4\u6c42\u548c\u95ee\u9898\u7279\u522b\u6709\u7528\uff01\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55 {key: \u524d\u7f00\u548c\uff1bvalue: \u51fa\u73b0\u6b21\u6570}\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        int prefixSum = 0;\n        int res = 0;\n        unordered_map<int, int> um;\n        um[0] = 1;\n        for (int i = 0; i < nums.size(); ++i) {\n            prefixSum += nums[i];\n            res += um[prefixSum - k];\n            um[prefixSum] += 1;\n        }\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"39-\u7ec4\u5408\u7684\u548c\u56de\u6eaf\u6cd5"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/combination-sum/"},"39-\u7ec4\u5408\u7684\u548c"),"\uff08\u56de\u6eaf\u6cd5\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0c\u627e\u51fa\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u89e3\u4e0d\u80fd\u5305\u62ec\u76f8\u540c\u7ec4\u5408\uff08\u540c\u4e00\u7ec4\u6570\u5b57\u7684\u4e0d\u540c\u6392\u5217\u662f\u76f8\u540c\u7ec4\u5408\uff09\u3002"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u8fd9\u7c7b\u5bfb\u627e",(0,o.kt)("strong",{parentName:"p"},"\u6240\u6709\u53ef\u884c\u89e3"),"\u7684\u9898\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5c1d\u8bd5\u7528\u300c\u641c\u7d22\u56de\u6eaf\u300d\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(vector<int> &nums, int target, vector<int> &path, vector<vector<int>> &res, int start) {\n        if (target < 0) return;\n        if (target == 0) {\n            res.push_back(vector<int>(path));\n            return;\n        }\n        for (int i = start; i < nums.size(); ++i) {\n            path.push_back(nums[i]);\n            dfs(nums, target - nums[i], path, res, i);\n            path.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        vector<vector<int>> res;\n        vector<int> path;\n        dfs(candidates, target, path, res, 0);\n        return res;\n    }\n};\n")),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u6ca1\u6709\u627e\u5230\u6bd4\u8f83\u6743\u5a01\u7684\u8bc4\u8bba\uff0c\u4f46\u5927\u81f4\u662f\u6bcf\u4e2a\u6570\u5b57\u9700\u8981\u8003\u8651\u9009\u62e9\u548c\u4e0d\u9009\u4e24\u79cd\u72b6\u6001\uff0c\u56e0\u6b64\u4e0a\u9650\u662f O(2^N)\u3002"),(0,o.kt)("h3",{id:"40-\u7ec4\u5408\u7684\u548c-ii\u56de\u6eaf\u6cd5"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/combination-sum-ii/"},"40-\u7ec4\u5408\u7684\u548c II"),"\uff08\u56de\u6eaf\u6cd5\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0c\u627e\u51fa\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002\u6570\u7ec4\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u89e3\u4e0d\u80fd\u5305\u62ec\u76f8\u540c\u7ec4\u5408\u3002"),(0,o.kt)("p",null,"\u4f8b\u5b50\uff1a","[10,1,2,7,6,1,5]","\uff0ctarget = 8\uff1b\u8f93\u51fa\uff1a[","[1,1,6]",",","[1,2,5]",",","[1,7]",",","[2,6]","]\u3002"),(0,o.kt)("p",null,"\u56e0\u53bb\u91cd\u9700\u8981\uff0c\u8fdb\u884c\u6392\u5e8f\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(vector<int> &nums, int target, vector<int> &path, vector<vector<int>> &res, int start) {\n        if (target < 0) return;\n        if (target == 0) {\n            res.push_back(vector<int>(path));\n            return;\n        }\n        for (int i = start; i < nums.size(); ++i) {\n            if (i > start && nums[i] == nums[i-1]) continue;\n            path.push_back(nums[i]);\n            dfs(nums, target - nums[i], path, res, i + 1); // nums[i] \u5df2\u7ecf\u4f7f\u7528\u4e86\uff0c\u4ece nums[i+1] \u7ee7\u7eed\u641c\u7d22\n            path.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        vector<vector<int>> res;\n        vector<int> path;\n        dfs(candidates, target, path, res, 0);\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"216-\u7ec4\u5408\u7684\u548c-iii\u56de\u6eaf\u6cd5"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/combination-sum-iii/"},"216-\u7ec4\u5408\u7684\u548c III"),"\uff08\u56de\u6eaf\u6cd5\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 ","[1, 2, 3, 4, 5, 6, 7, 8, 9]"," \u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0c\u8981\u6c42\u4f7f\u7528 k \u4e2a\u6570\uff0c\u627e\u51fa\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002\u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u89e3\u4e0d\u80fd\u5305\u62ec\u76f8\u540c\u7ec4\u5408\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(vector<int> &nums, int target, vector<int> &path, vector<vector<int>> &res, int start, int k) {\n        if (target < 0) return;\n        if (target == 0) {\n            if (path.size() == k) {\n                res.push_back(vector<int>(path));\n            }\n            return;\n        }\n        if (path.size() >= k) return;\n        for (int i = start; i < nums.size(); ++i) {\n            path.push_back(nums[i]);\n            dfs(nums, target - nums[i], path, res, i + 1, k);\n            path.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum3(int k, int n) {\n        vector<int> nums{1, 2, 3, 4, 5, 6, 7, 8, 9};\n        vector<vector<int>> res;\n        vector<int> path;\n        dfs(nums, n, path, res, 0, k);\n        return res;\n    }\n};\n")),(0,o.kt)("h3",{id:"70-\u722c\u697c\u68af\u52a8\u6001\u89c4\u5212"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/climbing-stairs/"},"70-\u722c\u697c\u68af"),"\uff08\u52a8\u6001\u89c4\u5212\uff09"),(0,o.kt)("p",null,"\u4f60\u9700\u8981\u722c n \u9636\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u53ea\u95ee\u65b9\u6cd5\u4e2a\u6570\uff0c\u4e0d\u95ee\u5177\u4f53\u7684\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u4e0d\u7528\u56de\u6eaf\u6cd5\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int climbStairs(int n) {\n        vector<int> dp(n+1);\n        dp[0] = 1;\n        dp[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            dp[i] = dp[i-1] + dp[i-2];\n        }\n        return dp[n];\n    }\n};\n")),(0,o.kt)("h3",{id:"377-\u7ec4\u5408\u7684\u548c-iv\u52a8\u6001\u89c4\u5212"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/combination-sum-iv/"},"377-\u7ec4\u5408\u7684\u548c IV"),"\uff08\u52a8\u6001\u89c4\u5212\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u7ec4\u6210\u76ee\u6807\u6570\uff08\u6570\u5b57\u548c\u4e3a\u76ee\u6807\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\uff0c\u4e0d\u540c\u7684\u6392\u5217\u89c6\u4e3a\u4e0d\u540c\u7684\u7ec4\u5408\uff09\u3002\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002"),(0,o.kt)("p",null,"\u8fd9\u9053\u9898\u662f\u722c\u697c\u68af\u7684\u5347\u7ea7\u7248\uff0c\u5373\u9700\u8981\u722c target \u9636\uff0c\u6bcf\u4e00\u6b21\u53ef\u4ee5\u722c num in nums \u9636\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u722c\u6cd5\u3002\u76f4\u63a5\u5ef6\u7eed\u4e0a\u4e00\u9898\u7684\u89e3\u9898\u601d\u8def\u5373\u53ef\u3002"),(0,o.kt)("p",null,"C++ \u8ba1\u7b97 dp","[i]"," \u65f6\u6570\u503c\u53ef\u80fd\u5df2\u7ecf\u6ea2\u51fa int \u8303\u56f4\uff0c\u7531\u4e8e\u9898\u76ee\u7684\u8fd4\u56de\u7c7b\u578b\u662f int\uff0c\u80af\u5b9a\u4e0d\u53ef\u80fd\u8f93\u51fa\u662f\u4e00\u4e2a\u6ea2\u51fa int \u7684\u6570\uff0c\u56e0\u6b64\u8be5\u6ea2\u51fa\u9879\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int combinationSum4(vector<int>& nums, int target) {\n        vector<int> dp(target + 1);\n        dp[0] = 1;\n        for (int i = 1; i <= target; ++i) {\n            for (int num : nums) {\n                if (i >= num && dp[i] <= INT_MAX - dp[i-num]) {\n                    dp[i] += dp[i-num];\n                }\n            }\n        }\n        return dp[target];\n    }\n};\n")),(0,o.kt)("h3",{id:"46-\u5168\u6392\u5217\u56de\u6eaf\u6cd5"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/permutations/"},"46-\u5168\u6392\u5217"),"\uff08\u56de\u6eaf\u6cd5\uff09"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u5168\u6392\u5217\u3002"),(0,o.kt)("p",null,"\u5176\u6838\u5fc3\u5c31\u662f for \u5faa\u73af\u91cc\u9762\u7684\u9012\u5f52\uff0c\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u524d\u300c\u505a\u9009\u62e9\u300d\uff0c\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u540e\u300c\u64a4\u9500\u9009\u62e9\u300d\uff0c\u7279\u522b\u7b80\u5355\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(vector<int> &nums, int target, vector<int> &path, vector<vector<int>> &res, vector<bool> &visited) {\n        if (target == 0) {\n            res.push_back(vector<int>(path));\n            return;\n        }\n        for (int i = 0; i < nums.size(); ++i) {\n            if (!visited[i]) {\n                path.push_back(nums[i]);\n                visited[i] = true;\n                dfs(nums, target - 1, path, res, visited);\n                visited[i] = false;\n                path.pop_back();\n            }\n        }\n    }\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<vector<int>> res;\n        vector<int> path;\n        int N = nums.size();\n        vector<bool> visited(N, false);\n        dfs(nums, N, path, res, visited);\n        return res;\n    }\n};\n")))}d.isMDXComponent=!0},62489:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/105-a55383d10963602682fef80f61378e2a.png"},99208:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/A95AED26-405E-4B6C-BC3F-FF61423AB2EA-0c109c717f32fe27e7daf92f02b577bf.JPG"},24219:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/bfs_dfs-6b6cf6db5f575b5a127332ddc3fae667.png"}}]);