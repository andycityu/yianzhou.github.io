"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1930],{39621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=t(87462),r=(t(67294),t(3905));t(61839);const i={},o="\u8bbe\u8ba1\u9898",p={unversionedId:"leetcode/leetcode6",id:"leetcode/leetcode6",title:"\u8bbe\u8ba1\u9898",description:"\u6709\u9650\u72b6\u6001\u673a",source:"@site/docs/dev/leetcode/leetcode6.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode6",permalink:"/docs/dev/leetcode/leetcode6",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5b57\u7b26\u4e32",permalink:"/docs/dev/leetcode/leetcode5"},next:{title:"\u4ee3\u6570\u3001\u51e0\u4f55",permalink:"/docs/dev/leetcode/leetcode7"}},s={},d=[{value:"\u6709\u9650\u72b6\u6001\u673a",id:"\u6709\u9650\u72b6\u6001\u673a",level:2},{value:"8-\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\uff08atoi\uff09",id:"8-\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570atoi",level:3},{value:"65-\u6709\u6548\u6570\u5b57",id:"65-\u6709\u6548\u6570\u5b57",level:3},{value:"393-UTF-8 \u7f16\u7801\u9a8c\u8bc1",id:"393-utf-8-\u7f16\u7801\u9a8c\u8bc1",level:3},{value:"\u6570\u636e\u7ed3\u6784",id:"\u6570\u636e\u7ed3\u6784",level:2},{value:"146-LRU Cache",id:"146-lru-cache",level:3},{value:"155-\u6700\u5c0f\u6808",id:"155-\u6700\u5c0f\u6808",level:3},{value:"225-\u7528\u961f\u5217\u5b9e\u73b0\u6808",id:"225-\u7528\u961f\u5217\u5b9e\u73b0\u6808",level:3},{value:"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217",id:"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217",level:3},{value:"895-\u6700\u5927\u9891\u7387\u6808",id:"895-\u6700\u5927\u9891\u7387\u6808",level:3}],l={toc:d};function u(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u8bbe\u8ba1\u9898"},"\u8bbe\u8ba1\u9898"),(0,r.kt)("h2",{id:"\u6709\u9650\u72b6\u6001\u673a"},"\u6709\u9650\u72b6\u6001\u673a"),(0,r.kt)("p",null,'\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08FSM "Finite State Machine" \u6216\u8005 FSA "Finite State Automaton"\uff09\u89e3\u51b3\u4e00\u4e2a\u8f93\u5165\u5e8f\u5217\uff0c\u7ecf\u8fc7 FSM\uff0c\u6700\u7ec8\u505c\u7559\u5728\u4ec0\u4e48\u72b6\u6001\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\u3002\u6784\u5efa FSM \u4ea7\u51fa\u8fd9\u6837\u4e00\u4e2a\u5b57\u5178\uff1a\u5728 x \u72b6\u6001\u4e0b\uff0c\u8f93\u5165 a\uff0c\u5c31\u4f1a\u5f97\u5230 y \u72b6\u6001\u3002'),(0,r.kt)("h3",{id:"8-\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570atoi"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/string-to-integer-atoi/"},"8-\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\uff08atoi\uff09")),(0,r.kt)("p",null,'\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002"42"\u3001" -42"\u3001"4193 with words"\u3001"words and 987"\u3001"-91283472332"\u2026\u2026'),(0,r.kt)("p",null,"\u6bcf\u4e00\u4f4d\u7684\u5b57\u7b26\uff0c\u53ef\u80fd\u6709 4 \u79cd\u60c5\u51b5\uff1a\u6570\u5b57\u3001+/-\u53f7\u3001\u5b57\u6bcd\u3001\u7a7a\u683c\u3002\u518d\u52a0\u4e0a\u8003\u8651\u8fb9\u754c\u60c5\u51b5\u7684\u5904\u7406\uff0c\u5982\u679c\u7528 if...else... \u7ed3\u6784\uff0c\u4ee3\u7801\u4f1a\u5199\u5f97\u6bd4\u8f83\u81c3\u80bf\u3002\u56e0\u6b64\u8003\u8651\u7528\u6709\u9650\u72b6\u6001\u673a\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class Automator {\npublic:\n    Automator() {\n        um["start"] = {"start", "sign", "number", "end"};\n        um["sign"] = {"end", "end", "number", "end"};\n        um["number"] = {"end", "end", "number", "end"};\n        um["end"] = {"end", "end", "end", "end"};\n    }\n\n    int columnOf(char input) {\n        if (isspace(input)) {\n            return 0;\n        } else if (input == \'+\' || input == \'-\') {\n            return 1;\n        } else if (isdigit(input)) {\n            return 2;\n        } else {\n            return 3;\n        }\n    }\n\n    void input(char c) {\n        state = um[state][columnOf(c)];\n        if (state == "number") {\n            res = res * 10 + (c - \'0\');\n            res = sign == 1 ? min(res, (long long)INT_MAX) : min(res, -(long long)INT_MIN);\n        } else if (state == "sign") {\n            sign = c == \'+\' ? 1 : -1;\n        }\n    }\n\n    string state = "start"; // \u5f53\u524d\u72b6\u6001\n    int sign = 1; // \u6b63\u8d1f\u53f7\n    long long res = 0; // \u7ed3\u679c\n\nprivate:\n    unordered_map<string, vector<string>> um; // \u6570\u7ec4 0,1,2,3 \u5206\u522b\u4ee3\u8868\u7a7a\u683c\u3001\u7b26\u53f7\u3001\u6570\u5b57\u3001\u5b57\u7b26\n};\n\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        Automator autom = Automator();\n        for (char c : s) {\n            autom.input(c);\n            if (autom.state == "end") {\n                break;\n            }\n        }\n        int res = static_cast<int>(autom.sign * autom.res);\n        return res;\n    }\n};\n')),(0,r.kt)("h3",{id:"65-\u6709\u6548\u6570\u5b57"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-number/"},"65-\u6709\u6548\u6570\u5b57")),(0,r.kt)("h3",{id:"393-utf-8-\u7f16\u7801\u9a8c\u8bc1"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/utf-8-validation/"},"393-UTF-8 \u7f16\u7801\u9a8c\u8bc1")),(0,r.kt)("h2",{id:"\u6570\u636e\u7ed3\u6784"},"\u6570\u636e\u7ed3\u6784"),(0,r.kt)("h3",{id:"146-lru-cache"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/lru-cache/"},"146-LRU Cache")),(0,r.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a LRU \u7f13\u5b58\u5bb9\u5668\uff0c\u652f\u6301\u4ee5\u4e0b\u63a5\u53e3\uff1a"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LRUCache(int capacity)")," \u521d\u59cb\u5316\u65f6\u4f20\u5165\u5bb9\u5668\u7684\u5bb9\u91cf\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"int get(int key)")," \u5982\u679c key \u5b58\u5728\u4e8e\u5bb9\u5668\u4e2d\u5219\u8fd4\u56de value\uff0c\u5426\u5219\u8fd4\u56de -1\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void put(int key, int value)")," \u5982\u679c key \u5b58\u5728\u5219\u66f4\u65b0\u5176 value\uff1b\u5426\u5219\u63d2\u5165\u952e\u503c\u5bf9\u3002\u5f53\u8d85\u51fa\u5bb9\u91cf\u65f6\uff0c\u79fb\u9664\u6700\u4e45\u672a\u4f7f\u7528\u7684\u503c\u3002"),(0,r.kt)("p",null,"\u5b9e\u73b0\u672c\u9898\u7684\u4e24\u79cd\u64cd\u4f5c\uff0c\u9700\u8981\u7528\u5230\u4e00\u4e2a\u54c8\u5e0c\u8868\u548c\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u3002"),(0,r.kt)("p",null,"\u54c8\u5e0c\u8868\u5b58\u50a8\u952e\u5230\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u7684\u6620\u5c04\u3002"),(0,r.kt)("p",null,"\u94fe\u8868\u8981\u5b58\u50a8\u5934\u8282\u70b9\uff1b\u53cc\u5411\u94fe\u8868\u8981\u5b58\u50a8\u5934\u3001\u5c3e\u4e24\u4e2a\u8282\u70b9\u3002\u9760\u8fd1\u5934\u90e8\u7684\u952e\u503c\u5bf9\u662f\u6700\u8fd1\u4f7f\u7528\u7684\uff0c\u9760\u8fd1\u5c3e\u90e8\u7684\u952e\u503c\u5bf9\u662f\u6700\u4e45\u672a\u4f7f\u7528\u7684\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img-80",src:t(67806).Z,width:"2018",height:"490"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <unordered_map>\nusing std::unordered_map;\n\n#include <memory>\nusing std::shared_ptr;\nusing std::make_shared;\n\nstruct Node {\n    Node(int k, int v) : key(k), val(v) {}\n    int key;\n    int val;\n    shared_ptr<Node> pre = nullptr;\n    shared_ptr<Node> next = nullptr;\n};\n\nclass LRUCache {\npublic:\n    LRUCache(int capacity) : capacity(capacity) {\n        // \u4f2a\u5934\u90e8\u548c\u5c3e\u90e8\u8282\u70b9\uff0c\u4e0d\u5b9e\u9645\u5b58\u50a8\u952e\u503c\u5bf9\n        head->next = tail;\n        tail->pre = head;\n    }\n    int get(int key) {\n        if (um.find(key) != um.end()) {\n            shared_ptr<Node> node = um[key];\n            moveToHead(node);\n            return node->val;\n        } else {\n            return -1;\n        }\n    }\n    void put(int key, int value) {\n        if (um.find(key) != um.end()) {\n            shared_ptr<Node> node = um[key];\n            node->val = value;\n            moveToHead(node);\n        } else {\n            shared_ptr<Node> node = make_shared<Node>(key, value);\n            um[key] = node;\n            addToHead(node);\n            ++size;\n            if (size > capacity) {\n                shared_ptr<Node> tail = removeTail();\n                um.erase(tail->key);\n                --size;\n            }\n        }\n    }\nprivate:\n    int capacity; // \u5bb9\u91cf\n    int size = 0; // \u5bb9\u5668\u5f53\u524d\u5927\u5c0f\n    unordered_map<int, shared_ptr<Node>> um; // key -> \u8282\u70b9\n    shared_ptr<Node> head = make_shared<Node>(0, 0); // \u5934\u90e8\u662f\u6700\u8fd1\u4f7f\u7528\u7684\n    shared_ptr<Node> tail = make_shared<Node>(0, 0); // \u5c3e\u90e8\u662f\u6700\u4e45\u672a\u4f7f\u7528\u7684\n\n    void moveToHead(shared_ptr<Node> node) {\n        removeNode(node);\n        addToHead(node);\n    }\n    void addToHead(shared_ptr<Node> node) {\n        node->pre = head;\n        node->next = head->next;\n        head->next->pre = node;\n        head->next = node;\n    }\n    void removeNode(shared_ptr<Node> node) {\n        node->next->pre = node->pre;\n        node->pre->next = node->next;\n    }\n    shared_ptr<Node> removeTail() {\n        shared_ptr<Node> tmp = tail->pre; // \u6ce8\u610f\uff0c\u8fd9\u624d\u662f\u771f\u6b63\u7684\u5c3e\u5df4\uff01\n        removeNode(tmp);\n        return tmp;\n    }\n};\n")),(0,r.kt)("h3",{id:"155-\u6700\u5c0f\u6808"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/min-stack/"},"155-\u6700\u5c0f\u6808")),(0,r.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push, pop, top \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002"),(0,r.kt)("p",null,"\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u8981\u7528\u5230\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u6bcf\u6b21 push \u64cd\u4f5c\uff0c\u5c06\u6570\u538b\u5165\u666e\u901a\u6808\u3001\u540c\u65f6\u5c06\u5f53\u524d\u6700\u5c0f\u503c\u538b\u5165\u8f85\u52a9\u6808\uff0c\u4f7f\u4ed6\u4eec\u540c\u8fdb\u540c\u51fa\u3001\u4e00\u4e00\u5bf9\u5e94\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MinStack {\npublic:\n    void push(int x) {\n        x_stack.push(x);\n        if (min_stack.empty()) {\n            min_stack.push(x);\n        } else {\n            min_stack.push(min(min_stack.top(), x));\n        }\n    }\n    void pop() {\n        x_stack.pop();\n        min_stack.pop();\n    }\n    int top() {\n        return x_stack.top();\n    }\n    int getMin() {\n        return min_stack.top();\n    }\nprivate:\n    stack<int> x_stack;\n    stack<int> min_stack;\n};\n")),(0,r.kt)("h3",{id:"225-\u7528\u961f\u5217\u5b9e\u73b0\u6808"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/implement-stack-using-queues/"},"225-\u7528\u961f\u5217\u5b9e\u73b0\u6808")),(0,r.kt)("p",null,"\u63d2\u5165\u540e\uff0c\u5c06\u961f\u5217\u7684\u524d N \u4e2a\u5143\u7d20\u4f9d\u6b21\u51fa\u961f\u5e76\u5165\u961f\u3002\u63d2\u5165\u64cd\u4f5c\u662f O(N)\uff0c\u5176\u4f59\u662f O(1)\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyStack {\npublic:\n    void push(int x) {\n        int size = q.size();\n        q.push(x);\n        for (int i = 0; i < size; ++i) {\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    int pop() {\n        int front = q.front();\n        q.pop();\n        return front;\n    }\n    int top() {\n        return q.front();\n    }\n    bool empty() {\n        return q.empty();\n    }\nprivate:\n    queue<int> q;\n};\n")),(0,r.kt)("h3",{id:"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/implement-queue-using-stacks/"},"232-\u7528\u6808\u5b9e\u73b0\u961f\u5217")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyQueue {\npublic:\n    void push(int x) {\n        int size = stk1.size();\n        for (int i = 0; i < size; ++i) {\n            stk2.push(stk1.top());\n            stk1.pop();\n        }\n        stk1.push(x);\n        for (int i = 0; i < size; ++i) {\n            stk1.push(stk2.top());\n            stk2.pop();\n        }\n    }\n    int pop() {\n        int top = stk1.top();\n        stk1.pop();\n        return top;\n    }\n    int peek() {\n        return stk1.top();\n    }\n    bool empty() {\n        return stk1.empty();\n    }\nprivate:\n    stack<int> stk1;\n    stack<int> stk2;\n};\n")),(0,r.kt)("h3",{id:"895-\u6700\u5927\u9891\u7387\u6808"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/maximum-frequency-stack/"},"895-\u6700\u5927\u9891\u7387\u6808")),(0,r.kt)("p",null,"\u8fd9\u9898\u4f7f\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784\u6bd4\u8f83\u5de7\u5999\uff0c\u9664\u4e86\u5e38\u89c4\u7684\u6570\u5b57\u5230\u51fa\u73b0\u9891\u6b21\u7684\u5b57\u5178\uff1b\u8fd8\u9700\u8981\u4e00\u4e2a\u9891\u6b21\u5230\u6808\u7684\u5b57\u5178\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class FreqStack {\npublic:\n    void push(int val) {\n        freq[val] += 1;\n        int f = freq[val];\n        maxFreq = max(f, maxFreq);\n        group[f].push(val);\n    }\n\n    int pop() {\n        int res = group[maxFreq].top();\n        group[maxFreq].pop();\n        if (group[maxFreq].empty()) {\n            maxFreq -= 1;\n        }\n        freq[res] -= 1;\n        return res;\n    }\nprivate:\n    unordered_map<int, int> freq; // \u6570 -> \u9891\u6b21\n    unordered_map<int, stack<int>> group; // \u9891\u6b21 -> \u8be5\u9891\u6b21\u4e0b\u7684\u6570\n    int maxFreq; // \u5f53\u524d\u6700\u5927\u9891\u6b21\n};\n")),(0,r.kt)("p",null,"\u5206\u6790\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b\u53ef\u4ee5\u5f97\u77e5\uff0c\u9891\u6b21\u662f\u4ece 1 \u5f00\u59cb\u7684\u8fde\u7eed\u6570\u5b57\uff0c\u56e0\u6b64\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"group")," \u8fd9\u4e2a\u5b57\u5178\u4e5f\u53ef\u4ee5\u7528\u6570\u7ec4\u4ee3\u66ff\u3002"))}u.isMDXComponent=!0},67806:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/\u622a\u5c4f2020-07-0323.04.38-293254b954a251f5d81d6df83a72731e.png"}}]);