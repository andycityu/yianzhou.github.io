"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4112],{81594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>o});var l=t(87462),a=(t(67294),t(3905));t(61839);const d={},s="\u94fe\u8868\u548c\u56fe",i={unversionedId:"leetcode/leetcode3",id:"leetcode/leetcode3",title:"\u94fe\u8868\u548c\u56fe",description:"\u94fe\u8868",source:"@site/docs/dev/leetcode/leetcode3.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode3",permalink:"/docs/dev/leetcode/leetcode3",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u52a8\u6001\u89c4\u5212",permalink:"/docs/dev/leetcode/leetcode2"},next:{title:"\u6392\u5e8f\u3001\u67e5\u627e",permalink:"/docs/dev/leetcode/leetcode4"}},r={},o=[{value:"\u94fe\u8868",id:"\u94fe\u8868",level:2},{value:"2-\u4e24\u6570\u76f8\u52a0",id:"2-\u4e24\u6570\u76f8\u52a0",level:3},{value:"19-\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u8282\u70b9",id:"19-\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u8282\u70b9",level:3},{value:"21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",id:"21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",level:3},{value:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u8282\u70b9",id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u8282\u70b9",level:3},{value:"141-\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af",id:"141-\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af",level:3},{value:"206-\u53cd\u8f6c\u94fe\u8868",id:"206-\u53cd\u8f6c\u94fe\u8868",level:3},{value:"83-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20",id:"83-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20",level:3},{value:"82-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II",id:"82-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20-ii",level:3},{value:"\u56fe",id:"\u56fe",level:2},{value:"207-\u8bfe\u7a0b\u8868\u3001210-\u8bfe\u7a0b\u8868 II\uff08\u62d3\u6251\u6392\u5e8f\uff09",id:"207-\u8bfe\u7a0b\u8868210-\u8bfe\u7a0b\u8868-ii\u62d3\u6251\u6392\u5e8f",level:3}],u={toc:o};function c(e){let{components:n,...d}=e;return(0,a.kt)("wrapper",(0,l.Z)({},u,d,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u94fe\u8868\u548c\u56fe"},"\u94fe\u8868\u548c\u56fe"),(0,a.kt)("h2",{id:"\u94fe\u8868"},"\u94fe\u8868"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"struct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n")),(0,a.kt)("h3",{id:"2-\u4e24\u6570\u76f8\u52a0"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/add-two-numbers/"},"2-\u4e24\u6570\u76f8\u52a0")),(0,a.kt)("p",null,"\u8003\u5bdf\u94fe\u8868\u57fa\u672c\u7684\u904d\u5386\u64cd\u4f5c\uff0c\u5934\u90e8\u6307\u9488\u7684\u5b58\u50a8\uff08dummy\uff09\uff0c\u8fdb\u4f4d\u7684\u6280\u5de7\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *dummy = new ListNode(0);\n        ListNode *head = dummy;\n        int carry = 0;\n        while (l1 || l2 || carry) {\n            if (l1) {\n                carry += l1->val;\n                l1 = l1->next;\n            }\n            if (l2) {\n                carry += l2->val;\n                l2 = l2->next;\n            }\n            head->next = new ListNode(carry % 10);\n            head = head->next;\n            carry = carry >= 10 ? 1 : 0;\n        }\n        head = dummy->next;\n        delete dummy;\n        return head;\n    }\n};\n")),(0,a.kt)("h3",{id:"19-\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u8282\u70b9"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/"},"19-\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u8282\u70b9")),(0,a.kt)("p",null,"\u62ff\u5230\u94fe\u8868\u9898\u76ee\uff0c\u5148\u770b\u5934\u8282\u70b9\u662f\u5426\u53ef\u80fd\u88ab\u64cd\u4f5c\uff0c\u662f\u7684\u8bdd\u5219\u9700\u8981\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"dummy.next = head")," \u8bb0\u5f55\u5934\u90e8\uff0c\u6700\u540e\u7528\u4e8e\u8fd4\u56de\u7ed3\u679c\u3002"),(0,a.kt)("p",null,"\u672c\u9898\u6bd4\u8f83\u6709\u6280\u5de7\u7684\u4e00\u6b21\u8fc7\u904d\u5386\u65b9\u6cd5\u662f\uff0c\u7528\u540c\u5411\u53cc\u6307\u9488\u3001\u4e00\u5feb\u4e00\u6162\uff0c\u7531\u4e8e\u6211\u4eec\u9700\u8981\u627e\u5230\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528 lo \u548c hi \u4e24\u4e2a\u6307\u9488\uff0chi \u6bd4 lo \u8d85\u524d n \u4e2a\u8282\u70b9\uff0c\u7136\u540e\u540c\u65f6\u5f00\u59cb\u904d\u5386\uff0c\u5f53 hi \u5230\u8fbe\u94fe\u8868\u672b\u5c3e\u65f6\uff0clo \u6070\u597d\u5c31\u5904\u4e8e\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode *dummy = new ListNode(0);\n        dummy->next = head;\n        ListNode *quick = head;\n        ListNode *slow = dummy;\n        for (int i = 0; i < n; ++i) {\n            quick = quick->next;\n        }\n        while (quick) {\n            quick = quick->next;\n            slow = slow->next;\n        }\n        slow->next = slow->next->next;\n        head = dummy->next;\n        delete dummy;\n        return head;\n    }\n};\n")),(0,a.kt)("h3",{id:"21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/"},"21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868")),(0,a.kt)("p",null,"\u94fe\u8868\u57fa\u672c\u64cd\u4f5c\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode *dummy = new ListNode(0);\n        ListNode *head = dummy;\n        while (l1 || l2) {\n            if ((l1 && l2 && l1->val < l2->val) || (l1 && !l2)) {\n                head->next = l1;\n                l1 = l1->next;\n            } else {\n                head->next = l2;\n                l2 = l2->next;\n            }\n            head = head->next;\n        }\n        head = dummy->next;\n        delete dummy;\n        return head;\n    }\n};\n")),(0,a.kt)("p",null,"\u9012\u5f52\u5199\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n        if (l1->val < l2->val) {\n            l1->next = mergeTwoLists(l1->next, l2);\n            return l1;\n        } else {\n            l2->next = mergeTwoLists(l1, l2->next);\n            return l2;\n        }\n    }\n};\n")),(0,a.kt)("h3",{id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u8282\u70b9"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/"},"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u8282\u70b9")),(0,a.kt)("p",null,"\u94fe\u8868\u8282\u70b9\u4ea4\u6362\u7684\u57fa\u672c\u64cd\u4f5c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (!head || !head->next) {\n            return head;\n        }\n        ListNode *tmp = head->next;\n        head->next = swapPairs(tmp->next);\n        tmp->next = head;\n        return tmp;\n    }\n};\n")),(0,a.kt)("h3",{id:"141-\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/linked-list-cycle/"},"141-\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af")),(0,a.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002"),(0,a.kt)("p",null,"\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u662f\u7528\u54c8\u5e0c\u8868\u6216\u54c8\u5e0c\u96c6\u5408\u5b58\u50a8\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u5f53\u518d\u6b21\u8bbf\u95ee\u5230\u65f6\uff0c\u8bf4\u660e\u6709\u73af\uff0c\u9700\u8981 O(N) \u7684\u7a7a\u95f4\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        unordered_set<ListNode *> set;\n        while (head) {\n            if (set.count(head) > 0)\n                return true;\n            set.insert(head);\n            head = head->next;\n        }\n        return false;\n    }\n};\n")),(0,a.kt)("p",null,"\u6bd4\u8f83\u6709\u6280\u5de7\u7684\u662f\u5feb\u3001\u6162\u6307\u9488\uff0c\u5982\u679c\u5217\u8868\u4e0d\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u5feb\u6307\u9488\u5c31\u5148\u5230\u8fbe\u4e86\u7ec8\u70b9\uff1b\u53cd\u4e4b\uff0c\u5feb\u3001\u6162\u6307\u9488\u4f1a\u5728\u73af\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u76f8\u9047\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow = head;\n        ListNode *quick = head;\n        while (quick && quick->next) {\n            slow = slow->next;\n            quick = quick->next->next;\n            if (slow == quick) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n")),(0,a.kt)("h3",{id:"206-\u53cd\u8f6c\u94fe\u8868"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-linked-list/"},"206-\u53cd\u8f6c\u94fe\u8868")),(0,a.kt)("p",null,"\u8fed\u4ee3\u7248\u672c\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode *pre = nullptr;\n        ListNode *cur = head;\n        while (cur) {\n            ListNode *tmp = cur->next;\n            cur->next = pre;\n            pre = cur;\n            cur = tmp;\n        }\n        return pre;\n    }\n};\n")),(0,a.kt)("p",null,"\u9012\u5f52\u7248\u672c\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (!head || !head->next) {\n            return head;\n        }\n        ListNode *newHead = reverseList(head->next);\n        head->next->next = head;\n        head->next = nullptr;\n        return newHead;\n    }\n};\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"img-40",src:t(40847).Z,width:"1082",height:"242"})),(0,a.kt)("h3",{id:"83-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/"},"83-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        if not head:\n            return None\n        a = head\n        b = head.next\n        while b:\n            if a.val != b.val:\n                a = a.next\n                b = b.next\n            else:\n                while b.next and a.val == b.next.val:\n                    b = b.next\n                a.next = b.next\n                b = b.next\n        return head\n")),(0,a.kt)("h3",{id:"82-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20-ii"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/"},"82-\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II")),(0,a.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u51fa\u73b0\u7684\u6570\u5b57\u3002"),(0,a.kt)("p",null,"\u62ff\u5230\u94fe\u8868\u9898\u76ee\uff0c\u5148\u770b\u5934\u8282\u70b9\u662f\u5426\u88ab\u64cd\u4f5c\uff0c\u662f\u7684\u8bdd\u5219\u9700\u8981\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"dummy.next = head")," \u8bb0\u5f55\u5934\u90e8\uff0c\u6700\u540e\u7528\u4e8e\u8fd4\u56de\u7ed3\u679c\u3002"),(0,a.kt)("p",null,"\u8003\u8651\u5230 1->1->1->2->3->4->NULL \u8fd9\u79cd\u8fb9\u754c\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u5934\u90e8\u8282\u70b9\u8981\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u672c\u9898\u663e\u7136\u662f\u9700\u8981 dummy \u6307\u9488\u7684\u3002"),(0,a.kt)("p",null,"\u5148\u8bb2\u601d\u8def\uff0c\u6211\u4eec\u7528\u4e00\u524d\u4e00\u540e\u4e24\u4e2a\u6307\u9488 a\u3001b\uff0c\u5982\u679c\u8282\u70b9 a \u7684\u503c\u4e0d\u7b49\u4e8e\u8282\u70b9 b \u7684\u503c\uff0c\u90a3\u4e48\u6307\u9488 a\u3001b \u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\u3002"),(0,a.kt)("p",null,"\u53cd\u4e4b\uff0ca \u4e0d\u52a8\u3001b \u5411\u524d\u79fb\u52a8\uff0c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u4e0e\u8282\u70b9 a \u4e0d\u76f8\u7b49\u7684\u503c\uff0c\u4e2d\u95f4\u91cd\u590d\u7684\u8282\u70b9\u5168\u90e8\u820d\u5f03\uff0c\u7136\u540e\u7528 next \u6307\u9488\u8fde\u63a5\u8d77\u6765\u5373\u53ef\uff01"),(0,a.kt)("p",null,"\u8003\u8651\u5230\u4e0a\u9762\u6240\u8bf4\u7684\u8fb9\u754c\u60c5\u51b5\uff0c\u6b64\u9898\u6211\u4eec\u4ee4 a = dummy\uff0cb = head\uff0c\u4e0d\u76f4\u63a5\u6bd4\u8f83 a.val == b.val\uff0c\u800c\u662f\u6bd4\u8f83 a.next.val \u548c b.next.val\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        dummy = ListNode(0)\n        dummy.next = head\n        a = dummy\n        b = dummy.next\n        while b and b.next:\n            if a.next.val != b.next.val:\n                a = a.next\n                b = b.next\n            else:\n                while b and b.next and a.next.val == b.next.val:\n                    b = b.next\n                a.next = b.next\n                b = b.next\n        return dummy.next\n")),(0,a.kt)("h2",{id:"\u56fe"},"\u56fe"),(0,a.kt)("h3",{id:"207-\u8bfe\u7a0b\u8868210-\u8bfe\u7a0b\u8868-ii\u62d3\u6251\u6392\u5e8f"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/course-schedule/"},"207-\u8bfe\u7a0b\u8868"),"\u3001",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/course-schedule-ii/"},"210-\u8bfe\u7a0b\u8868 II"),"\uff08\u62d3\u6251\u6392\u5e8f\uff09"),(0,a.kt)("p",null,"\u4f60\u8fd9\u4e2a\u5b66\u671f\u5fc5\u987b\u9009\u4fee n \u95e8\u8bfe\u7a0b\uff0c\u8bb0\u4e3a 0 \u5230 n-1\u3002\u5728\u9009\u4fee 5 \u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u5148\u4fee 3 \u8bfe\u7a0b\uff0c\u5219\u7528 ","[5, 3]"," \u6570\u7ec4\u6765\u8868\u793a\u8fd9\u6837\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u6c42\u53ef\u4ee5\u5b66\u5b8c\u8bfe\u7a0b\u7684\u987a\u5e8f\u3002\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u987a\u5e8f\uff0c\u53ea\u9700\u8981\u8fd4\u56de\u5176\u4e2d\u4e00\u79cd\uff1b\u5982\u679c\u65e0\u6cd5\u5b8c\u6210\u5b66\u4e60\uff0c\u8fd4\u56de\u7a7a\u6570\u7ec4\u3002"),(0,a.kt)("p",null,"\u5bf9\u4e8e\u6709\u4f18\u5148\u7ea7\u6b21\u5e8f\u7ea6\u675f\u7684\u8c03\u5ea6\u95ee\u9898\uff0c\u5176\u8ba1\u7b97\u673a\u6a21\u578b\u662f\u6709\u5411\u56fe\u7684\u62d3\u6251\u6392\u5e8f\uff0c\u5373\u5c06\u6709\u5411\u56fe\u7684\u9876\u70b9\u6309\u7167\u4ee5\u4e0b\u7684\u987a\u5e8f\u6392\u5e8f\uff1a\u56fe\u4e2d\u6240\u6709\u6709\u5411\u8fb9\uff0c\u4ece\u5e8f\u5217\u4e2d\u8f83\u524d\u7684\u9876\u70b9\u6307\u5411\u5e8f\u5217\u4e2d\u8f83\u540e\u7684\u9876\u70b9\u3002\u62d3\u6251\u6392\u5e8f\u53ef\u80fd\u6ca1\u6709\uff0c\u4e5f\u53ef\u80fd\u4e0d\u6b62\u4e00\u79cd\u3002\u4e00\u4e2a\u6709\u5411\u56fe\u5b58\u5728\u62d3\u6251\u6392\u5e8f\u5f53\u4e14\u4ec5\u5f53\u5b83\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002"),(0,a.kt)("p",null,"\u6c42\u51fa\u4e00\u79cd\u62d3\u6251\u6392\u5e8f\u65b9\u6cd5\u7684\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n+m)\uff0c\u5176\u4e2d n \u548c m \u5206\u522b\u662f\u6709\u5411\u56fe G \u7684\u8282\u70b9\u6570\u548c\u8fb9\u6570\u3002"),(0,a.kt)("p",null,"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff1a\u6784\u5efa\u90bb\u63a5\u8868\u65f6\u7ef4\u62a4\u5165\u5ea6\u4fe1\u606f\u3002\u5728\u62d3\u6251\u6392\u5e8f\u4e2d\uff0c\u6700\u524d\u9762\u7684\u8282\u70b9\u5165\u5ea6\u4e00\u5b9a\u4e3a 0\uff0c\u4e5f\u5c31\u662f\u5b83\u6ca1\u6709\u5148\u4fee\u8bfe\u7a0b\u8981\u6c42\u3002\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u8282\u70b9\u52a0\u5165\u7b54\u6848\u4e2d\u540e\uff0c\u5b83\u76f8\u90bb\u8282\u70b9\u7684\u5165\u5ea6\u5747\u51cf\u4e00\uff0c\u4ee3\u8868\u5c11\u4e86\u4e00\u95e8\u5148\u4fee\u8bfe\u7a0b\u7684\u8981\u6c42\u3002\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u5165\u5ea6\u53d8\u4e3a 0\uff0c\u4ee3\u8868\u5b83\u53ef\u4ee5\u5f00\u59cb\u5b66\u4e60\u3002\u5c31\u8fd9\u6837\uff0c\u4e0d\u65ad\u628a\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u52a0\u5165\u7b54\u6848\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<vector<int>> adjacency(numCourses); // \u90bb\u63a5\u8868\n        vector<int> inDegrees(numCourses); // \u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\n        for (const vector<int> &vec : prerequisites) {\n            adjacency[vec[1]].push_back(vec[0]);\n            inDegrees[vec[0]] += 1;\n        }\n        vector<int> res; // \u5b58\u50a8\u7ed3\u679c\n        queue<int> q; // \u961f\u5217\u4e2d\u7684\u8bfe\u7a0b\u7b49\u5f85\u88ab\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        for (int i = 0; i < numCourses; ++i) {\n            if (inDegrees[i] == 0)\n                q.push(i); // \u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u5148\u5165\u5217\n        }\n        while (!q.empty()) {\n            int course = q.front();\n            q.pop();\n            res.push_back(course);\n            for (int i : adjacency[course]) {\n                inDegrees[i] -= 1;\n                if (inDegrees[i] == 0) {\n                    q.push(i);\n                }\n            }\n        }\n        return res.size() == numCourses ? res : vector<int>();\n    }\n};\n")))}c.isMDXComponent=!0},40847:(e,n,t)=>{t.d(n,{Z:()=>l});const l=t.p+"assets/images/9580b5d4-a5a1-4760-a362-d1c0ac31d228-ea042f9a065dab9cda16b40b0e3feb2d.png"}}]);