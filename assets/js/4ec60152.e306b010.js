"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3348],{79438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));n(61839);const l={},s="FlutterEngine",o={unversionedId:"\u6e90\u7801/flutter-engine",id:"\u6e90\u7801/flutter-engine",title:"FlutterEngine",description:"\u4ee3\u7801\u89e3\u91ca",source:"@site/docs/flutter/\u6e90\u7801/flutter-engine.md",sourceDirName:"\u6e90\u7801",slug:"/\u6e90\u7801/flutter-engine",permalink:"/docs/flutter/\u6e90\u7801/flutter-engine",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FlutterChannels",permalink:"/docs/flutter/\u6e90\u7801/flutter-channel"},next:{title:"PlatformView",permalink:"/docs/flutter/\u6e90\u7801/flutter-platformview"}},i={},u=[{value:"\u4ee3\u7801\u89e3\u91ca",id:"\u4ee3\u7801\u89e3\u91ca",level:2},{value:"fml",id:"fml",level:2},{value:"fml::WeakPtrFactory",id:"fmlweakptrfactory",level:2},{value:"\u542f\u52a8\u6d41\u7a0b",id:"\u542f\u52a8\u6d41\u7a0b",level:2},{value:"\u5f15\u64ce\u521d\u59cb\u5316",id:"\u5f15\u64ce\u521d\u59cb\u5316",level:3},{value:"\u5f15\u64ce\u8fd0\u884c",id:"\u5f15\u64ce\u8fd0\u884c",level:3},{value:"\u63d2\u4ef6\u6ce8\u518c",id:"\u63d2\u4ef6\u6ce8\u518c",level:3},{value:"Channel \u6ce8\u518c",id:"channel-\u6ce8\u518c",level:3},{value:"\u91ca\u653e\u6d41\u7a0b",id:"\u91ca\u653e\u6d41\u7a0b",level:2},{value:"FlutterDartProject",id:"flutterdartproject",level:2},{value:"FlutterPlatformView",id:"flutterplatformview",level:2},{value:"ThreadHost, Thread, MessageLoop, TaskRunner",id:"threadhost-thread-messageloop-taskrunner",level:2},{value:"Shell",id:"shell",level:2},{value:"TaskRunner",id:"taskrunner",level:2},{value:"DartSnapshot",id:"dartsnapshot",level:2}],p={toc:u};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flutterengine"},"FlutterEngine"),(0,r.kt)("h2",{id:"\u4ee3\u7801\u89e3\u91ca"},"\u4ee3\u7801\u89e3\u91ca"),(0,r.kt)("p",null,"prompt:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"`` \u5728 Flutter iOS \u4e2d\u662f\u505a\u4ec0\u4e48\u7528\u7684\uff1f\u8bf7\u8be6\u7ec6\u63cf\u8ff0\u4e00\u4e0b\u5b83\u7684\u4f5c\u7528\u548c\u6280\u672f\u7ec6\u8282\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u4ee5\u4e0b\u662f\u4e00\u6bb5\u4ee3\u7801\u6ce8\u91ca\uff0c\u8bf7\u53bb\u6389\u5176\u4e2d\u7684\u6ce8\u91ca\u7b26\u53f7\uff0c\u4e0d\u7528\u52a0\u4ee5\u89e3\u91ca\uff0c\u76f4\u63a5\u8fd4\u56de\u82f1\u8bed\u539f\u6587\u7ed9\u6211\uff1a``"),(0,r.kt)("li",{parentName:"ul"},"\u4ee5\u4e0b\u662f\u4e00\u6bb5 Flutter \u6846\u67b6\u7684\u6e90\u4ee3\u7801\uff0c\u8bf7\u5c1d\u8bd5\u89e3\u91ca\u5176\u4e2d\u6bcf\u4e00\u884c\u4ee3\u7801\u7684\u610f\u601d\uff0c\u5c3d\u53ef\u80fd\u63d0\u4f9b\u591a\u4e00\u4e9b\u6280\u672f\u7ec6\u8282\uff1a``")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"ICU")," (International Components for Unicode) data files are a set of files that provide support for internationalization and localization in software applications. In the context of Flutter, the ICU data files are used to support features like formatting of dates, times, currencies, and pluralization rules in multiple languages. (",(0,r.kt)("inlineCode",{parentName:"p"},"Flutter.framework/icudtl.dat"),")"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Dart Precompiled Runtime")," is a binary file that includes the Dart Virtual Machine and a precompiled snapshot of a Dart application or library. It enables the distribution of Dart applications as standalone binaries that can be run on the target platform without the need for the Dart SDK to be installed."),(0,r.kt)("p",null,"In programming, a ",(0,r.kt)("strong",{parentName:"p"},"blob")," (short for ",(0,r.kt)("strong",{parentName:"p"},"Binary Large OBject"),") is a collection of binary data, typically stored in a database or file system. (",(0,r.kt)("inlineCode",{parentName:"p"},"App.framework/kernel_blob.bin"),")"),(0,r.kt)("h2",{id:"fml"},"fml"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"namespace fml"),': In the Flutter framework, the "fml" namespace refers to the ',(0,r.kt)("strong",{parentName:"p"},"Flutter Markup Language"),". FML is a declarative language for building Flutter UIs that is similar to HTML and XML. It is used to define the structure and layout of UI elements in a Flutter app."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fml::scoped_nsobject")," \u4f7f\u5f97\u5728 Objective-C \u73af\u5883\u4e2d\u53ef\u4ee5\u65b9\u4fbf\u5730\u7ba1\u7406 ",(0,r.kt)("inlineCode",{parentName:"p"},"NSObject")," \u5b50\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u800c\u4e0d\u9700\u8981\u624b\u52a8\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"retain")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"release")," \u65b9\u6cd5\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fml::RefPtr"),"\uff08\u5f15\u7528\u8ba1\u6570\u6307\u9488\uff09\u662f\u4e00\u79cd\u7c7b\u6a21\u677f\uff0c\u7528\u4e8e\u5b9e\u73b0\u5bf9\u7279\u5b9a\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u3002"),(0,r.kt)("h2",{id:"fmlweakptrfactory"},"fml::WeakPtrFactory"),(0,r.kt)("p",null,"\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u6b63\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u5bf9\u8c61\uff0c\u800c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u5728\u540c\u4e00\u65f6\u95f4\u9500\u6bc1\u6b64\u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u6307\u9488\u53ef\u80fd\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u548c\u7a0b\u5e8f\u5d29\u6e83\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"WeakPtrFactory")," \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u521b\u5efa\u5728\u5bf9\u8c61\u9500\u6bc1\u540e\u81ea\u52a8\u65e0\u6548\u5316\u7684\u5f31\u6307\u9488\u3002\u5f53\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\uff0c\u4f7f\u7528\u8fd9\u4e9b\u5f31\u6307\u9488\u7684\u7ebf\u7a0b\u4f1a\u6ce8\u610f\u5230\u6307\u9488\u65e0\u6548\uff0c\u5e76\u907f\u514d\u5bf9\u8be5\u5bf9\u8c61\u6267\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"WeakPtrFactory")," \u7684\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5728\u5806\u4e0a\u5206\u914d\u7684\u7c7b\uff08\u5982 ",(0,r.kt)("inlineCode",{parentName:"li"},"FlutterEngine"),"\uff09\u4e2d\uff0c\u6dfb\u52a0\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"li"},"WeakPtrFactory")," \u6210\u5458\u53d8\u91cf\uff1a")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"std::unique_ptr<fml::WeakPtrFactory<FlutterEngine>> _weakFactory;")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"\u521d\u59cb\u5316\uff1a")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"_weakFactory = std::make_unique<fml::WeakPtrFactory<FlutterEngine>>(self);")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"\u5728\u5176\u4ed6\u7ebf\u7a0b\u4f7f\u7528\u5f31\u6307\u9488\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"-[FlutterEngine getWeakPtr]\n\n- (fml::WeakPtr<FlutterEngine>)getWeakPtr {\n  return _weakFactory->GetWeakPtr();\n}\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"\u5728\u6790\u6784\u51fd\u6570\u4e2d\uff0c\u5728\u9500\u6bc1\u6216\u91ca\u653e\u5176\u4ed6\u4efb\u4f55\u6210\u5458\u4e4b\u524d\uff0c\u91ca\u653e ",(0,r.kt)("inlineCode",{parentName:"li"},"_weakFactory")," \u4ece\u800c\u4f7f\u6240\u6709\u5f31\u6307\u9488\u65e0\u6548\uff1a")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"_weakFactory.reset();")),(0,r.kt)("h2",{id:"\u542f\u52a8\u6d41\u7a0b"},"\u542f\u52a8\u6d41\u7a0b"),(0,r.kt)("h3",{id:"\u5f15\u64ce\u521d\u59cb\u5316"},"\u5f15\u64ce\u521d\u59cb\u5316"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"-[FlutterEngine initWithName:project:allowHeadlessExecution:restorationEnabled:]")),(0,r.kt)("p",null,"The FlutterEngine class coordinates a single instance of execution for a ",(0,r.kt)("a",{parentName:"p",href:"#flutterdartproject"},(0,r.kt)("inlineCode",{parentName:"a"},"FlutterDartProject")),".\uff08\u8fd9\u91cc\u6709\u4e00\u63fd\u5b50\u9879\u76ee\u914d\u7f6e\uff09"),(0,r.kt)("p",null,"A FlutterEngine can be created independently of a ",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterViewController")," for headless execution. It can also persist across the lifespan of multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterViewController")," instances to maintain state and/or asynchronous tasks (such as downloading a large file)."),(0,r.kt)("p",null,"A newly initialized FlutterEngine will not actually run a Dart Isolate until either ",(0,r.kt)("inlineCode",{parentName:"p"},"-runWithEntrypoint:")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-runWithEntrypoint:libraryURI")," is invoked. One of these methods must be invoked before calling ",(0,r.kt)("inlineCode",{parentName:"p"},"-setViewController:"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#define TRACING_CHECKS_NECESSARY        \\\n  FML_OS_IOS && !TARGET_OS_SIMULATOR && \\\n      (FLUTTER_RUNTIME_MODE == FLUTTER_RUNTIME_MODE_DEBUG)\n\n- (instancetype)initWithName:(NSString*)labelPrefix\n                     project:(FlutterDartProject*)project\n      allowHeadlessExecution:(BOOL)allowHeadlessExecution\n          restorationEnabled:(BOOL)restorationEnabled {\n  // \u89c1WeakPtrFactory\u89e3\u91ca\n  _weakFactory = std::make_unique<fml::WeakPtrFactory<FlutterEngine>>(self);\n\n  if (project == nil) {\n    _dartProject.reset([[FlutterDartProject alloc] init]);\n  }\n\n  // If tracing is required but cannot be enabled, subsequent attempts to launch the VM in JIT mode will cause process termination.\uff08\u4ece\u684c\u9762\u8fdb\u5165\u4f1a\u76f4\u63a5\u9000\u51fa\uff09\n  if (!EnableTracingIfNecessary([_dartProject.get() settings])) {\n    NSLog(\n        @"Cannot create a FlutterEngine instance in debug mode without Flutter tooling or "\n        @"Xcode.\\n\\nTo launch in debug mode in iOS 14+, run flutter run from Flutter tools, run "\n        @"from an IDE with a Flutter IDE plugin or run the iOS project from Xcode.\\nAlternatively "\n        @"profile and release mode apps can be launched from the home screen.");\n    [self release];\n    return nil;\n  }\n\n  [self recreatePlatformViewController];\n\n  _binaryMessenger = [[FlutterBinaryMessengerRelay alloc] initWithParent:self];\n  _connections.reset(new flutter::ConnectionCollection());\n\n  return self;\n}\n\n- (void)recreatePlatformViewController {\n  // \u6a21\u62df\u5668\uff1akSoftware,\n  // \u8001\u673a\u5668\uff1akOpenGLES,\n  // \u65b0\u673a\u5668\uff1akMetal,\n  _renderingApi = flutter::GetRenderingAPIForProcess(FlutterView.forceSoftwareRendering);\n  _platformViewsController.reset(new flutter::FlutterPlatformViewsController());\n}\n')),(0,r.kt)("p",null,"\u68c0\u67e5\u662f\u5426\u7531 Xcode \u8fd0\u884c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='ptrace_check.cc'",title:"'ptrace_check.cc'"},"IsLaunchedByXcode()\n")),(0,r.kt)("h3",{id:"\u5f15\u64ce\u8fd0\u884c"},"\u5f15\u64ce\u8fd0\u884c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='FlutterEngine.mm'",title:"'FlutterEngine.mm'"},"- (BOOL)runWithEntrypoint:(NSString*)entrypoint\n               libraryURI:(NSString*)libraryURI\n             initialRoute:(NSString*)initialRoute\n           entrypointArgs:(NSArray<NSString*>*)entrypointArgs {\n  if ([self createShell:entrypoint libraryURI:libraryURI initialRoute:initialRoute]) {\n    [self launchEngine:entrypoint libraryURI:libraryURI entrypointArgs:entrypointArgs];\n  }\n  return _shell != nullptr;\n}\n\n- (BOOL)createShell:(NSString*)entrypoint\n         libraryURI:(NSString*)libraryURI\n       initialRoute:(NSString*)initialRoute {\n  // \u8bbe\u7f6eentrypoint\n  auto settings = [_dartProject.get() settings];\n  SetEntryPoint(&settings, entrypoint, libraryURI);\n\n  // \u521b\u5efa\u7ebf\u7a0b\n  NSString* threadLabel = [FlutterEngine generateThreadLabel:_labelPrefix];\n  _threadHost = std::make_shared<flutter::ThreadHost>();\n  *_threadHost = [FlutterEngine makeThreadHost:threadLabel];\n\n  // \u7b49Shell\u521b\u5efa\u597d\u4e4b\u540e\uff0c\u8c03\u7528\u6b64\u51fd\u6570\u4ee5\u521b\u5efaPlatformViewIOS\n  flutter::Shell::CreateCallback<flutter::PlatformView> on_create_platform_view =\n      [self](flutter::Shell& shell) {\n        [self recreatePlatformViewController];\n        return std::make_unique<flutter::PlatformViewIOS>(\n            shell, self->_renderingApi, self->_platformViewsController, shell.GetTaskRunners());\n      };\n\n  // \u5e73\u53f0\u8d1f\u8d23\u63d0\u4f9b task_runners \u7ed9 Shell\n  flutter::TaskRunners task_runners(threadLabel.UTF8String,                          // label\n                                    fml::MessageLoop::GetCurrent().GetTaskRunner(),  // platform\n                                    _threadHost->raster_thread->GetTaskRunner(),     // raster\n                                    _threadHost->ui_thread->GetTaskRunner(),         // ui\n                                    _threadHost->io_thread->GetTaskRunner()          // io\n  );\n\n  // Create the shell. This is a blocking operation.\n  std::unique_ptr<flutter::Shell> shell = flutter::Shell::Create(\n      /*platform_data=*/std::move(platformData),\n      /*task_runners=*/std::move(task_runners),\n      /*settings=*/std::move(settings),\n      /*on_create_platform_view=*/on_create_platform_view,\n      /*on_create_rasterizer=*/on_create_rasterizer,\n      /*is_gpu_disabled=*/_isGpuDisabled);\n\n  [self setupShell:std::move(shell) withObservatoryPublication:settings.enable_observatory_publication];\n\n  return _shell != nullptr;\n}\n\n+ (flutter::ThreadHost)makeThreadHost:(NSString*)threadLabel {\n  // The current thread will be used as the platform thread. Ensure that the message loop is\n  // initialized.\n  fml::MessageLoop::EnsureInitializedForCurrentThread();\n\n  uint32_t threadHostType = flutter::ThreadHost::Type::UI | flutter::ThreadHost::Type::RASTER |\n                            flutter::ThreadHost::Type::IO;\n\n  // ThreadHostConfig\u5c31\u662f\u4e00\u7ec4ThreadConfig\u7684\u96c6\u5408\n  flutter::ThreadHost::ThreadHostConfig host_config(threadLabel.UTF8String, threadHostType,\n                                                    IOSPlatformThreadConfigSetter);\n\n  // ThreadConfig\u5c31\u662fThreadName+ThreadPriority\n  host_config.ui_config =\n      fml::Thread::ThreadConfig(flutter::ThreadHost::ThreadHostConfig::MakeThreadName(\n                                    flutter::ThreadHost::Type::UI, threadLabel.UTF8String),\n                                fml::Thread::ThreadPriority::DISPLAY);\n  host_config.raster_config =\n      fml::Thread::ThreadConfig(flutter::ThreadHost::ThreadHostConfig::MakeThreadName(\n                                    flutter::ThreadHost::Type::RASTER, threadLabel.UTF8String),\n                                fml::Thread::ThreadPriority::RASTER);\n  host_config.io_config =\n      fml::Thread::ThreadConfig(flutter::ThreadHost::ThreadHostConfig::MakeThreadName(\n                                    flutter::ThreadHost::Type::IO, threadLabel.UTF8String),\n                                fml::Thread::ThreadPriority::NORMAL);\n\n  return (flutter::ThreadHost){host_config}; // \u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u4f20\u5165host_config\n}\n\n- (void)setupShell:(std::unique_ptr<flutter::Shell>)shell\n    withObservatoryPublication:(BOOL)doesObservatoryPublication {\n  _shell = std::move(shell);\n  [self setupChannels];\n  [self onLocaleUpdated:nil];\n  [self initializeDisplays];\n  _publisher.reset([[FlutterObservatoryPublisher alloc]\n      initWithEnableObservatoryPublication:doesObservatoryPublication]);\n  [self maybeSetupPlatformViewChannels];\n  _shell->SetGpuAvailability(_isGpuDisabled ? flutter::GpuAvailability::kUnavailable\n                                            : flutter::GpuAvailability::kAvailable);\n}\n\n- (void)initializeDisplays {\n  auto vsync_waiter = std::shared_ptr<flutter::VsyncWaiter>(_shell->GetVsyncWaiter().lock());\n  auto vsync_waiter_ios = std::static_pointer_cast<flutter::VsyncWaiterIOS>(vsync_waiter);\n  std::vector<std::unique_ptr<flutter::Display>> displays;\n  displays.push_back(std::make_unique<flutter::VariableRefreshRateDisplay>(vsync_waiter_ios));\n  _shell->OnDisplayUpdates(flutter::DisplayUpdateType::kStartup, std::move(displays));\n}\n\n- (void)launchEngine:(NSString*)entrypoint\n          libraryURI:(NSString*)libraryOrNil\n      entrypointArgs:(NSArray<NSString*>*)entrypointArgs {\n  // Launch the Dart application with the inferred run configuration.\n  self.shell.RunEngine([_dartProject.get() runConfigurationForEntrypoint:entrypoint\n                                                            libraryOrNil:libraryOrNil\n                                                          entrypointArgs:entrypointArgs]);\n}\n")),(0,r.kt)("h3",{id:"\u63d2\u4ef6\u6ce8\u518c"},"\u63d2\u4ef6\u6ce8\u518c"),(0,r.kt)("p",null,"\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"+[GeneratedPluginRegistrant registerWithRegistry:]"),"\uff0c\u8fd9\u91cc\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"registry")," \u5c31\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterEngine"),"\u3002"),(0,r.kt)("h3",{id:"channel-\u6ce8\u518c"},"Channel \u6ce8\u518c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objc"},"FlutterMethodChannel *flutterMethodChannel = [FlutterMethodChannel methodChannelWithName:channelName binaryMessenger:engine.binaryMessenger];\n[flutterMethodChannel setMethodCallHandler:methodCallHandler];\n\nFlutterEventChannel *flutterEventChannel = [FlutterEventChannel eventChannelWithName:channelName binaryMessenger:engine.binaryMessenger];\n[flutterEventChannel setStreamHandler:streamHandler];\n")),(0,r.kt)("h2",{id:"\u91ca\u653e\u6d41\u7a0b"},"\u91ca\u653e\u6d41\u7a0b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/shell/platform/darwin/ios/framework/Source/FlutterEngine.mm'",title:"'flutter/shell/platform/darwin/ios/framework/Source/FlutterEngine.mm'"},"- (void)destroyContext {\n  [self resetChannels];\n  self.isolateId = nil;\n  _shell.reset();\n  _profiler.reset();\n  _threadHost.reset();\n  _platformViewsController.reset();\n}\n")),(0,r.kt)("h2",{id:"flutterdartproject"},"FlutterDartProject"),(0,r.kt)("p",null,"A set of Flutter and Dart assets used by a ",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterEngine")," to initialize execution."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},'The engine will execute the project located in the bundle with the identifier "io.flutter.flutter.app"'),"."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterDartProject")," is not specified, the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterEngine")," will attempt to locate the project in a default location (the flutter_assets folder in the iOS application bundle)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'- (instancetype)initWithPrecompiledDartBundle:(nullable NSBundle*)bundle {\n  self = [super init];\n  if (self) {\n    _settings = FLTDefaultSettingsForBundle(bundle);\n  }\n  return self;\n}\n\nflutter::Settings FLTDefaultSettingsForBundle(NSBundle* bundle) {\n  auto command_line = flutter::CommandLineFromNSProcessInfo();\n  auto settings = flutter::SettingsFromCommandLine(command_line);\n\n  NSBundle* engineBundle = [NSBundle bundleForClass:[FlutterViewController class]];\n  if (settings.icu_data_path.size() == 0) {\n    NSString* icuDataPath = [engineBundle pathForResource:@"icudtl" ofType:@"dat"]; // Flutter.framework/icudtl.dat\n    settings.icu_data_path = icuDataPath.UTF8String;\n  }\n\n  if (flutter::DartVM::IsRunningPrecompiledCode()) {\n    // In case the application bundle is still not specified, look for the App.framework in the\n    // Frameworks directory.\n    if (settings.application_library_path.size() == 0) {\n      NSBundle* mainBundle = [NSBundle mainBundle];\n      NSString* applicationFrameworkPath = [mainBundle pathForResource:@"Frameworks/App.framework"\n                                                                ofType:@""];\n      if (applicationFrameworkPath.length > 0) {\n        NSString* executablePath =\n            [NSBundle bundleWithPath:applicationFrameworkPath].executablePath;\n        settings.application_library_path.push_back(executablePath.UTF8String);\n      }\n    }\n  }\n\n  // Checks to see if the flutter assets directory is already present.\n  if (settings.assets_path.size() == 0) {\n    NSString* assetsName = [FlutterDartProject flutterAssetsName:bundle]; // App.framework/flutter_assets\n    NSString* assetsPath = [bundle pathForResource:assetsName ofType:@""];\n\n    settings.assets_path = assetsPath.UTF8String;\n\n    // Check if there is an application kernel snapshot in the assets directory we could\n    // potentially use.  Looking for the snapshot makes sense only if we have a VM that can use\n    // it.\n    if (!flutter::DartVM::IsRunningPrecompiledCode()) {\n      NSURL* applicationKernelSnapshotURL =\n          [NSURL URLWithString:@(kApplicationKernelSnapshotFileName)\n                  relativeToURL:[NSURL fileURLWithPath:assetsPath]]; // kernel_blob.bin\n      settings.application_kernel_asset = applicationKernelSnapshotURL.path.UTF8String;\n    }\n  }\n\n  // SkParagraph text layout library\n  NSNumber* enableSkParagraph = [mainBundle objectForInfoDictionaryKey:@"FLTEnableSkParagraph"];\n  settings.enable_skparagraph = (enableSkParagraph != nil) ? enableSkParagraph.boolValue : true;\n\n  // Whether to enable Impeller.\n  NSNumber* enableImpeller = [mainBundle objectForInfoDictionaryKey:@"FLTEnableImpeller"];\n  if (enableImpeller != nil) {\n    settings.enable_impeller = enableImpeller.boolValue;\n  }\n\n  // Leak Dart VM settings, set whether leave or clean up the VM after the last shell shuts down.\n  NSNumber* leakDartVM = [mainBundle objectForInfoDictionaryKey:@"FLTLeakDartVM"];\n  if (leakDartVM != nil) {\n    settings.leak_vm = leakDartVM.boolValue;\n  }\n\n  // \u8001\u751f\u4ee3\u662f\u6307\u7ecf\u8fc7\u591a\u6b21GC\u540e\u4ecd\u7136\u5b58\u6d3b\u7684Widget\uff1f\u51cf\u5c0f\u8001\u751f\u4ee3\u7684\u5806\u5927\u5c0f\uff0c\u4f1a\u6709\u54ea\u4e9b\u5f71\u54cd\uff1f\n  if (settings.old_gen_heap_size <= 0) {\n    settings.old_gen_heap_size = std::round([NSProcessInfo processInfo].physicalMemory * .48 /\n                                            flutter::kMegaByteSizeInBytes);\n  }\n\n  // a setting flag that defines the maximum number of bytes that can be used by the Resource Cache, which is a mechanism for caching frequently used resources such as images, text, and other graphic assets.\n  settings.resource_cache_max_bytes_threshold = screenWidth * screenHeight * 12 * 4;\n\n  return settings;\n}\n')),(0,r.kt)("p",null,'All shells in the process share the same VM. The last shell to shutdown should typically shut down the VM as well. However, applications depend on the behavior of "warming-up" the VM by creating a shell that does not do anything. This used to work earlier when the VM could not be shut down (and hence never was). Shutting down the VM now breaks such assumptions in existing embedders. To keep this behavior consistent and allow existing embedders the chance to migrate, this flag defaults to true.'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FLTLeakDartVM"),' \u7684\u9ed8\u8ba4\u503c\u662f true \u7684\u539f\u56e0\u662f\uff0c\u5728\u8fc7\u53bb\u7684\u5b9e\u73b0\u4e2d\uff0c\u865a\u62df\u673a\uff08VM\uff09\u65e0\u6cd5\u88ab\u5173\u95ed\uff0c\u56e0\u6b64\u5b83\u4ece\u672a\u88ab\u5173\u95ed\u8fc7\u3002\u73b0\u6709\u7684 Flutter \u5e94\u7528\u53ef\u80fd\u4f9d\u8d56\u4e8e\u8fd9\u79cd\u884c\u4e3a\uff0c\u5c06 VM \u4fdd\u6301\u5728"\u9884\u70ed"\u72b6\u6001\u3002\u5982\u679c\u7a81\u7136\u66f4\u6539\u8fd9\u4e2a\u884c\u4e3a\uff0c\u53ef\u80fd\u4f1a\u7834\u574f\u8fd9\u4e9b\u5e94\u7528\u7684\u8bbe\u8ba1\u548c\u5047\u8bbe\u3002\u56e0\u6b64\uff0c\u5c06\u5176\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a true \u53ef\u4ee5\u8ba9\u73b0\u6709\u7684 Flutter \u5e94\u7528\u7ee7\u7eed\u8fd0\u884c\uff0c\u800c\u4e0d\u4f1a\u56e0\u4e3a\u7a81\u7136\u66f4\u6539\u884c\u4e3a\u800c\u4ea7\u751f\u95ee\u9898\u3002\u7136\u540e\uff0c\u5f00\u53d1\u8005\u4eec\u53ef\u4ee5\u6709\u65f6\u95f4\u8fc1\u79fb\u5230\u65b0\u7684\u5b9e\u73b0\uff0c\u5e76\u5728\u9700\u8981\u7684\u65f6\u5019\u624b\u52a8\u5173\u95ed VM\uff0c\u5f7b\u5e95\u91ca\u653e\u8d44\u6e90\u3002\u5728\u65b0\u5f00\u53d1\u7684\u5e94\u7528\u4e2d\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u66f4\u7cbe\u786e\u5730\u63a7\u5236 VM \u7684\u5173\u95ed\u548c\u8d44\u6e90\u91ca\u653e\u3002'),(0,r.kt)("h2",{id:"flutterplatformview"},"FlutterPlatformView"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='shell/platform/darwin/ios/framework/Headers/FlutterPlatformViews.h'",title:"'shell/platform/darwin/ios/framework/Headers/FlutterPlatformViews.h'"},"@protocol FlutterPlatformView <NSObject>\n- (UIView*)view;\n@end\n\n@protocol FlutterPlatformViewFactory <NSObject>\n- (NSObject<FlutterPlatformView>*)createWithFrame:(CGRect)frame\n                                   viewIdentifier:(int64_t)viewId\n                                        arguments:(id _Nullable)args;\n\n- (NSObject<FlutterMessageCodec>*)createArgsCodec;\n@end\n")),(0,r.kt)("p",null,"\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f00\u53d1\u8005\u53ef\u80fd\u9700\u8981\u5728 Flutter \u5e94\u7528\u4e2d\u4f7f\u7528",(0,r.kt)("strong",{parentName:"p"},"\u539f\u751f\u89c6\u56fe"),"\u6765\u5b9e\u73b0\u7279\u5b9a\u7684\u529f\u80fd\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterPlatformViewsController")," \u7c7b\u5c31\u662f\u4e3a\u6b64\u800c\u8bbe\u8ba1\u7684\uff0c\u5b83\u80fd\u591f\u7ec4\u5408\u5e76\u7ba1\u7406 Flutter \u6e32\u67d3\u5c42\u4e0e\u539f\u751f\u89c6\u56fe\u7684\u4ea4\u4e92\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlutterPlatformViewsController")," \u7684\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u4e00\u4e2a compositing layer \u5c06\u539f\u751f\u89c6\u56fe\u5d4c\u5165\u5230 Flutter \u7684\u573a\u666f\u4e2d\uff0c\u7136\u540e\u5229\u7528 MethodChannel \u8fdb\u884c\u901a\u4fe1\uff0c\u4ee5\u4fbf\u521b\u5efa\u3001\u66f4\u65b0\u548c\u9500\u6bc1\u5d4c\u5165\u7684\u539f\u751f\u89c6\u56fe\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"FlutterPlatformViewsController")," \u9700\u8981\u5904\u7406\u5404\u79cd\u64cd\u4f5c\uff0c\u5982\u539f\u751f\u89c6\u56fe\u7684\u89e6\u6478\u4e8b\u4ef6\u3001\u6e32\u67d3\u4e0e\u5408\u6210\u4ee5\u53ca\u89c6\u56fe\u5c42\u7ea7\u5173\u7cfb\u7684\u8c03\u6574\u7b49\u3002"),(0,r.kt)("h2",{id:"threadhost-thread-messageloop-taskrunner"},"ThreadHost, Thread, MessageLoop, TaskRunner"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ThreadHost"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Thread"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageLoop"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskRunner")," \u8fd9\u51e0\u4e2a\u7c7b\u5173\u7cfb\u975e\u5e38\u7d27\u5bc6\uff0c\u56e0\u6b64\u653e\u5728\u4e00\u8d77\u8bb2\u3002"),(0,r.kt)("p",null,"ThreadHost \u8868\u793a\u4e00\u7ec4\u7ebf\u7a0b\u7684\u96c6\u5408\uff0cThread \u662f\u5177\u4f53\u7684\u4e00\u4e2a\u7ebf\u7a0b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/fml/thread_host.cc'",title:"'flutter/fml/thread_host.cc'"},"// ThreadHost\u6784\u9020\u65f6\uff0c\u6839\u636e\u4f20\u5165\u7684host_config\uff0c\u521b\u5efa\u51fa\u4e0d\u540c\u7684\u7ebf\u7a0b\nThreadHost::ThreadHost(const ThreadHostConfig& host_config)\n    : name_prefix(host_config.name_prefix) {\n  // \u521b\u5efaUI\u7ebf\u7a0b\n  if (host_config.isThreadNeeded(ThreadHost::Type::UI)) {\n    ui_thread = CreateThread(Type::UI, host_config.ui_config, host_config);\n  }\n  // \u5176\u5b83\u7ebf\u7a0b\u7684\u521b\u5efa\u7701\u7565\uff0c\u4e0d\u4e00\u4e00\u5217\u4e3e\n}\n\nstd::unique_ptr<fml::Thread> ThreadHost::CreateThread(\n    Type type,\n    std::optional<ThreadConfig> thread_config,\n    const ThreadHostConfig& host_config) const {\n  return std::make_unique<fml::Thread>(host_config.config_setter,\n                                       thread_config.value());\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fml::Thread")," \u662f\u5bf9 ",(0,r.kt)("inlineCode",{parentName:"p"},"std::thread")," \u7684\u5c01\u88c5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/fml/thread.cc'",title:"'flutter/fml/thread.cc'"},"Thread::Thread(const ThreadConfigSetter& setter, const ThreadConfig& config)\n    : joined_(false) {\n  fml::AutoResetWaitableEvent latch;\n  fml::RefPtr<fml::TaskRunner> runner;\n\n  // template<class Function, class... Args> explicit thread(Function&& f, Args&&... args);\n  // \u521b\u5efa\u4e00\u4e2a std::thread \u5bf9\u8c61\uff0c\u65b0\u4ea7\u751f\u7684\u7ebf\u7a0b\u4f1a\u8c03\u7528 fn \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u53c2\u6570\u7531 args \u7ed9\u51fa\n  thread_ = std::make_unique<std::thread>(\n      [&latch, &runner, setter, config]() -> void {\n        setter(config); // \u8bbe\u7f6e\u7ebf\u7a0b\u4f18\u5148\u7ea7\n        fml::MessageLoop::EnsureInitializedForCurrentThread();\n        auto& loop = MessageLoop::GetCurrent();\n        runner = loop.GetTaskRunner();\n        latch.Signal();\n        loop.Run();\n      });\n  latch.Wait();\n  task_runner_ = runner; // thread \u7684 task_runner \u5b9e\u9645\u4e0a\u662f\uff1athread \u7684 MessageLoop \u7684 task_runner\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/fml/message_loop.cc'",title:"'flutter/fml/message_loop.cc'"},"void MessageLoop::EnsureInitializedForCurrentThread() {\n  tls_message_loop.reset(new MessageLoop());\n}\n\nMessageLoop::MessageLoop()\n    : loop_(MessageLoopImpl::Create()),\n      task_runner_(fml::MakeRefCounted<fml::TaskRunner>(loop_)) {}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/fml/message_loop_impl.cc'",title:"'flutter/fml/message_loop_impl.cc'"},"fml::RefPtr<MessageLoopImpl> MessageLoopImpl::Create() {\n  return fml::MakeRefCounted<MessageLoopDarwin>();\n}\n\n// MessageLoopDarwin\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\nMessageLoopImpl::MessageLoopImpl()\n    : task_queue_(MessageLoopTaskQueues::GetInstance()),\n      queue_id_(task_queue_->CreateTaskQueue()),\n      terminated_(false) {\n  task_queue_->SetWakeable(queue_id_, this);\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/fml/platform/darwin/message_loop_darwin.mm'",title:"'flutter/fml/platform/darwin/message_loop_darwin.mm'"},"MessageLoopDarwin::MessageLoopDarwin()\n    : running_(false), loop_((CFRunLoopRef)CFRetain(CFRunLoopGetCurrent())) {\n\n  // \u521d\u59cb\u5316\u65f6\uff0cRunLoop\u5e76\u6ca1\u6709\u8fd0\u884c\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u4e00\u4e2a\u7528\u4e8e\u5524\u9192\u6d88\u606f\u5faa\u73af\u7684\u201c\u5ef6\u8fdf\u5524\u9192\u6e90\u201d\n  CFRunLoopTimerContext timer_context = {\n      .info = this,\n  };\n  delayed_wake_timer_.Reset(\n      CFRunLoopTimerCreate(kCFAllocatorDefault, kDistantFuture /* fire date */,\n                           HUGE_VAL /* interval */, 0 /* flags */, 0 /* order */,\n                           reinterpret_cast<CFRunLoopTimerCallBack>(&MessageLoopDarwin::OnTimerFire)\n                           /* callout */,\n                           &timer_context /* context */));\n\n  CFRunLoopAddTimer(loop_, delayed_wake_timer_, kCFRunLoopCommonModes);\n  // This mode will be used by FlutterKeyboardManager.\n  CFRunLoopAddTimer(loop_, delayed_wake_timer_, kMessageLoopCFRunLoopMode);\n}\n")),(0,r.kt)("h2",{id:"shell"},"Shell"),(0,r.kt)("p",null,"\u6458\u81ea shell.h \u7684\u6ce8\u91ca\uff1a"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Perhaps the single most important class in the Flutter engine repository. When embedders create a Flutter application, they are referring to the creation of an instance of a shell. Creation and destruction of the shell is synchronous and the embedder only holds a unique pointer to the shell. The shell does not create the threads its primary components run on. Instead, ",(0,r.kt)("strong",{parentName:"p"},"it is the embedder's responsibility to create threads and give the shell task runners for those threads"),".\uff08\u5d4c\u5165\u8005\u6709\u8d23\u4efb\u521b\u5efa\u7ebf\u7a0b\uff0c\u5e76\u4e3a\u8fd9\u4e9b\u7ebf\u7a0b\u63d0\u4f9b\u4efb\u52a1\u8fd0\u884c\u5668\uff09Due to deterministic destruction of the shell, the embedder can terminate all threads immediately after collecting the shell. The shell must be created and destroyed on the same thread, but, different shells (i.e. a separate instances of a Flutter application) may be run on different threads simultaneously. The task runners themselves do not have to be unique. ",(0,r.kt)("strong",{parentName:"p"},"If all task runner references given to the shell during shell creation point to the same task runner, the Flutter application is effectively single threaded."),"\uff08\u5982\u679c shell \u7684\u6240\u6709\u4efb\u52a1\u8fd0\u884c\u5668\u5f15\u7528\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u4efb\u52a1\u8fd0\u884c\u5668\uff0c\u5219 Flutter \u5e94\u7528\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u662f\u5355\u7ebf\u7a0b\u7684\u3002\uff09"),(0,r.kt)("p",{parentName:"blockquote"},"The shell is the central nervous system of the Flutter application. None of the shell components are thread safe and must be created, accessed and destroyed on the same thread. To interact with one another, the various components delegate to the shell for communication. Instead of using back pointers to the shell, a delegation pattern is used by all components that want to communicate with one another. Because of this, ",(0,r.kt)("strong",{parentName:"p"},"the shell implements the delegate interface for all these components"),"."),(0,r.kt)("p",{parentName:"blockquote"},"All shell methods accessed by the embedder may only be called on the platform task runner. In case the embedder wants to directly access a shell subcomponent, it is the embedder's responsibility to acquire a weak pointer to that component and ",(0,r.kt)("strong",{parentName:"p"},"post a task to the task runner used by the component to access its methods"),". The shell must also be destroyed on the platform task runner."),(0,r.kt)("p",{parentName:"blockquote"},"There is no explicit API to bootstrap and shutdown the Dart VM. ",(0,r.kt)("strong",{parentName:"p"},"The first instance of the shell in the process bootstraps the Dart VM and the destruction of the last shell instance destroys the same"),". Since different shells may be created and destroyed on different threads. VM bootstrap may happen on one thread but its collection on another. This behavior is thread safe.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/shell/common/shell.cc'",title:"'flutter/shell/common/shell.cc'"},'std::unique_ptr<Shell> Shell::Create(\n    const PlatformData& platform_data,\n    TaskRunners task_runners,\n    Settings settings,\n    const Shell::CreateCallback<PlatformView>& on_create_platform_view,\n    const Shell::CreateCallback<Rasterizer>& on_create_rasterizer,\n    bool is_gpu_disabled) {\n  // Always use the `vm_snapshot` and `isolate_snapshot` provided by the\n  // settings to launch the VM.  If the VM is already running, the snapshot\n  // arguments are ignored.\n  auto vm_snapshot = DartSnapshot::VMSnapshotFromSettings(settings);\n  auto isolate_snapshot = DartSnapshot::IsolateSnapshotFromSettings(settings);\n  auto vm = DartVMRef::Create(settings, vm_snapshot, isolate_snapshot);\n  FML_CHECK(vm) << "Must be able to initialize the VM.";\n\n  // If the settings did not specify an `isolate_snapshot`, fall back to the\n  // one the VM was launched with.\n  if (!isolate_snapshot) {\n    isolate_snapshot = vm->GetVMData()->GetIsolateSnapshot();\n  }\n  auto resource_cache_limit_calculator =\n      std::make_shared<ResourceCacheLimitCalculator>(\n          settings.resource_cache_max_bytes_threshold);\n  return CreateWithSnapshot(std::move(platform_data),            //\n                            std::move(task_runners),             //\n                            /*parent_merger=*/nullptr,           //\n                            /*parent_io_manager=*/nullptr,       //\n                            resource_cache_limit_calculator,     //\n                            std::move(settings),                 //\n                            std::move(vm),                       //\n                            std::move(isolate_snapshot),         //\n                            std::move(on_create_platform_view),  //\n                            std::move(on_create_rasterizer),     //\n                            CreateEngine, is_gpu_disabled);\n}\n\nstd::unique_ptr<Shell> Shell::CreateWithSnapshot() {\n  shell = CreateShellOnPlatformThread();\n}\n\nstd::unique_ptr<Shell> Shell::CreateShellOnPlatformThread() {\n  auto shell = std::unique_ptr<Shell>(\n      new Shell(std::move(vm), task_runners, parent_merger,\n                resource_cache_limit_calculator, settings,\n                std::make_shared<VolatilePathTracker>(\n                    task_runners.GetUITaskRunner(),\n                    !settings.skia_deterministic_rendering_on_cpu),\n                is_gpu_disabled));\n\n  // Create the platform view on the platform thread (this thread).\n  // \u5148\u6709shell\u624d\u80fd\u521b\u5efaplatformView\n  auto platform_view = on_create_platform_view(*shell.get());\n\n  shell->Setup(std::move(platform_view),\n                    engine_future.get(),\n                    rasterizer_future.get(),\n                    io_manager_future.get());\n  return shell;\n}\n\nbool Shell::Setup(std::unique_ptr<PlatformView> platform_view,\n                  std::unique_ptr<Engine> engine,\n                  std::unique_ptr<Rasterizer> rasterizer,\n                  std::shared_ptr<ShellIOManager> io_manager) {\n  platform_view_ = std::move(platform_view);\n  platform_message_handler_ = platform_view_->GetPlatformMessageHandler();\n  route_messages_through_platform_thread_.store(true);\n  task_runners_.GetPlatformTaskRunner()->PostTask(\n      [self = weak_factory_.GetWeakPtr()] {\n        if (self) {\n          self->route_messages_through_platform_thread_.store(false);\n        }\n      });\n  engine_ = std::move(engine);\n  rasterizer_ = std::move(rasterizer);\n  io_manager_ = io_manager;\n\n  // Set the external view embedder for the rasterizer.\n  auto view_embedder = platform_view_->CreateExternalViewEmbedder();\n  rasterizer_->SetExternalViewEmbedder(view_embedder);\n  rasterizer_->SetSnapshotSurfaceProducer(\n      platform_view_->CreateSnapshotSurfaceProducer());\n\n  // The weak ptr must be generated in the platform thread which owns the unique\n  // ptr.\n  weak_engine_ = engine_->GetWeakPtr();\n  weak_rasterizer_ = rasterizer_->GetWeakPtr();\n  weak_platform_view_ = platform_view_->GetWeakPtr();\n\n  is_setup_ = true;\n  return true;\n}\n\nconst std::weak_ptr<VsyncWaiter> Shell::GetVsyncWaiter() const {\n  return engine_->GetVsyncWaiter();\n}\n\nvoid Shell::RunEngine(\n    RunConfiguration run_configuration,\n    const std::function<void(Engine::RunStatus)>& result_callback) {\n  auto result = [platform_runner = task_runners_.GetPlatformTaskRunner(),\n                 result_callback](Engine::RunStatus run_result) {\n    if (!result_callback) {\n      return;\n    }\n    platform_runner->PostTask(\n        [result_callback, run_result]() { result_callback(run_result); });\n  };\n  FML_DCHECK(is_setup_);\n  FML_DCHECK(task_runners_.GetPlatformTaskRunner()->RunsTasksOnCurrentThread());\n\n  fml::TaskRunner::RunNowOrPostTask(\n      task_runners_.GetUITaskRunner(),\n      fml::MakeCopyable(\n          [run_configuration = std::move(run_configuration),\n           weak_engine = weak_engine_, result]() mutable {\n            if (!weak_engine) {\n              FML_LOG(ERROR)\n                  << "Could not launch engine with configuration - no engine.";\n              result(Engine::RunStatus::Failure);\n              return;\n            }\n            auto run_result = weak_engine->Run(std::move(run_configuration));\n            if (run_result == flutter::Engine::RunStatus::Failure) {\n              FML_LOG(ERROR) << "Could not launch engine with configuration.";\n            }\n            result(run_result);\n          }));\n}\n')),(0,r.kt)("h2",{id:"taskrunner"},"TaskRunner"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/fml/task_runner.cc'",title:"'flutter/fml/task_runner.cc'"},"void TaskRunner::RunNowOrPostTask(fml::RefPtr<fml::TaskRunner> runner,\n                                  const fml::closure& task) {\n  FML_DCHECK(runner);\n  if (runner->RunsTasksOnCurrentThread()) {\n    task();\n  } else {\n    runner->PostTask(std::move(task));\n  }\n}\n")),(0,r.kt)("h2",{id:"dartsnapshot"},"DartSnapshot"),(0,r.kt)("p",null,"A read-only Dart heap snapshot, or, read-executable mapping of AOT compiled Dart code. To make Dart code startup more performant, the Flutter tools on the host snapshot the state of the Dart heap at specific points and package the same with the Flutter application. When the Dart VM on the target is configured to run AOT compiled Dart code, the tools also compile the developer's Flutter application code to target specific machine code (instructions). This class deals with the mapping of both these buffers at runtime on the target."),(0,r.kt)("p",null,'A Flutter application typically needs two instances of this class at runtime to run Dart code. One instance is for the VM and is called the "core snapshot". The other is the isolate and called the "isolate snapshot". Different root isolates can be launched with different isolate snapshots.'),(0,r.kt)("p",null,"These snapshots are typically memory-mapped at runtime, or, referenced directly as symbols present in Mach or ELF binaries."),(0,r.kt)("p",null,"In the case of the core snapshot, the snapshot is collected when the VM shuts down. The isolate snapshot is collected when the isolate group shuts down."))}h.isMDXComponent=!0}}]);