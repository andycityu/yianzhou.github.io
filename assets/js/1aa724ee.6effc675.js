"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6042],{30123:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var n=a(87462),s=(a(67294),a(3905));a(61839);const o={slug:"/"},i="Computer Network",r={unversionedId:"computer-network",id:"computer-network",title:"Computer Network",description:"Welcome to the student resources for the Computer Networking: A Top-Down Approach Sixth Edition Companion Website.",source:"@site/docs/dev/computer-network.md",sourceDirName:".",slug:"/",permalink:"/docs/dev/",draft:!1,tags:[],version:"current",frontMatter:{slug:"/"},sidebar:"tutorialSidebar",previous:{title:"Chrome",permalink:"/docs/dev/chrome"},next:{title:"\u8ba1\u7b97\u673a\u79d1\u5b66",permalink:"/docs/dev/computer-science"}},l={},h=[{value:"Computer Network and Internet",id:"computer-network-and-internet",level:2},{value:"Network Edge",id:"network-edge",level:3},{value:"Network Core",id:"network-core",level:3},{value:"Packet Switching",id:"packet-switching",level:4},{value:"Circuit Switching",id:"circuit-switching",level:4},{value:"Internet Service Provider",id:"internet-service-provider",level:3},{value:"Protocol Layers",id:"protocol-layers",level:3},{value:"Application Layer",id:"application-layer",level:2},{value:"The Web and HTTP",id:"the-web-and-http",level:3},{value:"HTTP Message Format",id:"http-message-format",level:3},{value:"Request Message",id:"request-message",level:4},{value:"Response Message",id:"response-message",level:4},{value:"Cookie",id:"cookie",level:3},{value:"Web Caching and The Conditional GET",id:"web-caching-and-the-conditional-get",level:3},{value:"HTTP/2",id:"http2",level:3},{value:"HOL Blocking and HTTP/2 Framing",id:"hol-blocking-and-http2-framing",level:4},{value:"Header compression (HPACK)",id:"header-compression-hpack",level:4},{value:"Response Message Prioritization",id:"response-message-prioritization",level:4},{value:"Server Pushing",id:"server-pushing",level:4},{value:"HTTP/3",id:"http3",level:3},{value:"Email",id:"email",level:3},{value:"DNS",id:"dns",level:3},{value:"P2P",id:"p2p",level:3},{value:"Video Streaming",id:"video-streaming",level:3},{value:"Content Distribution Networks",id:"content-distribution-networks",level:3},{value:"Socket Programming",id:"socket-programming",level:3},{value:"UDP",id:"udp",level:4},{value:"TCP",id:"tcp",level:4},{value:"Exercise: Proxy Server",id:"exercise-proxy-server",level:4},{value:"Transport Layer",id:"transport-layer",level:2},{value:"Multiplexing and Demultiplexing",id:"multiplexing-and-demultiplexing",level:3},{value:"UDP",id:"udp-1",level:3},{value:"TCP",id:"tcp-1",level:3},{value:"Go-Back-N (GBN) and Selective Repeat (SR)",id:"go-back-n-gbn-and-selective-repeat-sr",level:4},{value:"TCP Connection",id:"tcp-connection",level:4},{value:"TCP Segment",id:"tcp-segment",level:4},{value:"Round-Trip Time Estimation and Timeout",id:"round-trip-time-estimation-and-timeout",level:4},{value:"Reliable Data Transfer",id:"reliable-data-transfer",level:4},{value:"Flow Control",id:"flow-control",level:4},{value:"TCP Connection Management",id:"tcp-connection-management",level:4},{value:"Classic TCP Congestion Control (TCP Reno)",id:"classic-tcp-congestion-control-tcp-reno",level:4},{value:"Explicit Congestion Notification and Delayed-based Congestion Control",id:"explicit-congestion-notification-and-delayed-based-congestion-control",level:4},{value:"Fairness",id:"fairness",level:4},{value:"Evolution",id:"evolution",level:3},{value:"Network Layer",id:"network-layer",level:2},{value:"Data Plane",id:"data-plane",level:3},{value:"Router",id:"router",level:4},{value:"IPv4",id:"ipv4",level:4},{value:"NAT",id:"nat",level:4},{value:"IPv6",id:"ipv6",level:4},{value:"Control Plane",id:"control-plane",level:3},{value:"Routing Algorithms",id:"routing-algorithms",level:4},{value:"OSPF and BGP",id:"ospf-and-bgp",level:4},{value:"Managing the IP Network",id:"managing-the-ip-network",level:4},{value:"Link Layer",id:"link-layer",level:2},{value:"Multiple Access Protocols",id:"multiple-access-protocols",level:3},{value:"Channel Partitioning Protocols",id:"channel-partitioning-protocols",level:4},{value:"Random Access protocols",id:"random-access-protocols",level:4},{value:"Taking-Turns Protocols",id:"taking-turns-protocols",level:4},{value:"DOCSIS",id:"docsis",level:4},{value:"Switched Local Area Networks",id:"switched-local-area-networks",level:3},{value:"Link-Layer Addressing and ARP",id:"link-layer-addressing-and-arp",level:4},{value:"Ethernet",id:"ethernet",level:4},{value:"Link-Layer Switches",id:"link-layer-switches",level:4},{value:"A Day in the Life of a Web Page Request",id:"a-day-in-the-life-of-a-web-page-request",level:3},{value:"Wireless and Mobile Networks",id:"wireless-and-mobile-networks",level:2},{value:"Wireless Links and WiFi",id:"wireless-links-and-wifi",level:3},{value:"Mobility in the Same IP Subnet",id:"mobility-in-the-same-ip-subnet",level:3},{value:"Cellular Networks: 4G and 5G",id:"cellular-networks-4g-and-5g",level:3},{value:"Network Security",id:"network-security",level:2},{value:"Network Under Attack",id:"network-under-attack",level:3},{value:"Symmetric Key Cryptography",id:"symmetric-key-cryptography",level:3},{value:"Public Key Encryption",id:"public-key-encryption",level:3},{value:"Cryptographic Hash Functions",id:"cryptographic-hash-functions",level:3},{value:"Digital Signatures",id:"digital-signatures",level:3},{value:"Transport Layer Security (TLS)",id:"transport-layer-security-tls",level:3},{value:"IPsec and VPNs",id:"ipsec-and-vpns",level:3}],d={toc:h};function c(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"computer-network"},"Computer Network"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/index.html"},"Welcome to the student resources for the Computer Networking: A Top-Down Approach Sixth Edition Companion Website.")),(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://gaia.cs.umass.edu/kurose_ross/interactive/"},"INTERACTIVE END-OF-CHAPTER EXERCISES, Supplement to Computer Networking: A Top Down Approach 8th Edition")),(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198702.cw/index.html"},"Interactive Animations")),(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://quic.xargs.org/"},"The Illustrated QUIC Connection: Every Byte Explained"),"\uff08QUIC \u534f\u8bae\u56fe\u89e3\uff09"),(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://baida.dev/articles/https-explained-with-carrier-pigeons"},"Baida | HTTPS explained with carrier pigeons"))),(0,s.kt)("h2",{id:"computer-network-and-internet"},"Computer Network and Internet"),(0,s.kt)("h3",{id:"network-edge"},"Network Edge"),(0,s.kt)("p",null,"\u56e0\u7279\u7f51\u662f\u4e16\u754c\u8303\u56f4\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u3002\u4f20\u7edf\u7684\u684c\u9762 PC\u3001Linux \u5de5\u4f5c\u7ad9\u3001\u670d\u52a1\u5668\uff0c\u4ee5\u53ca\u65b0\u5174\u7684\u624b\u673a\u3001\u5bb6\u7528\u7535\u5668\u3001\u53ef\u7a7f\u6234\u8bbe\u5907\u7b49\u6b63\u5728\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u3002\u8fd9\u4e9b\u8bbe\u5907\u88ab\u79f0\u4e3a\u4e3b\u673a (host)\uff0c\u4e3b\u673a\u53c8\u53ef\u5206\u4e3a\u4e24\u7c7b\uff1a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\uff1b\u56e0\u4e3b\u673a\u8fd0\u884c\u5728\u7f51\u7edc\u8fb9\u7f18 (network edge)\uff0c\u6545\u53c8\u79f0\u4e3a\u7aef\u7cfb\u7edf (end system)\u3002"),(0,s.kt)("p",null,"Access network\u2014the network that physically connects an end system to the first router."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5bb6\u5ead\u5165\u7f51\u8fc7\u53bb\u7528\u7684\u662f DSL (Digital Subscriber Line)\uff0cDSL modem \u5f97\u5230\u6570\u5b57\u4fe1\u606f\u540e\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u9891\u4fe1\u53f7\uff0c\u901a\u8fc7\u7535\u8bdd\u7ebf\uff08\u5373\u53cc\u7ede\u94dc\u7ebf\uff09\u4e0e\u7535\u8bdd\u516c\u53f8\u7684 DSLAM \u4ea4\u6362\u6570\u636e\uff0c\u5e76\u5728\u90a3\u91cc\u88ab\u8f6c\u6362\u56de\u6570\u5b57\u5f62\u5f0f\u3002\u7535\u8bdd\u7ebf\u901a\u8fc7\u201c\u9891\u5206\u590d\u7528\u6280\u672f\u201d\u5f62\u6210\u4e86\u53cc\u5411\u7535\u8bdd\u4fe1\u9053\uff080 - 4kHz\uff09\u3001\u4e2d\u901f\u4e0a\u884c\u4fe1\u9053\uff084kHz - 50kHz\uff09\u3001\u9ad8\u901f\u4e0b\u884c\u4fe1\u9053\uff0850kHz - 1MHz\uff09\u3002\u4f7f\u5f97\u7535\u8bdd\u547c\u53eb\u548c\u56e0\u7279\u7f51\u8fde\u63a5\u80fd\u540c\u65f6\u8fdb\u884c\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u53e6\u4e00\u79cd\u5bb6\u5ead\u5165\u7f51\u662f\u540c\u8f74\u7535\u7f06 (cable) \u63a5\u5165\uff0c\u5229\u7528\u4e86\u6709\u7ebf\u7535\u89c6\u516c\u53f8\u7684\u57fa\u7840\u8bbe\u65bd\u3002\u5bb6\u5ead\u5148\u901a\u8fc7\u540c\u8f74\u7535\u7f06\u63a5\u5165\u5230\u5730\u533a\u7684\u5149\u7ea4\u8282\u70b9\uff0c\u518d\u901a\u8fc7\u5149\u7ea4\u8fde\u63a5\u5230\u6709\u7ebf\u7535\u89c6\u516c\u53f8\u3002\u8fd9\u79cd\u5165\u7f51\u8981\u7528\u5230 cable modem\uff0c\u540c DSL modem \u4e00\u6837\u5c06\u4fe1\u53f7\u8fdb\u884c\u6570\u6a21\u8f6c\u6362\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u73b0\u5728\u66f4\u591a\u7684\u5bb6\u5ead\u4eab\u53d7\u5230\u4e86\u5149\u7ea4\u5165\u6237 (Fiber To The Home, FTTH)\uff0c\u7528\u6237\u5728\u5bb6\u4e2d\u5c06\u65e0\u7ebf\u8def\u7531\u5668\u4e0e ONT (Optical Network Terminator) \u76f8\u8fde\uff0c\u591a\u4e2a\u5bb6\u5ead\u7684 ONT \u901a\u8fc7\u5149\u7ea4\u8fde\u63a5\u5230\u4e34\u8fd1\u7684\u5206\u914d\u5668 (splitter)\uff0c\u518d\u901a\u8fc7\u4e00\u6839\u5171\u4eab\u7684\u5149\u7ea4\u8fde\u63a5\u5230\u672c\u5730\u4e2d\u5fc3\u5c40\u7684 OLT (Optical Line Terminator)\u3002OLT \u63d0\u4f9b\u4e86\u5149\u4fe1\u53f7\u548c\u7535\u4fe1\u53f7\u4e4b\u95f4\u7684\u8f6c\u6362\u3002")),(0,s.kt)("h3",{id:"network-core"},"Network Core"),(0,s.kt)("h4",{id:"packet-switching"},"Packet Switching"),(0,s.kt)("p",null,"\u7f51\u7edc\u6838\u5fc3\u662f\u7531\u901a\u4fe1\u94fe\u8def (communication link) \u548c\u5206\u7ec4\u4ea4\u6362\u673a (packet switch) \u6784\u6210\u7684\u7f51\u72b6\u7f51\u7edc\u3002\u7aef\u7cfb\u7edf\u5f7c\u6b64\u4ea4\u6362\u62a5\u6587 (message)\u3002\u957f\u7684\u62a5\u6587\u88ab\u5212\u5206\u6210\u5206\u7ec4 (packet)\uff0c\u5206\u7ec4\u901a\u8fc7\u7f51\u7edc\u6838\u5fc3\u4f20\u9001\u3002"),(0,s.kt)("p",null,"\u901a\u4fe1\u94fe\u8def\u7531\u4e0d\u540c\u7684\u7269\u7406\u5a92\u4f53\u7ec4\u6210\uff0c\u5305\u62ec\u540c\u8f74\u7535\u7f06\u3001\u53cc\u7ede\u94dc\u7ebf\u3001\u5149\u7ea4\u3001\u65e0\u7ebf\u7535\u9891\u8c31\u7b49\u3002\u94fe\u8def\u7684\u4f20\u8f93\u901f\u7387\u4ee5 bit/s \u5ea6\u91cf\u3002\u5047\u8bbe\u94fe\u8def\u7684\u4f20\u8f93\u901f\u7387\u662f R bits/s\uff0c\u7ecf\u8fc7\u4e00\u6761\u94fe\u8def\u53d1\u9001 L bits \u7684 packet\uff0c\u4f20\u8f93\u65f6\u95f4\u5e94\u4e3a L/R \u79d2\u3002"),(0,s.kt)("p",null,"Packet switch \u6700\u8457\u540d\u7684\u4e24\u79cd\u7c7b\u578b\u662f\u8def\u7531\u5668 (router) \u548c\u94fe\u8def\u5c42\u4ea4\u6362\u673a (link-layer switch)\u3002"),(0,s.kt)("p",null,"Packet \u5728\u4f20\u8f93\u7684\u8def\u5f84\u4e0a\u7684",(0,s.kt)("strong",{parentName:"p"},"\u6bcf\u4e2a\u8282\u70b9"),"\u90fd\u8981\u7ecf\u5386\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u65f6\u5ef6\u3002"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u8282\u70b9\u5904\u7406\u65f6\u5ef6 (nodal processing delay)"),"\uff1a\u68c0\u67e5 packet \u7684\u5934\u90e8\u5e76\u51b3\u5b9a\u5c06\u8be5 packet \u5bfc\u5411\u4f55\u5904\u3002"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u6392\u961f\u65f6\u5ef6 (queuing delay)"),"\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fde\u63a5\u5230 packet switch \u4e0a\u7684\u94fe\u8def\uff0c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8f93\u51fa\u7f13\u5b58 (output buffer)\uff0c\u5b83\u7528\u4e8e\u5b58\u50a8\u51c6\u5907\u53d1\u5f80\u90a3\u6761\u94fe\u8def\u7684 packet\u3002\u5982\u679c\u8be5\u94fe\u8def\u6b63\u5fd9\u4e8e\u4f20\u8f93\uff0c\u5219\u5230\u8fbe\u8def\u7531\u5668\u7684 packet \u5fc5\u987b\u5728\u8f93\u51fa\u7f13\u5b58\u4e2d\u7b49\u5f85\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6392\u961f\u65f6\u5ef6\u3002\u5982\u679c\u8f93\u51fa\u7f13\u5b58\u5df2\u6ee1\uff0c\u90a3\u4e48\u5728\u65b0\u7684 packet \u5230\u8fbe\u65f6\u5c31\u4f1a\u6709 packet \u88ab\u4e22\u5f03\uff0c\u9020\u6210\u4e22\u5305\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(23899).Z,width:"558",height:"356"})),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u4f20\u8f93\u65f6\u5ef6 (transmission delay)"),"\uff1aL/R\uff0c\u8fd9\u662f\u5c06\u4e00\u4e2a packet \u7684\u6240\u6709\u6bd4\u7279\u63a8\u5411\u94fe\u8def\u7684\u65f6\u95f4\uff0c\u4f20\u8f93\u65f6\u5ef6\u7684\u539f\u56e0\u662f\u5b58\u50a8\u8f6c\u53d1\u673a\u5236\u3002"),(0,s.kt)("p",null,"\u591a\u6570 packet switch \u5728\u94fe\u8def\u7684\u8f93\u5165\u7aef\u4f7f\u7528\u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93 (store-and-forward transmission)\uff0c\u8fd9\u662f\u6307 packet switch \u5728\u5f00\u59cb\u5411\u8f93\u51fa\u94fe\u8def\u4f20\u8f93 packet \u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\u4e4b\u524d\uff0c\u5fc5\u987b\u6536\u5230\u6574\u4e2a packet\u3002"),(0,s.kt)("p",null,"\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e00\u673a\u5236\uff0c\u8003\u8651\u4e24\u4e2a\u7aef\u7cfb\u7edf\u7ecf\u4e00\u53f0\u8def\u7531\u5668\u8fde\u63a5\u6784\u6210\u7684\u7b80\u5355\u7f51\u7edc\uff0cSource \u5728\u65f6\u523b 0 \u5f00\u59cb\u4f20\u8f93\uff0c\u7ecf\u8fc7 L/R \u79d2\uff0c\u8def\u7531\u5668\u63a5\u53d7\u5230\u6574\u4e2a packet\uff0c\u5e76\u4e14\u5f00\u59cb\u5411\u51fa\u94fe\u8def\u4f20\u8f93\uff0c\u5728\u65f6\u523b 2L/R \u6574\u4e2a packet \u5230\u8fbe\u76ee\u7684\u5730\uff0c\u6240\u4ee5\u603b\u65f6\u5ef6\u662f 2L/R\u3002\u5982\u679c packet switch \u4e0d\u4f7f\u7528\u5b58\u50a8\u8f6c\u53d1\u673a\u5236\uff0c\u800c\u662f\u6bcf\u5230\u8fbe\u4e00\u4e2a\u6bd4\u7279\u5c31\u76f4\u63a5\u8f6c\u53d1\uff0c\u90a3\u4e48\u603b\u65f6\u5ef6\u5c06\u4f1a\u662f L/R\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(81318).Z,width:"540",height:"224"})),(0,s.kt)("p",null,"\u4e00\u822c\u5730\uff0c\u901a\u8fc7\u7531 N \u6761\u901f\u7387\u5747\u4e3a R \u7684\u94fe\u8def\u7ec4\u6210\u7684\u8def\u5f84\uff08\u4ee3\u8868\u6709 N - 1 \u53f0\u8def\u7531\u5668\uff09\uff0c\u7aef\u5230\u7aef\u7684\u5b58\u50a8\u8f6c\u53d1\u65f6\u5ef6\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"d = N * L / R"),"\u3002"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u4f20\u64ad\u65f6\u5ef6 (propagation delay)"),"\uff1a\u4e00\u65e6\u4e00\u4e2a\u6bd4\u7279\u88ab\u63a8\u5411\u94fe\u8def\uff0c\u5b83\u5c31\u4f1a\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u4f20\u64ad\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u7279\u4ece\u8def\u7531\u5668 A \u7684\u51fa\u53e3\u5230\u8def\u7531\u5668 B \u7684\u5165\u53e3\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002\u4f20\u64ad\u901f\u7387\u53d6\u51b3\u4e8e\u8be5\u94fe\u8def\u7684\u7269\u7406\u5a92\u4f53\u3002"),(0,s.kt)("p",null,"\u4e0b\u9762\u4e00\u5f20\u56fe\u6982\u62ec\u4e86\u8def\u7531\u5668 A \u7684\u8282\u70b9\u603b\u65f6\u5ef6 (total nodal delay)\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(24355).Z,width:"613",height:"266"})),(0,s.kt)("h4",{id:"circuit-switching"},"Circuit Switching"),(0,s.kt)("p",null,"Circuit Switching \u5fc5\u987b\u5728\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761\u8fde\u63a5\uff0c\u8be5\u8fde\u63a5\u88ab\u79f0\u4e3a\u4e00\u6761\u7535\u8def (circuit)\uff0c\u5b83\u8def\u5f84\u4e0a\u7684\u4ea4\u6362\u673a\u90fd\u8981\u4e3a\u8be5\u8fde\u63a5\u7ef4\u62a4\u5fc5\u8981\u7684\u72b6\u6001\u3002Circuit \u9884\u7559\u4e86\u6052\u5b9a\u7684\u4f20\u8f93\u901f\u7387\uff0c\u4ee5\u786e\u4fdd\u53d1\u9001\u65b9\u80fd\u591f\u4ee5\u6052\u5b9a\u901f\u7387\u5411\u63a5\u6536\u65b9\u4f20\u9001\u6570\u636e\u3002\uff08\u7c7b\u6bd4\u56fa\u5b9a\u7535\u8bdd\u4e4b\u95f4\u7684\u901a\u8bdd\uff09"),(0,s.kt)("p",null,"\u4e0e\u4e4b\u76f8\u53cd\uff0cpacket switching \u4e0d\u9884\u7559\u4efb\u4f55\u94fe\u8def\u8d44\u6e90\uff0c\u56e0\u7279\u7f51\u5c3d\u6700\u5927\u52aa\u529b\u4ea4\u4ed8 packet \u4f46\u4e0d\u505a\u4efb\u4f55\u4fdd\u8bc1\u3002\uff08\u7c7b\u6bd4\u5fae\u4fe1\u8bed\u97f3\u901a\u8bdd\uff09"),(0,s.kt)("p",null,"Circuit Switching \u9700\u8981\u9884\u5148\u5206\u914d\u8d44\u6e90\uff0c\u5df2\u5206\u914d\u800c\u6ca1\u6709\u7528\u4e0a\u7684\u94fe\u8def\u65f6\u95f4\u5c31\u88ab\u6d6a\u8d39\u6389\u4e86\uff1bPacket Switching \u5219\u53ef\u4ee5\u6309\u9700\u5171\u4eab\u94fe\u8def\u4f20\u8f93\u80fd\u529b\u3002\u4eca\u5929\u7684\u7535\u4fe1\u7f51\u7edc\u6b63\u5728\u671d Packet switching \u53d1\u5c55\uff0c\u7279\u522b\u662f\uff0c\u7535\u8bdd\u7f51\u7ecf\u5e38\u5728\u6602\u8d35\u7684\u6d77\u5916\u7535\u8bdd\u90e8\u5206\u4f7f\u7528 Packet Switching\u3002"),(0,s.kt)("h3",{id:"internet-service-provider"},"Internet Service Provider"),(0,s.kt)("p",null,"\u7aef\u7cfb\u7edf\u8981\u901a\u8fc7 ISP (Internet Service Provider) \u63a5\u5165\u56e0\u7279\u7f51\u3002Access ISPs \u7684\u7c7b\u578b\u591a\u79cd\u591a\u6837\uff0c\u5305\u62ec\u4f4f\u5b85 ISP\u3001\u516c\u53f8 ISP\u3001\u5927\u5b66 ISP\u3001\u5496\u5561\u5385\u6216\u533b\u9662\u7b49\u516c\u5171\u573a\u6240\u7684 ISP\u2026\u2026"),(0,s.kt)("p",null,"\u5728\u4e2d\u56fd\uff0c\u6bcf\u4e2a\u57ce\u5e02\u6709 Access ISPs\uff0c\u5b83\u4eec\u4e0e\u7701\u7ea7 ISP \u8fde\u63a5\uff0c\u518d\u4e0e\u56fd\u5bb6\u7ea7 ISP \u8fde\u63a5\uff0c\u6700\u7ec8\u4e0e tier-1 ISP \u8fde\u63a5\uff1b\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u518d\u52a0\u4e0a PoPs (Point of Presence)\u3001multi-homing\u3001peering\u3001IXPs (Internet exchange points)\u3001\u5185\u5bb9\u63d0\u4f9b\u5546\u7f51\u7edc (content provider network) \uff0c\u6784\u6210\u4e86\u4eca\u5929\u7684\u56e0\u7279\u7f51\u7ed3\u6784\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(3484).Z,width:"681",height:"358"})),(0,s.kt)("p",null,"\u603b\u4e4b\uff0c\u4eca\u5929\u7684\u56e0\u7279\u7f51\u662f\u4e00\u4e2a\u7f51\u7edc\u7684\u7f51\u7edc\uff0c\u7ed3\u6784\u975e\u5e38\u590d\u6742\uff0c\u7531\u5341\u591a\u4e2a tier-1 ISP \u548c\u6570\u5341\u4e07\u4e2a\u8f83\u4f4e\u5c42 ISP \u7ec4\u6210\u3002\u7528\u6237\u548c\u5185\u5bb9\u63d0\u4f9b\u5546\u662f\u8f83\u4f4e\u5c42 ISP \u7684\u5ba2\u6237\uff0c\u4f4e\u5c42 ISP \u662f\u9ad8\u5c42 ISP \u7684\u5ba2\u6237\u3002\u4f8b\u5982\u8c37\u6b4c\u901a\u8fc7\u521b\u5efa\u81ea\u5df1\u7684\u7f51\u7edc\u548c\u6570\u636e\u4e2d\u5fc3\uff0c\u76f4\u63a5\u5728\u53ef\u80fd\u7684\u5730\u65b9\u4e0e\u4f4e\u5c42 ISP \u4e92\u8054\u3002"),(0,s.kt)("h3",{id:"protocol-layers"},"Protocol Layers"),(0,s.kt)("p",null,"\u7f51\u7edc\u8bbe\u8ba1\u8005\u4ee5\u5206\u5c42\u7684\u65b9\u5f0f\u7ec4\u7ec7\u534f\u8bae\u3001\u5e76\u5b9e\u73b0\u8fd9\u4e9b\u534f\u8bae\u7684\u7f51\u7edc\u786c\u4ef6\u548c\u8f6f\u4ef6\u3002\u4e00\u4e2a layer \u4f1a\u4f7f\u7528\u5b83\u4e0b\u5c42\u7684\u670d\u52a1\uff0c\u5e76\u540c\u65f6\u5411\u4e0a\u5c42\u63d0\u4f9b\u670d\u52a1 (service model)\u3002"),(0,s.kt)("p",null,"\u5404\u5c42\u7684\u6240\u6709\u534f\u8bae\u88ab\u79f0\u4e3a\u534f\u8bae\u6808 (protocol stack)\uff0c\u56e0\u7279\u7f51\u7684\u534f\u8bae\u6808\u7531 5 \u4e2a\u5c42\u6b21\u7ec4\u6210\uff1a\u7269\u7406\u5c42\u3001\u94fe\u8def\u5c42\u3001\u7f51\u7edc\u5c42\u3001\u8fd0\u8f93\u5c42\u3001\u5e94\u7528\u5c42\u3002"),(0,s.kt)("p",null,"\u4f20\u8f93\u5c42\u8d1f\u8d23\u8fdb\u7a0b\u5230\u8fdb\u7a0b\u7684\u4f20\u9001\uff1b\u7f51\u7edc\u5c42\u8d1f\u8d23\u4e3b\u673a\u5230\u4e3b\u673a\u7684\u4f20\u9001\uff1b\u94fe\u8def\u5c42\u8d1f\u8d23\u5c06\u5e27\u4ece\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u5230\u90bb\u8fd1\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff1b\u7269\u7406\u5c42\u8d1f\u8d23\u5c06\u5e27\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4ece\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(69749).Z,width:"857",height:"601"})),(0,s.kt)("p",null,"\u4e0a\u56fe\u663e\u793a\u4e86\u8fd9\u6837\u4e00\u6761\u8def\u5f84\uff1a\u6570\u636e\u4ece\u6e90\u7684\u534f\u8bae\u6808\u4e00\u8def\u5411\u4e0b\u3001\u7ecf\u8fc7\u4e2d\u95f4\u7684\u94fe\u8def\u5c42\u4ea4\u6362\u673a\u548c\u8def\u7531\u5668\u7684\u534f\u8bae\u6808\u4e0a\u4e0a\u4e0b\u4e0b\u3001\u6700\u540e\u5411\u4e0a\u5230\u8fbe\u76ee\u7684\u5730\u7684\u534f\u8bae\u6808\u3002\u6ce8\u610f\uff0c\u8def\u7531\u5668\u5b9e\u73b0\u4e86\u7b2c\u4e00\u5c42\u5230\u7b2c\u4e09\u5c42\u534f\u8bae\uff0c\u800c\u94fe\u8def\u5c42\u4ea4\u6362\u673a\u53ea\u5b9e\u73b0\u4e86\u524d\u4e8c\u5c42\u3002\u8fd9\u610f\u5473\u7740\u8def\u7531\u5668\u80fd\u591f\u5b9e\u73b0 IP \u534f\u8bae\uff0c\u4f46\u94fe\u8def\u5c42\u4ea4\u6362\u673a\u4e0d\u80fd\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u8bc6\u522b IP \u5730\u5740\uff0c\u4f46\u5b83\u80fd\u591f\u8bc6\u522b\u7b2c\u4e8c\u5c42\u5730\u5740\u5982 Ethernet \u5730\u5740\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0cpacket \u5230\u8fbe\u6bcf\u4e00\u5c42\uff0c\u90fd\u4f1a\u88ab\u9644\u52a0\u4e0a\u8be5\u5c42\u7684\u9996\u90e8\u5b57\u6bb5\uff08\u7528\u5b57\u6bcd H \u8868\u793a\uff09\uff0c\u9996\u90e8\u5b57\u6bb5\u4f1a\u5728\u4e4b\u540e\u88ab\u76f8\u5e94\u7684\u5c42\u4f7f\u7528\u3002"),(0,s.kt)("h2",{id:"application-layer"},"Application Layer"),(0,s.kt)("p",null,"\u5728\u540c\u4e00\u4e2a\u7aef\u7cfb\u7edf\u4e0a\u7684\u8fdb\u7a0b\uff0c\u5b83\u4eec\u4f7f\u7528 IPC \u76f8\u4e92\u901a\u4fe1\uff0c\u89c4\u5219\u7531\u64cd\u4f5c\u7cfb\u7edf\u786e\u5b9a\uff1b\u5728\u4e24\u4e2a\u4e0d\u540c\u7aef\u7cfb\u7edf\u4e0a\u7684\u8fdb\u7a0b\uff0c\u901a\u8fc7\u8de8\u8d8a\u8ba1\u7b97\u673a\u7f51\u7edc\u4ea4\u6362 message \u800c\u76f8\u4e92\u901a\u4fe1\u3002"),(0,s.kt)("p",null,"\u4e0d\u7ba1\u662f client-server architecture \u8fd8\u662f P2P architecture\uff0c\u5bf9\u6bcf\u5bf9\u901a\u4fe1\u8fdb\u7a0b\uff0c\u6211\u4eec\u628a\u4e3b\u52a8\u53d1\u8d77\u901a\u4fe1\u65b9\u79f0\u4e3a\u5ba2\u6237\u7aef\uff0c\u88ab\u52a8\u7b49\u5f85\u8054\u7cfb\u65b9\u79f0\u4e3a\u670d\u52a1\u5668\u3002\u5728 P2P architecture \u4e2d\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u65e2\u80fd\u591f\u662f\u5ba2\u6237\u7aef\u53c8\u80fd\u591f\u662f\u670d\u52a1\u5668\u3002"),(0,s.kt)("p",null,"\u8fdb\u7a0b\u901a\u8fc7\u4e00\u4e2a\u79f0\u4e3a socket \u7684\u8f6f\u4ef6\u63a5\u53e3\u53d1\u9001\u548c\u63a5\u6536 message\u3002"),(0,s.kt)("p",null,"\u5728\u56e0\u7279\u7f51\u4e2d\uff0c\u76ee\u7684\u5730\u4e3b\u673a\u7531 IP \u5730\u5740\u6807\u8bc6\uff1b\u63a5\u6536\u8fdb\u7a0b\u7531\u7aef\u53e3\u53f7\u6807\u8bc6\u3002"),(0,s.kt)("p",null,"\u5f00\u53d1\u4e00\u4e2a\u5e94\u7528\u65f6\uff0c\u5fc5\u987b\u9009\u62e9\u4e00\u79cd\u8fd0\u8f93\u5c42\u534f\u8bae\uff0c\u5982\u4f55\u9009\u62e9\u5462\uff1f\u5927\u4f53\u4ece\u53ef\u9760\u6570\u636e\u4f20\u8f93\u3001\u541e\u5410\u91cf\u3001\u65f6\u6548\u6027\u548c\u5b89\u5168\u6027\u51e0\u4e2a\u65b9\u9762\u8003\u8651\u3002\u5982\u7535\u5b50\u90ae\u4ef6\u3001Web \u6587\u6863\u8fd9\u7c7b\u5e94\u7528\uff0c\u5fc5\u987b\u4fdd\u8bc1\u53ef\u9760\u6570\u636e\u4f20\u8f93\uff08\u4e0d\u80fd\u4e22\u5931\u6570\u636e\uff09\u3001\u5bf9\u541e\u5410\u91cf\u65e0\u8981\u6c42\u3001\u5bf9\u54cd\u5e94\u65f6\u95f4\u4e0d\u654f\u611f\uff1b\u6d41\u5a92\u4f53\u3001\u89c6\u9891\u901a\u8bdd\u3001\u6e38\u620f\u7b49\u5e94\u7528\uff0c\u5219\u53ef\u4ee5\u5bb9\u5fcd\u4e22\u5305\u3001\u4f46\u5bf9\u5e26\u5bbd\u6709\u8981\u6c42\u3001\u5bf9\u54cd\u5e94\u65f6\u95f4\u654f\u611f\u3002"),(0,s.kt)("p",null,"TCP \u4e3a\u5e94\u7528\u5c42\u63d0\u4f9b\u4e86\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u6570\u636e\u4f20\u8f93\u670d\u52a1\uff0c\u8fd8\u5177\u6709\u62e5\u585e\u63a7\u5236\u673a\u5236\uff1bUDP \u662f\u4e00\u79cd\u201c\u4ec5\u63d0\u4f9b\u6700\u5c0f\u670d\u52a1\u201d\u7684\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u5b83\u4e0d\u63d0\u4f9b\u53ef\u9760\u6570\u636e\u4f20\u8f93\u670d\u52a1\uff0c\u4e0d\u4fdd\u8bc1 message \u80fd\u5230\u8fbe\u3001\u80fd\u6709\u5e8f\u5230\u8fbe\u63a5\u6536\u8fdb\u7a0b\u3002"),(0,s.kt)("p",null,"TCP \u548c UDP \u672c\u8eab\u90fd\u6ca1\u6709\u63d0\u4f9b\u5b89\u5168\u6027\u76f8\u5173\u7684\u670d\u52a1\uff0c\u4f46 TCP ",(0,s.kt)("strong",{parentName:"p"},"\u5728\u5e94\u7528\u5c42"),"\u53ef\u4ee5\u7528 SSL \u6765\u63d0\u4f9b\u5b89\u5168\u670d\u52a1\u3002\u9664\u4e86\u53ef\u9760\u6570\u636e\u4f20\u8f93\u548c\u5b89\u5168\u6027\uff0c\u76ee\u524d\u7684\u56e0\u7279\u7f51\u8fd0\u8f93\u534f\u8bae\u5e76\u4e0d\u80fd\u63d0\u4f9b\u541e\u5410\u91cf\u548c\u65f6\u6548\u6027\u7684\u4fdd\u8bc1\u3002"),(0,s.kt)("h3",{id:"the-web-and-http"},"The Web and HTTP"),(0,s.kt)("p",null,"The ",(0,s.kt)("strong",{parentName:"p"},"HyperText Transfer Protocol (HTTP)"),", the Web\u2019s application-layer protocol, is at the heart of the Web."),(0,s.kt)("p",null,"A Web page (also called a document) consists of objects. An ",(0,s.kt)("strong",{parentName:"p"},"object")," is simply a file\u2014such as an HTML file, a JPEG image, a Javascrpt file, or a video clip\u2014that is addressable by a single URL. Most Web pages consist of a base HTML file and several referenced objects."),(0,s.kt)("p",null,"HTTP defines how Web clients (Web browsers) request Web pages from Web servers (e.g. Apache) and how servers transfer Web pages to clients."),(0,s.kt)("p",null,"It is important to note that the server sends requested files to clients without storing any state information about the client. If a particular client asks for the same object twice in a period of a few seconds, the server does not respond by saying that it just served the object to the client; instead, the server resends the object, as it has completely forgotten what it did earlier. Because an HTTP server maintains no information about the clients, HTTP is said to be a stateless protocol."),(0,s.kt)("p",null,"\u4e3a\u4ec0\u4e48\u8bf4 HTTP \u662f\u65e0\u72b6\u6001\u7684\uff1f\u539f\u56e0\u662f HTTP \u534f\u8bae\u4e0d\u8981\u6c42\u670d\u52a1\u5668\u4fdd\u5b58\u7528\u6237\u7684\u4efb\u4f55\u4fe1\u606f\u548c\u72b6\u6001\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\uff0c\u670d\u52a1\u7aef\u90fd\u628a\u5b83\u5f53\u4f5c\u65b0\u7684\u3001\u964c\u751f\u7684\u8bf7\u6c42\u6765\u5904\u7406\u3002\u867d\u7136\u534f\u8bae\u672c\u8eab\u65e0\u72b6\u6001\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 cookie \u6765\u8ffd\u8e2a\u7528\u6237\u7684\u4fe1\u606f\u3002"),(0,s.kt)("p",null,"HTTP \u5728\u9ed8\u8ba4\u65b9\u5f0f\u4e0b\u4f7f\u7528\u6301\u7eed\u8fde\u63a5 (persistent connection)\uff0c\u610f\u5473\u7740\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5728\u4e00\u4e2a\u957f\u7684\u65f6\u95f4\u8303\u56f4\u5185\u901a\u4fe1\u65f6\uff0c\u5ba2\u6237\u7aef\u4e00\u7cfb\u5217\u7684\u8bf7\u6c42\u53ca\u670d\u52a1\u7aef\u7684\u54cd\u5e94\uff0c\u90fd\u7ecf\u540c\u4e00\u4e2a TCP \u8fde\u63a5\u53d1\u9001\u3002"),(0,s.kt)("p",null,"\u975e\u6301\u7eed\u8fde\u63a5\u6709\u8fd9\u6837\u4e00\u4e9b\u7f3a\u70b9\uff1a\u7b2c\u4e00\uff0c\u5fc5\u987b\u4e3a\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u7684\u8bf7\u6c42\u5efa\u7acb\u548c\u7ef4\u62a4\u4e00\u4e2a\u5168\u65b0\u7684 TCP \u8fde\u63a5\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e2d\u90fd\u8981\u5206\u914d TCP \u7684\u7f13\u51b2\u533a\u3001\u4fdd\u6301 TCP \u7684\u53d8\u91cf\uff1b\u7b2c\u4e8c\uff0c\u6bcf\u8bf7\u6c42\u4e00\u4e2a\u5bf9\u8c61\u90fd\u8981\u7ecf\u5386 2 RTTs\uff0c\u5373 1 RTT \u7528\u4e8e\u521b\u5efa TCP \u8fde\u63a5\uff0c1 RTT \u7528\u4e8e\u8bf7\u6c42\u548c\u63a5\u6536\u5bf9\u8c61\u3002"),(0,s.kt)("p",null,"With HTTP/1.1 persistent connections, the server leaves the TCP connection open after sending a response. Subsequent requests and responses between the same client and server can be sent over the same connection. In particular, an entire Web page (in the example above, the base HTML file and the 10 images), moreover, multiple Web pages residing on the same server can be sent from the server to the same client over a single persistent TCP connection. These requests for objects can be made back-to-back, without waiting for replies to pending requests (called ",(0,s.kt)("strong",{parentName:"p"},"pipelining"),"). Typically, the HTTP server closes a connection when it isn\u2019t used for a certain time (a configurable timeout interval). When the server receives the back-to-back requests, it sends the objects back-to-back.",(0,s.kt)("strong",{parentName:"p"},"\uff08\u5927\u90e8\u5206\u6d4f\u89c8\u5668\u7981\u7528\u4e86 pipelining\uff0c\u8be6\u89c1\u4e0b\u6587\uff09")),(0,s.kt)("p",null,"Suppose within your Web browser you click on a link to obtain a Web page. Further suppose that the Web page associated with the link contains exactly one object, consisting of a small amount of HTML text. Assuming zero transmission time of the object, how much time elapses from when the client clicks on the link until the client receives the object? -- 1RTT elapses to set up the TCP connection and another 1RTT elapses to request and receive the small object."),(0,s.kt)("p",null,"Suppose the HTML file references 8 very small objects on the same server,"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Non-persistent HTTP with no parallel TCP connections: 2RTT + 8","*","2RTT"),(0,s.kt)("li",{parentName:"ul"},"Non-persistent HTTP with the browser configured for 6 parallel connections: 2RTT + 2","*","2RTT"),(0,s.kt)("li",{parentName:"ul"},"Persistent connection with pipelining: 2RTT + RTT"),(0,s.kt)("li",{parentName:"ul"},"Persistent connection without pipelining, without parallel connections: 2RTT + 8","*","RTT")),(0,s.kt)("h3",{id:"http-message-format"},"HTTP Message Format"),(0,s.kt)("p",null,"There are two types of HTTP messages, request messages and response messages."),(0,s.kt)("h4",{id:"request-message"},"Request Message"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"GET /cs453/index.html HTTP/1.1\nHost: gaia.cs.umass.edu\nUser-agent: Mozilla/5.0\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: zip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive: 300\nConnection: keep-alive\n")),(0,s.kt)("p",null,"The first line of an HTTP request message is called the ",(0,s.kt)("strong",{parentName:"p"},"request line"),". The request line has three fields: the method field, the URL field, and the HTTP version field. The subsequent lines are called the ",(0,s.kt)("strong",{parentName:"p"},"header lines"),"."),(0,s.kt)("p",null,"The header line ",(0,s.kt)("inlineCode",{parentName:"p"},"Host: gaia.cs.umass.edu")," specifies the host on which the object resides. You might think that this header line is unnecessary, as there is already a TCP connection in place to the host. But, as we\u2019ll see in Section 2.2.5, the information provided by the host header line is required by Web proxy caches."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Accept-language:")," header is just one of many content negotiation headers available in HTTP."),(0,s.kt)("p",null,"The browser is requesting a persistent connection, as indicated by the ",(0,s.kt)("inlineCode",{parentName:"p"},"Connection: keep-alive"),"."),(0,s.kt)("p",null,"\u4e0b\u9762\u662f\u8bf7\u6c42\u62a5\u6587\u7684\u901a\u7528\u683c\u5f0f\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(96359).Z,width:"649",height:"391"})),(0,s.kt)("p",null,"After the header lines (and the additional carriage return \u56de\u8f66 and line feed \u6362\u884c) there is an \u201centity body.\u201d The entity body is empty with the GET method, but is used with the POST method. If the value of the method field is POST, then the entity body contains what the user entered into the form fields."),(0,s.kt)("p",null,"A request generated with a form does not necessarily use the POST method. Instead, HTML forms often use the GET method and include the inputted data (in the form fields) in the requested URL."),(0,s.kt)("h4",{id:"response-message"},"Response Message"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nDate: Tue, 18 Aug 2015 15:44:04 GMT\nServer: Apache/2.2.3 (CentOS)\nLast-Modified: Tue, 18 Aug 2015 15:11:03 GMT\nContent-Length: 6821\nETag: "526c3-f22-a88a4c80"\nAccept-Ranges: bytes\nKeep-Alive: timeout=max=100\nConnection: Keep-Alive\nContent-Type: text/html; charset=ISO-8859-1\n(data data data data data ...)\n')),(0,s.kt)("p",null,"It has three sections: an initial ",(0,s.kt)("strong",{parentName:"p"},"status line"),", ",(0,s.kt)("strong",{parentName:"p"},"header lines"),", and then the ",(0,s.kt)("strong",{parentName:"p"},"entity body"),"."),(0,s.kt)("p",null,"The status line has three fields: the protocol version field, a status code, and a corresponding status message."),(0,s.kt)("p",null,"\u5e38\u89c1\u7684\u72b6\u6001\u7801\u5305\u62ec\uff1a"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Status code"),(0,s.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"200 OK"),(0,s.kt)("td",{parentName:"tr",align:null},"\u8bf7\u6c42\u6210\u529f")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"301 Moved Permanently"),(0,s.kt)("td",{parentName:"tr",align:null},"\u8bf7\u6c42\u7684\u5bf9\u8c61\u88ab\u6c38\u4e45\u8f6c\u79fb\u4e86\uff0cClient \u5c06\u81ea\u52a8\u83b7\u53d6\u65b0 URL\uff08\u4f4d\u4e8e\u54cd\u5e94\u62a5\u6587\u7684 ",(0,s.kt)("inlineCode",{parentName:"td"},"Location:")," header line\uff09")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"400 Bad Request"),(0,s.kt)("td",{parentName:"tr",align:null},"\u4e00\u4e2a\u901a\u7528\u9519\u8bef\u7801\uff0c\u8868\u793a\u8be5\u8bf7\u6c42\u4e0d\u80fd\u88ab\u670d\u52a1\u5668\u7406\u89e3")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"404 Not Found"),(0,s.kt)("td",{parentName:"tr",align:null},"\u88ab\u8bf7\u6c42\u7684\u6587\u6863\u4e0d\u5b58\u5728\u670d\u52a1\u5668\u4e0a")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"505 HTTP Version Not Supported"),(0,s.kt)("td",{parentName:"tr",align:null},"\u670d\u52a1\u5668\u4e0d\u652f\u6301\u8bf7\u6c42\u62a5\u6587\u4f7f\u7528\u7684 HTTP \u534f\u8bae\u7248\u672c")))),(0,s.kt)("p",null,"For the header lines:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"Date:")," header line indicates the time and date when the HTTP response was created and sent by the server."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"Last-Modified:")," header line indicates the time and date when the object was created or last modified. It is critical for object caching, both in the local client and in proxy servers."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"Content-Length:")," header line indicates the number of bytes in the object being sent."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"Content-Type:")," header line indicates that the object in the entity body is HTML text. (The object type is officially indicated by the ",(0,s.kt)("inlineCode",{parentName:"li"},"Content-Type:")," header and not by the file extension.)"),(0,s.kt)("li",{parentName:"ul"},"Either the client or the server can indicate to the other that it is going to close the persistent connection. It does so by including the header line ",(0,s.kt)("inlineCode",{parentName:"li"},"Connection: close")," of the http request/reply.")),(0,s.kt)("p",null,"HTTP \u89c4\u8303\u5b9a\u4e49\u4e86\u8bb8\u591a\u7684 header lines\uff0cheader lines \u53ef\u4ee5\u88ab\u6d4f\u89c8\u5668\u3001\u670d\u52a1\u5668\u3001\u4ee3\u7406\u670d\u52a1\u5668\u63d2\u5165\u3002\u8fd9\u91cc\u63d0\u5230\u7684\u53ea\u662f\u4e00\u5c0f\u90e8\u5206\u3002"),(0,s.kt)("p",null,"The entity body is the meat of the message\u2014it contains the requested object itself (represented by data ...)."),(0,s.kt)("p",null,"\u4e0b\u9762\u662f\u54cd\u5e94\u62a5\u6587\u7684\u901a\u7528\u683c\u5f0f\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(1089).Z,width:"653",height:"385"})),(0,s.kt)("h3",{id:"cookie"},"Cookie"),(0,s.kt)("p",null,"We mentioned above that an HTTP server is stateless. This simplifies server design and has permitted engineers to develop high-performance Web servers that can handle thousands of simultaneous TCP connections. However, it is often desirable for a Web site to identify users, because it wants to serve content as a function of the user identity. For this purpose, HTTP uses cookies. Cookies allow sites to keep track of users."),(0,s.kt)("p",null,"Cookie technology has four components:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"A cookie header line in the HTTP response message;"),(0,s.kt)("li",{parentName:"ol"},"A cookie header line in the HTTP request message;"),(0,s.kt)("li",{parentName:"ol"},"A cookie file kept on the user\u2019s end system and managed by the user\u2019s browser;"),(0,s.kt)("li",{parentName:"ol"},"A back-end database at the Web site.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(14630).Z,width:"845",height:"802"})),(0,s.kt)("p",null,"When Susan\u2019s browser receives the HTTP response message, it sees the ",(0,s.kt)("inlineCode",{parentName:"p"},"Set-cookie:")," header. The browser then appends a line to the special cookie file that it manages. This line includes the hostname of the server and the identification number in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Set-cookie:")," header."),(0,s.kt)("p",null,"We see that cookies can be used to identify a user. The first time a user visits a site, the user can provide a user identification. During the subsequent sessions, the browser passes a cookie header to the server, thereby identifying the user to the server. Cookies can thus be used to create a user session layer on top of stateless HTTP."),(0,s.kt)("h3",{id:"web-caching-and-the-conditional-get"},"Web Caching and The Conditional GET"),(0,s.kt)("p",null,"A ",(0,s.kt)("strong",{parentName:"p"},"Web cache"),"\u2014also called a ",(0,s.kt)("strong",{parentName:"p"},"proxy server"),"\u2014is a network entity that satisfies HTTP requests on the behalf of an origin Web server."),(0,s.kt)("p",null,"Web \u7f13\u5b58\u5668\u6709\u81ea\u5df1\u7684\u78c1\u76d8\u5b58\u50a8\u7a7a\u95f4\uff0c\u4fdd\u5b58\u6700\u8fd1\u8bf7\u6c42\u8fc7\u7684\u5bf9\u8c61\u7684\u526f\u672c\u3002\u53ef\u4ee5\u914d\u7f6e\u7528\u6237\u7684\u6d4f\u89c8\u5668\uff0c\u4f7f\u5f97\u7528\u6237\u7684\u6240\u6709 HTTP \u8bf7\u6c42\u9996\u5148\u6307\u5411 Web \u7f13\u5b58\u5668\u3002\u6ce8\u610f Web cache \u65e2\u662f\u5ba2\u6237\u53c8\u662f\u670d\u52a1\u5668\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(13606).Z,width:"574",height:"357"})),(0,s.kt)("p",null,"Web \u7f13\u5b58\u5668\u901a\u5e38\u7531 ISP \u8d2d\u4e70\u5e76\u5b89\u88c5\u3002\u4f8b\u5982\uff0c\u4e00\u6240\u5927\u5b66\u53ef\u80fd\u5728\u5b83\u7684\u6821\u56ed\u7f51\u5b89\u88c5 Web cache\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u6821\u56ed\u7f51\u4e0a\u7684\u7528\u6237\u6d4f\u89c8\u5668\u914d\u7f6e\u4e3a\u6307\u5411\u5b83\u3002"),(0,s.kt)("p",null,"\u5728\u56e0\u7279\u7f51\u4e0a\u90e8\u7f72 Web cache \u6709\u4e24\u4e2a\u539f\u56e0\u3002\u9996\u5148\uff0cWeb cache \u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u5ba2\u6237\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u95f4\uff1b\u5176\u6b21\uff0cWeb \u7f13\u5b58\u5668\u80fd\u591f\u5927\u5927\u51cf\u5c11\u4e00\u4e2a\u673a\u6784\u7684\u63a5\u5165\u94fe\u8def\u5230\u56e0\u7279\u7f51\u7684\u901a\u4fe1\u91cf\uff0c\u901a\u8fc7\u51cf\u5c11\u901a\u4fe1\u91cf\uff0c\u8be5\u673a\u6784\u5c31\u4e0d\u5fc5\u6025\u4e8e\u589e\u52a0\u5e26\u5bbd\uff0c\u56e0\u6b64\u964d\u4f4e\u4e86\u8d39\u7528\u3002\u6b64\u5916\uff0cWeb \u7f13\u5b58\u5668\u80fd\u4ece\u6574\u4f53\u4e0a\u5927\u5927\u51cf\u4f4e\u56e0\u7279\u7f51\u4e0a\u7684 Web \u6d41\u91cf\uff0c\u4ece\u800c\u6539\u5584\u4e86\u6240\u6709\u5e94\u7528\u7684\u6027\u80fd\u3002"),(0,s.kt)("p",null,"\u901a\u8fc7\u4f7f\u7528\u5185\u5bb9\u5206\u53d1\u7f51\u7edc (Content Distribution Network, CDN)\uff0cWeb cache \u6b63\u5728\u56e0\u7279\u7f51\u4e2d\u53d1\u6325\u7740\u8d8a\u6765\u8d8a\u91cd\u8981\u7684\u4f5c\u7528\u3002CDN \u516c\u53f8\u5728\u56e0\u7279\u7f51\u4e0a\u5b89\u88c5\u4e86\u8bb8\u591a\u5730\u7406\u4e0a\u5206\u6563\u7684\u7f13\u5b58\u5668\uff0c\u4f7f\u5927\u91cf\u6d41\u91cf\u5b9e\u73b0\u4e86\u672c\u5730\u5316\u3002"),(0,s.kt)("p",null,"Web cache \u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u5bf9\u5ba2\u6237\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u95f4\uff0c\u4f46\u4e5f\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff0c\u5373\u5b58\u653e\u5728 Web cache \u4e2d\u7684\u5bf9\u8c61\u526f\u672c\u53ef\u80fd\u662f\u9648\u65e7\u7684\u3002HTTP \u534f\u8bae\u6709\u4e00\u79cd\u673a\u5236\uff0c\u5141\u8bb8 Web cache \u8bc1\u5b9e\u5b83\u7684\u5bf9\u8c61\u662f\u6700\u65b0\u7684\uff0c\u5373 conditional GET\u3002\u5982\u679c\u8bf7\u6c42\u62a5\u6587\u4f7f\u7528 GET \u65b9\u6cd5\u3001\u5e76\u4e14\u8bf7\u6c42\u62a5\u6587\u4e2d\u5305\u542b\u4e00\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"If-Modified-Since:")," \u7684 header line\uff0c\u90a3\u4e48\uff0c\u8fd9\u4e2a HTTP \u8bf7\u6c42\u62a5\u6587\u5c31\u662f\u4e00\u4e2a\u6761\u4ef6 GET \u8bf7\u6c42\u62a5\u6587\u3002"),(0,s.kt)("h3",{id:"http2"},"HTTP/2"),(0,s.kt)("p",null,"HTTP/2 ","[RFC 7540]",", standardized in 2015, was the first new version of HTTP since HTTP/1.1, which was standardized in 1997."),(0,s.kt)("p",null,"The primary goals for HTTP/2 are to reduce perceived latency by enabling request and response multiplexing over a single TCP connection, provide request prioritization and server push, and provide efficient compression of HTTP header fields."),(0,s.kt)("h4",{id:"hol-blocking-and-http2-framing"},"HOL Blocking and HTTP/2 Framing"),(0,s.kt)("p",null,"Developers of Web browsers discovered that sending all the objects in a Web page over a single TCP connection has a ",(0,s.kt)("strong",{parentName:"p"},"Head of Line (HOL) blocking")," problem. To understand HOL blocking, consider a Web page that includes an HTML base page, a large video clip near the top of Web page, and many small objects below the video. Using a single TCP connection, the video clip will take a long time to pass through the link, while the small objects are delayed as they wait behind the video clip; that is, the video clip at the head of the line blocks the small objects behind it."),(0,s.kt)("p",null,"HTTP/1.1 browsers typically work around this problem by opening multiple parallel TCP connections, thereby having objects in the same web page sent in parallel to the browser. This way, the small objects can arrive at and be rendered in the browser much faster, thereby reducing user-perceived delay."),(0,s.kt)("p",null,"TCP congestion control also provides browsers an unintended incentive \u52a8\u673a to use multiple parallel TCP connections rather than a single persistent connection. Very roughly speaking, TCP congestion control aims to give each TCP connection sharing a bottleneck link an equal share of the available bandwidth of that link. By opening multiple parallel TCP connections to transport a single Web page, the browser can \u201ccheat\u201d and grab a larger portion of the link bandwidth. Many HTTP/1.1 browsers open up to six parallel TCP connections not only to circumvent HOL blocking but also to obtain more bandwidth."),(0,s.kt)("p",null,"One of the primary goals of HTTP/2 is to get rid of (or at least reduce the number of) parallel TCP connections for transporting a single Web page. This not only reduces the number of sockets that need to be open and maintained at servers, but also allows TCP congestion control to operate as intended."),(0,s.kt)("p",null,"The HTTP/2 solution for HOL blocking is to break each message into small ",(0,s.kt)("strong",{parentName:"p"},"frames"),", and interleave the request and response messages on the same TCP connection. The HTTP/2 framing mechanism can significantly decrease user-perceived delay."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(65706).Z,width:"2205",height:"1384"})),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://developer.apple.com/videos/play/wwdc2015/711/"},"WWDC 2015 - Networking with NSURLSession"))),(0,s.kt)("p",null,"The ability to break down an HTTP message into independent frames, interleave them, and then reassemble them on the other end is the single most important enhancement of HTTP/2. The framing is done by the framing sub-layer of the HTTP/2 protocol. When a server wants to send an HTTP response, the response is processed by the framing sub-layer, where it is broken down into frames. The header field of the response becomes one frame, and the body of the message is broken down into one for more additional frames. The frames of the response are then interleaved by the framing sub-layer in the server with the frames of other responses and sent over the single persistent TCP connection. As the frames arrive at the client, they are first reassembled into the original response messages at the framing sub-layer and then processed by the browser as usual. Similarly, a client\u2019s HTTP requests are broken into frames and interleaved."),(0,s.kt)("p",null,"In addition to breaking down each HTTP message into independent frames, the framing sublayer also binary encodes the frames. Binary protocols are more efficient to parse, lead to slightly smaller frames, and are less error-prone."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://community.akamai.com/customers/s/article/How-does-HTTP-2-solve-the-Head-of-Line-blocking-HOL-issue?language=en_US"},"How does HTTP/2 solve the Head of Line blocking (HOL) issue"))),(0,s.kt)("p",null,'HTTP/1.1 introduced a feature called "Pipelining" which allowed a client sending several HTTP requests back-to-back over the same TCP connection. However HTTP/1.1 still required the responses to arrive in order so it didn\'t really solved the HOL issue and as of today it is not widely adopted. ',(0,s.kt)("strong",{parentName:"p"},"In fact, it\u2019s disabled on most popular desktop web browsers"),"."),(0,s.kt)("p",null,"HTTP/2 solves the HOL issue by means of multiplexing requests over the same TCP connection, so a client can make multiple requests to a server without having to wait for the previous ones to complete as the responses can arrive in any order."),(0,s.kt)("p",null,"HTTP/2 does however still suffer from another type of HOL, as it runs over a TCP connection; and due to TCP's congestion control, one lost packet in a TCP stream makes all streams wait until that package is re-transmitted and received. This HOL is being addressed with the QUIC protocol."),(0,s.kt)("h4",{id:"header-compression-hpack"},"Header compression (HPACK)"),(0,s.kt)("p",null,"HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2."),(0,s.kt)("p",null,"HPACK header compression is based on two tables, a static table and a dynamic table. The static table contains the most used HTTP headers and is unchangeable. The headers, which are not included in the static table, can be added to the dynamic table. The headers from the tables can be referenced by index."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(94692).Z,width:"2177",height:"1326"})),(0,s.kt)("p",null,"In this example, we need three bytes for the first three headers, plus an additional byte, which tells that we want to add the authority header to the dynamic table and the value of the authority with its length.\nAnd this is what is going to be sent to the server plus additional overhead for the header frame."),(0,s.kt)("p",null,"Now with the second request,\uff08\u5f53\u6211\u4eec\u518d\u6b21\u8bf7\u6c42\u65f6\uff09HTTP/1.1 would send the same headers over and over again (textual protocol overhead). But you see that, in HTTP/2 case, the authority header goes in the dynamic table, we can reference all the headers using the static and the dynamic table. We are using only one byte for each header."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(16156).Z,width:"2196",height:"1322"})),(0,s.kt)("p",null,"It is a huge savings of the bandwidth and it's remarkable how few bytes are needed to encode a request or response header in HTTP/2."),(0,s.kt)("h4",{id:"response-message-prioritization"},"Response Message Prioritization"),(0,s.kt)("p",null,"Message prioritization allows developers to customize the relative priority of requests to better optimize application performance. When a client sends concurrent requests to a server, it can prioritize the responses it is requesting by assigning a weight between 1 and 256 to each message. The higher number indicates higher priority. In addition to this, the client also states each message\u2019s dependency on other messages by specifying the ID of the message on which it depends."),(0,s.kt)("h4",{id:"server-pushing"},"Server Pushing"),(0,s.kt)("p",null,"Another feature of HTTP/2 is the ability for a server to send multiple responses for a single client request. That is, in addition to the response to the original request, the server can push additional objects to the client, without the client having to request each one. This is possible since the HTML base page indicates the objects that will be needed to fully render the Web page. So instead of waiting for the HTTP requests for these objects, the server can analyze the HTML page, identify the objects that are needed, and send them to the client before receiving explicit requests for these objects. Server push eliminates the extra latency due to waiting for the requests."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(37411).Z,width:"2300",height:"1374"})),(0,s.kt)("h3",{id:"http3"},"HTTP/3"),(0,s.kt)("p",null,"Both HTTP/1.1 and HTTP/2 use TCP as their transport. QUIC, is a new protocol that is implemented in the application layer over the bare-bones UDP protocol. QUIC has several features that are desirable for HTTP, such as message multiplexing (interleaving), per-stream flow control, and low-latency connection establishment. QUIC is implemented over UDP where each stream is independent so that a lost packet only halts the particular stream to which the lost packet belongs, while the other streams can go on."),(0,s.kt)("p",null,"HTTP/3 is yet a new HTTP protocol that is designed to operate over QUIC. Many of the HTTP/2 features (such as message interleaving) are subsumed by QUIC, allowing for a simpler, streamlined design for HTTP/3."),(0,s.kt)("p",null,"HTTP/3 has TLS 1.3 security built right in and provides all the same multiplexed stream support as HTTP/2, but with further reductions to head-of-line blocking so that losses of any individual request or response won't hold up other potentially unrelated messages."),(0,s.kt)("p",null,"HTTP/3 also has higher fidelity information to provide improved congestion control and recovery of lost packets."),(0,s.kt)("p",null,"HTTP/3 also brings built-in mobility support such that network transitions don't cause in-progress operations to fail. They can instead seamlessly continue on the new network without interruption."),(0,s.kt)("h3",{id:"email"},"Email"),(0,s.kt)("p",null,"Suppose Alice, with a Web-based e-mail account (such as Hotmail or Gmail), sends a message to Bob. The message is first sent from Alice\u2019s browser to her mail server over ",(0,s.kt)("strong",{parentName:"p"},"HTTP(S)"),". Alice\u2019s mail server then sends the message to Bob\u2019s mail server over ",(0,s.kt)("strong",{parentName:"p"},"SMTP"),". Bob then transfers the message from his mail server to his host over ",(0,s.kt)("strong",{parentName:"p"},"POP3"),"."),(0,s.kt)("h3",{id:"dns"},"DNS"),(0,s.kt)("p",null,"\u4e00\u4e2a IP \u5730\u5740\u7531 4 \u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u4f8b\u5982 ",(0,s.kt)("inlineCode",{parentName:"p"},"121.7.106.83"),"\uff0c\u6bcf\u4e2a\u5b57\u8282\u8868\u793a 0-255 \u7684\u5341\u8fdb\u5236\u6570\u5b57\u3002\u5728\u56e0\u7279\u7f51\u4e2d\uff0cHost name \u548c IP \u5730\u5740\u90fd\u53ef\u4ee5\u7528\u6765\u8bc6\u522b\u4e3b\u673a\u3002\u4eba\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u4e60\u60ef\u8f93\u5165 host name\uff0c\u800c\u8def\u7531\u5668\u5219\u559c\u6b22\u5b9a\u957f\u7684\u3001\u6709\u5c42\u6b21\u7ed3\u6784\u7684 IP \u5730\u5740\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6709\u4e00\u79cd\u80fd\u8fdb\u884c\u4e3b\u673a\u540d\u5230 IP \u5730\u5740\u8f6c\u6362\u7684\u76ee\u5f55\u670d\u52a1\uff0c\u8fd9\u5c31\u662f\u57df\u540d\u7cfb\u7edf (Domain Name System, DNS) \u7684\u4e3b\u8981\u4efb\u52a1\u3002"),(0,s.kt)("p",null,"DNS \u6709\u4e24\u5c42\u542b\u4e49\uff1a1","."," \u4e00\u4e2a\u7531\u5206\u5c42\u7684 DNS \u670d\u52a1\u5668\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\uff1b2","."," \u4e00\u4e2a\u4f7f\u7aef\u7cfb\u7edf\u80fd\u591f\u67e5\u8be2\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u7684\u5e94\u7528\u5c42\u534f\u8bae\u3002DNS \u534f\u8bae\u8fd0\u884c\u5728 UDP \u4e4b\u4e0a\uff0c\u4f7f\u7528 53 \u53f7\u7aef\u53e3\u3002"),(0,s.kt)("p",null,"DNS \u8bf7\u6c42\u4e3a\u56e0\u7279\u7f51\u5e94\u7528\u5e26\u6765\u4e86\u989d\u5916\u7684\u65f6\u5ef6\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u5927\u90e8\u5206 IP \u5730\u5740\u901a\u5e38\u5c31\u7f13\u5b58\u5728\u67d0\u4e2a\u201c\u9644\u8fd1\u7684\u201d DNS \u670d\u52a1\u5668\u4e2d\u3002"),(0,s.kt)("p",null,"\u9664\u4e86\u4e3b\u673a\u540d\u5230 IP \u5730\u5740\u7684\u8f6c\u6362\u4e4b\u5916\uff0cDNS \u8fd8\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u670d\u52a1\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u4e3b\u673a\u522b\u540d (host aliasing)\u3002\u4f8b\u5982 ",(0,s.kt)("inlineCode",{parentName:"li"},"relay1.west-coast.enterprise.com")," \u79f0\u4e3a\u89c4\u8303\u4e3b\u673a\u540d (cannonical hostname)\uff0c\u5b83\u6709\u4e24\u4e2a\u522b\u540d ",(0,s.kt)("inlineCode",{parentName:"li"},"enterprise.com")," \u548c ",(0,s.kt)("inlineCode",{parentName:"li"},"www.enterprise.com"),"\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 DNS \u670d\u52a1\u6765\u83b7\u5f97\u4e3b\u673a\u522b\u540d\u5bf9\u5e94\u7684\u89c4\u8303\u4e3b\u673a\u540d\u4ee5\u53ca IP \u5730\u5740\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u90ae\u4ef6\u670d\u52a1\u5668\u522b\u540d (mail server aliasing)\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u8d1f\u8f7d\u5206\u914d (load distribution)\u3002\u7e41\u5fd9\u7684\u7ad9\u70b9\u5982 ",(0,s.kt)("inlineCode",{parentName:"li"},"cnn.com")," \u88ab\u5206\u5e03\u5728\u591a\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u6bcf\u4e2a\u90fd\u62e5\u6709\u4e0d\u540c\u7684 IP \u5730\u5740\uff0c\u591a\u4e2a IP \u5730\u5740\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u89c4\u8303\u4e3b\u673a\u540d\u3002DNS \u5728\u6240\u6709\u8fd9\u4e9b\u670d\u52a1\u5668\u4e4b\u95f4\u8fdb\u884c\u8d1f\u8f7d\u5206\u914d\u3002")),(0,s.kt)("p",null,"DNS \u662f\u4e00\u4e2a\u5728\u56e0\u7279\u7f51\u4e0a\u5b9e\u73b0\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u7684\u7cbe\u5f69\u8303\u4f8b\u3002\u5927\u91cf\u7684 DNS \u670d\u52a1\u5668\u4ee5\u5c42\u6b21\u65b9\u5f0f\u7ec4\u7ec7\u3001\u5206\u5e03\u5728\u5168\u4e16\u754c\u8303\u56f4\u5185\u3002\u5927\u81f4\u4e0a\uff0c\u6709 3 \u79cd\u7c7b\u578b\u7684 DNS \u670d\u52a1\u5668\u3002"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Root DNS servers. There are over 400 root name servers scattered all over the world. Root name servers provide the IP addresses of the TLD servers."),(0,s.kt)("li",{parentName:"ul"},"Top-level domain (TLD) servers. For each of the top-level domains such as com, org, net, edu, and gov, and all of the country top-level domains such as uk, fr, ca, and jp \u2014 there is TLD server (or server cluster). TLD servers provide the IP addresses for authoritative DNS servers."),(0,s.kt)("li",{parentName:"ul"},"Authoritative DNS servers. Every organization with publicly accessible hosts on the Internet must provide publicly accessible DNS records. An organization can choose to implement its own authoritative DNS server to hold these records; alternatively, the organization can pay to have these records stored in an authoritative DNS server of some service provider.")),(0,s.kt)("p",null,"The root, TLD, and authoritative DNS servers all belong to the hierarchy of DNS servers. There is another important type of DNS server called the ",(0,s.kt)("strong",{parentName:"p"},"local DNS server"),". Each ISP\u2014such as a residential ISP or an institutional ISP\u2014has a local DNS server."),(0,s.kt)("p",null,"When a host connects to an ISP, the ISP provides the host with the IP addresses of one or more of its local DNS servers (typically through DHCP). When a host makes a DNS query, the query is sent to the local DNS server, which acts a proxy, forwarding the query into the DNS server hierarchy."),(0,s.kt)("p",null,"\u5982\u4e0b\u56fe\u6240\u793a\uff0cClient \u60f3\u8981\u8bbf\u95ee\u4e3b\u673a ",(0,s.kt)("inlineCode",{parentName:"p"},"gaia.cs.umass.edu"),"\uff1a"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Client sends a DNS query message to its local DNS server."),(0,s.kt)("li",{parentName:"ol"},"The local DNS server forwards the query message to a root DNS server."),(0,s.kt)("li",{parentName:"ol"},"The root DNS server takes note of the ",(0,s.kt)("inlineCode",{parentName:"li"},"edu")," suffix and returns a list of IP addresses for TLD servers responsible for ",(0,s.kt)("inlineCode",{parentName:"li"},"edu"),"."),(0,s.kt)("li",{parentName:"ol"},"The local DNS server then resends the query message to one of these TLD servers."),(0,s.kt)("li",{parentName:"ol"},"The TLD server takes note of the ",(0,s.kt)("inlineCode",{parentName:"li"},"umass.edu")," suffix and responds with the IP address of the authoritative DNS server for the University of Massachusetts, namely, ",(0,s.kt)("inlineCode",{parentName:"li"},"dns.umass.edu"),"."),(0,s.kt)("li",{parentName:"ol"},"Finally, the local DNS server resends the query message directly to ",(0,s.kt)("inlineCode",{parentName:"li"},"dns.umass.edu"),"."),(0,s.kt)("li",{parentName:"ol"},"Authoritative DNS server responds with the IP address of ",(0,s.kt)("inlineCode",{parentName:"li"},"gaia.cs.umass.edu"),"."),(0,s.kt)("li",{parentName:"ol"},"Local DNS server responds with the IP address of ",(0,s.kt)("inlineCode",{parentName:"li"},"gaia.cs.umass.edu")," to client.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img-40",src:a(84320).Z,width:"662",height:"1005"})),(0,s.kt)("p",null,"\u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u6539\u5584\u65f6\u5ef6\u3001\u51cf\u5c11\u56e0\u7279\u7f51\u4e0a\u5230\u5904\u4f20\u8f93\u7684 DNS \u62a5\u6587\u6570\u91cf\uff0cDNS \u5e7f\u6cdb\u4f7f\u7528\u4e86\u7f13\u5b58\u6280\u672f\u3002\u7f13\u5b58\u539f\u7406\u5341\u5206\u7b80\u5355\uff0c\u5728\u4e00\u4e2a\u8bf7\u6c42\u94fe\u4e2d\uff0c\u5f53\u67d0 DNS \u670d\u52a1\u5668\u63a5\u6536\u4e00\u4e2a\u54cd\u5e94\u540e\uff0c\u5b83\u80fd\u5c06\u6620\u5c04\u7f13\u5b58\u5728\u670d\u52a1\u5668\u672c\u5730\u5b58\u50a8\u4e2d\u3002\u5f53\u65b0\u7684\u3001\u5bf9\u76f8\u540c\u4e3b\u673a\u540d\u7684\u67e5\u8be2\u5230\u8fbe\u65f6\uff0c\u5c31\u80fd\u76f4\u63a5\u63d0\u4f9b IP \u5730\u5740\u3002\u7531\u4e8e\u4e3b\u673a\u540d\u548c IP \u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u4e0d\u662f\u6c38\u4e45\u7684\uff0cDNS \u670d\u52a1\u5668\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u5c06\u4e22\u5f03\u7f13\u5b58\u7684\u4fe1\u606f\u3002"),(0,s.kt)("p",null,"DNS \u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u4e86\u8d44\u6e90\u8bb0\u5f55 (Resource Record, RR)\u3002RR \u63d0\u4f9b\u4e86\u4e3b\u673a\u540d\u5230 IP \u5730\u5740\u7684\u6620\u5c04\u3002\u6bcf\u4e2a DNS \u54cd\u5e94\u62a5\u6587\u5305\u542b\u4e00\u6761\u6216\u591a\u6761 RR\u3002"),(0,s.kt)("p",null,"RR \u662f\u4e00\u4e2a\u5305\u542b\u4e86\u4e0b\u5217\u5b57\u6bb5\u7684\u56db\u5143\u7ec4\uff1a",(0,s.kt)("inlineCode",{parentName:"p"},"(Name, Value, Type, TLL)"),"\u3002TLL \u662f\u8be5\u8bb0\u5f55\u7684\u751f\u5b58\u65f6\u95f4\uff0c\u5b83\u51b3\u5b9a\u4e86 RR \u5e94\u5f53\u4ece\u7f13\u5b58\u4e2d\u5220\u9664\u7684\u65f6\u95f4\u3002"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If Type=A, then Name is a hostname and Value is the IP address for the hostname. As an example, (relay1.bar.foo.com, 145.37.93.126, A) is a Type A record."),(0,s.kt)("li",{parentName:"ul"},"If Type=NS, then Name is a domain (such as foo.com) and Value is the hostname of an authoritative DNS server that knows how to obtain the IP addresses for hosts in the domain. As an example, (foo.com, dns.foo.com, NS) is a Type NS record."),(0,s.kt)("li",{parentName:"ul"},"If Type=CNAME, then Value is a canonical hostname for the alias hostname Name. As an example, (foo.com, relay1.bar.foo.com, CNAME) is a CNAME record."),(0,s.kt)("li",{parentName:"ul"},"If Type=MX, then Value is the canonical name of a mail server that has an alias hostname Name.")),(0,s.kt)("p",null,"\u67e5\u770b\u5f53\u524d DNS\uff1a",(0,s.kt)("inlineCode",{parentName:"p"},"nslookup domain")),(0,s.kt)("p",null,"\u67e5\u8be2\u57df\u540d\u5bf9\u5e94\u7684 IP\uff1a",(0,s.kt)("inlineCode",{parentName:"p"},"nslookup www.baidu.com")),(0,s.kt)("p",null,"\u67e5\u8be2 A \u8bb0\u5f55\uff1a",(0,s.kt)("inlineCode",{parentName:"p"},"nslookup -query=A www.baidu.com")),(0,s.kt)("p",null,"\u67e5\u8be2 CNAME \u8bb0\u5f55\uff1a",(0,s.kt)("inlineCode",{parentName:"p"},"nslookup -query=CNAME www.baidu.com")),(0,s.kt)("h3",{id:"p2p"},"P2P"),(0,s.kt)("p",null,"\u8003\u8651\u4ece\u56e0\u7279\u7f51\u4e0a\u4e0b\u8f7d\u4e00\u4e2a\u6587\u4ef6\u3002\u5728\u5ba2\u6237-\u670d\u52a1\u5668\u6587\u4ef6\u5206\u53d1\u4e2d\uff0c\u8be5\u670d\u52a1\u5668\u5fc5\u987b\u5411\u6bcf\u4e2a peer \u53d1\u9001\u8be5\u6587\u4ef6\u7684\u4e00\u4e2a\u526f\u672c\uff1b\u5728 P2P \u6587\u4ef6\u5206\u53d1\u4e2d\uff0c\u6bcf\u4e2a peer \u80fd\u591f\u5411\u5176\u4ed6 peers \u5206\u53d1\u5b83\u5df2\u7ecf\u6536\u5230\u7684\u8be5\u6587\u4ef6\u7684\u90e8\u5206\uff0c\u4ece\u800c\u5728\u5206\u53d1\u8fc7\u7a0b\u4e2d\u534f\u52a9\u8be5\u670d\u52a1\u5668\u3002\u5230 2016 \u5e74\u6b62\uff0c\u6700\u4e3a\u6d41\u884c\u7684 P2P \u6587\u4ef6\u5206\u53d1\u534f\u8bae\u662f BitTorrent\u3002"),(0,s.kt)("p",null,"\u7528 BitTorrent \u7684\u672f\u8bed\u6765\u8bb2\uff0c\u53c2\u4e0e\u4e00\u4e2a\u7279\u5b9a\u6587\u4ef6\u5206\u53d1\u7684\u6240\u6709 peers \u7684\u96c6\u5408\u88ab\u79f0\u4e3a\u4e00\u4e2a\u6d2a\u6d41 (torrent)\u3002\u5728\u4e00\u4e2a\u6d2a\u6d41\u4e2d\u7684 peers \u5f7c\u6b64\u4e0b\u8f7d\u7b49\u957f\u5ea6\u7684\u6587\u4ef6\u5757 (chunk)\uff0c\u5178\u578b\u7684\u5757\u957f\u5ea6\u4e3a 256KB\u3002\u5f53\u4e00\u4e2a peer \u9996\u6b21\u52a0\u5165\u4e00\u4e2a\u6d2a\u6d41\u65f6\uff0c\u5b83\u6ca1\u6709\u5757\u3002\u968f\u7740\u65f6\u95f4\u7684\u6d41\u901d\uff0c\u5b83\u7d2f\u79ef\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u5757\u3002\u5f53\u5b83\u4e0b\u8f7d\u5757\u65f6\uff0c\u4e5f\u4e3a\u5176\u4ed6 peers \u4e0a\u8f7d\u4e86\u591a\u4e2a\u5757\u3002\u4e00\u65e6\u67d0\u4e2a peer \u83b7\u5f97\u4e86\u6574\u4e2a\u6587\u4ef6\uff0c\u5b83\u4e5f\u8bb8\uff08\u81ea\u79c1\u5730\uff09\u79bb\u5f00\u6d2a\u6d41\uff0c\u6216\u7ee7\u7eed\u7559\u5728\u8be5\u6d2a\u6d41\u4e2d\u5e76\u7ee7\u7eed\u5411\u5176\u4ed6 peers \u4e0a\u8f7d\u5757\u3002\u540c\u65f6\uff0c\u4efb\u4f55 peer \u53ef\u80fd\u5728\u4efb\u4f55\u65f6\u5019\u4ec5\u5177\u6709\u5757\u7684\u5b50\u96c6\u5c31\u79bb\u5f00\u8be5\u6d2a\u6d41\uff0c\u5e76\u5728\u4ee5\u540e\u91cd\u65b0\u52a0\u5165\u8be5\u6d2a\u6d41\u4e2d\u3002"),(0,s.kt)("p",null,"\u6bcf\u4e2a\u6d2a\u6d41\u5177\u6709\u4e00\u4e2a\u57fa\u7840\u8bbe\u65bd\u8282\u70b9\uff0c\u79f0\u4e3a\u8ffd\u8e2a\u5668 (tracker)\u3002\u5f53\u4e00\u4e2a peer \u52a0\u5165\u67d0\u6d2a\u6d41\u65f6\uff0c\u5b83\u5411\u8ffd\u8e2a\u5668\u6ce8\u518c\u81ea\u5df1\uff0c\u5e76\u5468\u671f\u6027\u5730\u901a\u77e5\u8ffd\u8e2a\u5668\u5b83\u4ecd\u5728\u8be5\u6d2a\u6d41\u4e2d\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8ffd\u8e2a\u5668\u8ddf\u8e2a\u53c2\u4e0e\u5728\u6d2a\u6d41\u4e2d\u7684 peers\u3002\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6d2a\u6d41\u53ef\u80fd\u5728\u4efb\u4f55\u65f6\u523b\u5177\u6709\u6570\u4ee5\u767e\u8ba1\u6216\u6570\u4ee5\u5343\u8ba1\u7684 peers\u3002"),(0,s.kt)("p",null,"\u5f53\u4e00\u4e2a\u65b0\u7684 peer\uff0cAlice \u52a0\u5165\u8be5\u6d2a\u6d41\u65f6\uff0c\u8ffd\u8e2a\u5668\u968f\u673a\u5730\u4ece\u53c2\u4e0e\u8be5\u6d2a\u6d41\u7684 peers \u96c6\u5408\u4e2d\u9009\u62e9\u4e00\u4e2a\u5b50\u96c6\uff08\u5047\u8bbe\u9009\u62e9\u4e86 50 \u4e2a peers\uff09\uff0c\u5e76\u5c06\u5b83\u4eec\u7684 IP \u5730\u5740\u53d1\u9001\u7ed9 Alice\u3002Alice \u5219\u8bd5\u56fe\u4e0e\u8fd9 50 \u4e2a peers \u521b\u5efa\u5e76\u884c\u7684 TCP \u8fde\u63a5\u3002\u968f\u7740\u65f6\u95f4\u7684\u6d41\u901d\uff0c\u8fd9\u4e9b peers \u4e2d\u7684\u67d0\u4e9b\u53ef\u80fd\u79bb\u5f00\uff0c\u5176\u4ed6 peers\uff08\u6700\u521d 50 \u4e2a\u4ee5\u5916\u7684\uff09\u4e5f\u53ef\u80fd\u4e0e Alice \u521b\u5efa TCP \u8fde\u63a5\u3002\u56e0\u6b64\u4e00\u4e2a peer \u7684 neighboring peers \u5c06\u968f\u65f6\u95f4\u800c\u6ce2\u52a8\u3002"),(0,s.kt)("p",null,"\u5728\u4efb\u610f\u65f6\u523b\uff0c\u6bcf\u4e2a peer \u53ef\u80fd\u5177\u6709\u8be5\u6587\u4ef6\u7684\u5757\u7684\u5b50\u96c6\uff0c\u4e0d\u540c\u7684 peers \u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u5b50\u96c6\u3002Alice \u5468\u671f\u6027\u5730\u7ecf TCP \u8fde\u63a5\u8be2\u95ee\u6bcf\u4e2a neighboring peer \u5b83\u4eec\u6240\u5177\u6709\u7684\u5757\u5217\u8868\u3002\u5982\u679c Alice \u5177\u6709 L \u4e2a\u4e0d\u540c\u7684\u90bb\u5c45\uff0c\u5979\u5c06\u83b7\u5f97 L \u4e2a\u5757\u5217\u8868\u3002\u6709\u4e86\u8fd9\u4e2a\u4fe1\u606f\uff0cAlice \u5c06\u505a\u51fa\u4e24\u4e2a\u91cd\u8981\u51b3\u5b9a\u3002\u7b2c\u4e00\uff0c\u5979\u5e94\u5f53\u5411\u90bb\u5c45\u8bf7\u6c42\u54ea\u4e9b\u5757\u5462\uff1f\u7b2c\u4e8c\uff0c\u5979\u5e94\u5f53\u5411\u54ea\u4e9b\u5411\u5979\u8bf7\u6c42\u5757\u7684\u90bb\u5c45\u53d1\u9001\u5757\u5462\uff1f"),(0,s.kt)("p",null,"\u5728\u51b3\u5b9a\u8bf7\u6c42\u54ea\u4e9b\u5757\u7684\u8fc7\u7a0b\u4e2d\uff0cBitTorrent \u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u6700\u7a00\u7f3a\u4f18\u5148 (rarest first) \u7684\u6280\u672f\u3002\u6700\u7a00\u7f3a\u7684\u5757\uff0c\u5c31\u662f\u90a3\u4e9b\u5728\u5979\u7684\u90bb\u5c45\u4e2d\u526f\u672c\u6570\u91cf\u6700\u5c11\u7684\u5757)\uff0cAlice \u9996\u5148\u8bf7\u6c42\u90a3\u4e9b\u6700\u7a00\u7f3a\u7684\u5757\u3002\u8fd9\u6837\uff0c\u6700\u7a00\u7f3a\u7684\u5757\u5c06\u5f97\u5230\u66f4\u4e3a\u8fc5\u901f\u7684\u91cd\u65b0\u5206\u53d1\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5927\u81f4\u5730\u5747\u8861\u6bcf\u4e2a\u5757\u5728\u6d2a\u6d41\u4e2d\u7684\u526f\u672c\u6570\u91cf\u3002"),(0,s.kt)("p",null,"\u4e3a\u4e86\u51b3\u5b9a\u5979\u54cd\u5e94\u54ea\u4e2a\u8bf7\u6c42\uff0cBitTorrent \u4f7f\u7528\u4e86\u4e00\u79cd\u806a\u660e\u7684\u4ea4\u6613\u7b97\u6cd5\u3002\u5176\u57fa\u672c\u60f3\u6cd5\u662f\uff0cAlice \u7ed9\u4e88\u5f53\u524d\u5411\u5979\u63d0\u4f9b\u6570\u636e\u7684\u90bb\u5c45\u4e2d\u901f\u7387\u6700\u9ad8\u7684\u90a3\u4e9b\u4ee5\u4f18\u5148\u6743\u3002Alice \u5bf9\u4e8e\u5979\u7684\u6bcf\u4e2a\u90bb\u5c45\u90fd\u6301\u7eed\u5730\u6d4b\u91cf\u63a5\u6536\u901f\u7387\uff0c\u5e76\u786e\u5b9a\u6d41\u5165\u901f\u7387\u6700\u9ad8\u7684 4 \u4e2a\u90bb\u5c45\u3002\u6bcf\u8fc7 10 \u79d2\uff0c\u5979\u91cd\u65b0\u8ba1\u7b97\u8be5\u901f\u7387\u5e76\u53ef\u80fd\u4fee\u6539\u8fd9 4 \u4e2a peers \u7684\u96c6\u5408\uff0c\u6211\u4eec\u79f0\u8fd9 4 \u4e2a peers \u88ab unchoked\u3002\u91cd\u8981\u7684\u662f\uff0c\u6bcf\u8fc7 30 \u79d2\uff0c\u5979\u4e5f\u8981\u968f\u673a\u5730\u9009\u62e9\u53e6\u5916\u4e00\u4e2a\u90bb\u5c45\uff08\u4e0d\u5728\u8fd9 4 \u4e2a peers \u91cc\uff09Bob \u5e76\u5411\u5176\u53d1\u9001\u5757\u3002\u56e0\u4e3a Alice \u6b63\u5728\u5411 Bob \u53d1\u9001\u6570\u636e\uff0c\u5979\u53ef\u80fd\u6210\u4e3a Bob \u524d 4 \u4f4d\u4e0a\u8f7d\u8005\u4e4b\u4e00\uff0c\u8fd9\u6837\u7684\u8bdd Bob \u5c06\u5f00\u59cb\u5411 Alice \u53d1\u9001\u6570\u636e\u3002\u5982\u679c Bob \u5411 Alice \u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u8db3\u591f\u9ad8\uff0cBob \u63a5\u4e0b\u6765\u4e5f\u80fd\u6210\u4e3a Alice \u7684\u524d 4 \u4f4d\u4e0a\u8f7d\u8005\u3002\u8fd9\u79cd\u8bbe\u8ba1\u7684\u6548\u679c\u662f peers \u80fd\u591f\u5728\u6d2a\u6d41\u4e2d\uff0c\u59cb\u7ec8\u8d8b\u5411\u4e8e\u627e\u5230\u90a3\u4e9b\u4ee5\u6700\u5feb\u901f\u7387\u4ea4\u6362\u6587\u4ef6\u5757\u7684\u90bb\u5c45\u3002\u5bf9\u4e8e Alice\uff0c\u9664\u4e86\u8fd9 4 \u4e2a peers \u548c\u4e00\u4e2a\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u968f\u673a\u9009\u62e9\u7684\u8bd5\u63a2\u6027 peer\uff0c\u5176\u5b83\u6240\u6709 neighboring peers \u90fd\u88ab choked\uff0c\u5373\u5b83\u4eec\u4e0d\u4f1a\u4ece Alice \u8fd9\u91cc\u63a5\u6536\u5230\u4efb\u4f55\u5757\u3002"),(0,s.kt)("p",null,"BitTorrent \u8fd8\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u673a\u5236\u6ca1\u6709\u5728\u8fd9\u91cc\u8ba8\u8bba\u3002\u4f46\u603b\u4f53\u6765\u8bf4\uff0cBitTorrent \u53d6\u5f97\u4e86\u5e7f\u6cdb\u6210\u529f\uff0c\u5b83\u7684\u8bbe\u8ba1\u4f7f\u5f97\u65e0\u6570\u4e2a peers \u5728\u65e0\u6570\u4e2a\u6d2a\u6d41\u4e2d\u79ef\u6781\u5730\u5171\u4eab\u6587\u4ef6\u3002"),(0,s.kt)("h3",{id:"video-streaming"},"Video Streaming"),(0,s.kt)("p",null,"From a networking perspective, perhaps the most salient characteristic of video is its high bit rate. For example, a single 2 Mbps video with a duration of 67 minutes will consume 1 gigabyte of storage and traffic. By far, the most important performance measure for streaming video is average end-to-end throughput. In order to provide continuous playout, the network must provide an average throughput to the streaming application that is at least as large as the bit rate of the compressed video. We can also use compression to create multiple versions of the same video, each at a different quality level."),(0,s.kt)("p",null,"In ",(0,s.kt)("strong",{parentName:"p"},"HTTP streaming"),", the video is simply stored at an HTTP server as an ordinary file with a specific URL. On the client side, the bytes are collected in a client application buffer. The streaming video application periodically grabs video frames from the client application buffer, decompresses the frames, and displays them on the user\u2019s screen."),(0,s.kt)("p",null,"Although HTTP streaming has been extensively deployed in practice, it has a major shortcoming: All clients receive the same encoding of the video, despite the large variations in the amount of bandwidth available to a client. This has led to the development of a new type of HTTP-based streaming, often referred to as ",(0,s.kt)("strong",{parentName:"p"},"Dynamic Adaptive Streaming over HTTP (DASH)"),"."),(0,s.kt)("p",null,"In DASH, the video is encoded into several different versions, with each version having a different bit rate. Each video version is stored in the HTTP server, each with a different URL. The HTTP server also has a ",(0,s.kt)("strong",{parentName:"p"},"manifest file"),", which provides a URL for each version along with its bit rate. The client first requests the manifest file and learns about the various versions. The client then selects one chunk at a time by specifying a URL and a byte-range in an HTTP GET request message header for each chunk. While downloading chunks, the client also measures the received bandwidth and runs a rate determination algorithm to select the chunk to request next. Naturally, if the client has a lot of video buffered and if the measured receive bandwidth is high, it will choose a chunk from a high-bitrate version. And naturally if the client has little video buffered and the measured received bandwidth is low, it will choose a chunk from a low-bitrate version. DASH therefore allows the client to freely switch among different quality levels."),(0,s.kt)("h3",{id:"content-distribution-networks"},"Content Distribution Networks"),(0,s.kt)("p",null,"\u4e3a\u4e86\u5e94\u5bf9\u5411\u5206\u5e03\u4e8e\u5168\u4e16\u754c\u7684\u7528\u6237\u5206\u53d1\u5de8\u91cf\u89c6\u9891\u6570\u636e\u7684\u6311\u6218\uff0c\u89c6\u9891\u6d41\u516c\u53f8\u90fd\u4f1a\u5229\u7528\u5185\u5bb9\u5206\u53d1\u7f51\u7edc (Content Distribution Network, CDN)\u3002\u4e00\u4e2a CDN \u7ba1\u7406\u7740\u5206\u5e03\u5728\u591a\u4e2a\u5730\u7406\u4f4d\u7f6e\u4e0a\u7684\u670d\u52a1\u5668\uff0c\u8fd9\u4e9b\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u7740\u89c6\u9891\u7b49\u8d44\u6e90\u6587\u4ef6\u7684\u526f\u672c\uff0c\u5e76\u4e14\u603b\u662f\u5c06\u6bcf\u4e2a\u7528\u6237\u8bf7\u6c42\u5b9a\u5411\u5230\u6700\u4f18\u7684 CDN \u4f4d\u7f6e\u3002CDN \u53ef\u4ee5\u662f\u4e13\u7528 CDN (privace CDN)\uff0c\u5b83\u7531\u5185\u5bb9\u63d0\u4f9b\u5546\u79c1\u4eba\u6240\u6709\uff1b\u4e5f\u53ef\u4ee5\u662f\u7b2c\u4e09\u65b9 CDN (third-party CDN)\uff0c\u5b83\u4ee3\u8868\u591a\u4e2a\u5185\u5bb9\u63d0\u4f9b\u5546\u5206\u53d1\u5185\u5bb9\u3002"),(0,s.kt)("p",null,"CDN \u7684\u670d\u52a1\u5668\u662f\u5982\u4f55\u90e8\u7f72\u7684\u5462\uff1fCDNs typically adopt one of two different server placement philosophies: Enter Deep (deploying server clusters in access ISPs); Bring Home (place their clusters in IXPs)."),(0,s.kt)("p",null,"\u4e00\u65e6 CDN \u7684\u96c6\u7fa4\u51c6\u5907\u5c31\u7eea\uff0c\u5b83\u5c31\u53ef\u4ee5\u8de8\u96c6\u7fa4\u590d\u5236\u5185\u5bb9\u3002CDN \u4e0d\u4f1a\u5c06\u6bcf\u4e2a\u89c6\u9891\u7684\u526f\u672c\u653e\u7f6e\u5728\u6bcf\u4e2a\u96c6\u7fa4\u4e2d\uff0c\u56e0\u4e3a\u67d0\u4e9b\u89c6\u9891\u5f88\u5c11\u89c2\u770b\u6216\u4ec5\u5728\u67d0\u4e9b\u56fd\u5bb6\u4e2d\u6d41\u884c\u3002\u800c\u662f\u4f7f\u7528\u4e00\u79cd\u7b80\u5355\u7684\u62c9\u7b56\u7565\uff1a\u5982\u679c\u5ba2\u6237\u5411\u4e00\u4e2a\u672a\u5b58\u50a8\u8be5\u89c6\u9891\u7684\u96c6\u7fa4\u8bf7\u6c42\u67d0\u89c6\u9891\uff0c\u5219\u8be5\u96c6\u7fa4\u68c0\u7d22\u8be5\u89c6\u9891\uff08\u4ece\u67d0\u4e2d\u5fc3\u4ed3\u5e93\u6216\u8005\u4ece\u53e6\u4e00\u4e2a\u96c6\u7fa4\uff09\uff0c\u5411\u5ba2\u6237\u6d41\u5f0f\u4f20\u8f93\u89c6\u9891\u65f6\u7684\u540c\u65f6\u3001\u5728\u672c\u5730\u5b58\u50a8\u4e00\u4e2a\u526f\u672c\u3002\u5f53\u67d0\u96c6\u7fa4\u5b58\u50a8\u5668\u53d8\u6ee1\u65f6\uff0c\u5b83\u5220\u9664\u4e0d\u7ecf\u5e38\u8bf7\u6c42\u7684\u89c6\u9891\u3002\u9664\u4e86\u62c9\u7b56\u7565\uff0c\u5f53\u7136\u8fd8\u6709\u5176\u5b83\u7b56\u7565\uff0cNetflix CDN \u4f7f\u7528 push caching \u800c\u4e0d\u662f pull caching\uff1a\u5185\u5bb9\u5728\u975e\u9ad8\u5cf0\u65f6\u6bb5\u88ab\u63a8\u5165\u670d\u52a1\u5668\uff0c\u800c\u4e0d\u662f\u5728\u7f13\u5b58\u672a\u547d\u4e2d\u65f6\u62c9\u53d6\u3002"),(0,s.kt)("p",null,"\u5f53\u5ba2\u6237\u7aef\u68c0\u7d22\u67d0\u4e2a\u8d44\u6e90\u65f6\uff0cCDN \u5fc5\u987b\u622a\u83b7\u8be5\u8bf7\u6c42\uff0c\u4ee5\u4fbf\u80fd\u591f\u2014\u20141","."," \u786e\u5b9a\u6b64\u65f6\u9002\u5408\u7528\u4e8e\u8be5\u5ba2\u6237\u7684 CDN \u670d\u52a1\u5668\u96c6\u7fa4\uff1b2","."," \u5c06\u5ba2\u6237\u7684\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u8be5\u96c6\u7fa4\u7684\u67d0\u53f0\u670d\u52a1\u5668\u3002\u5927\u591a\u6570 CDN \u5229\u7528 DNS \u6765\u622a\u83b7\u548c\u91cd\u5b9a\u5411\u8bf7\u6c42\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(13695).Z,width:"623",height:"473"})),(0,s.kt)("h3",{id:"socket-programming"},"Socket Programming"),(0,s.kt)("p",null,"Processes residing in two different end systems communicate with each other by reading from, and writing to, sockets."),(0,s.kt)("p",null,"\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u6709\u4e24\u7c7b\u3002\u4e00\u7c7b\u662f\u7531\u534f\u8bae\u6807\u51c6\uff08\u5982\u4e00\u4e2a RFC\uff09\u4e2d\u6240\u5b9a\u4e49\u7684\u64cd\u4f5c\u7684\u5b9e\u73b0\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5fc5\u987b\u9075\u5b88\u8be5 RFC \u7684\u89c4\u5219\uff1b\u53e6\u4e00\u7c7b\u662f\u4e13\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u5e94\u7528\u5c42\u534f\u8bae\u6ca1\u6709\u516c\u5f00\u53d1\u5e03\u5728\u67d0 RFC \u4e2d\u6216\u5176\u4ed6\u5730\u65b9\uff0c\u4e0d\u77e5\u9053\u8fd9\u4e2a\u534f\u8bae\u7684\u5f00\u53d1\u8005\u65e0\u6cd5\u5f00\u53d1\u51fa\u80fd\u4e0e\u4e4b\u901a\u4fe1\u7684\u5e94\u7528\u7a0b\u5e8f\u3002"),(0,s.kt)("h4",{id:"udp"},"UDP"),(0,s.kt)("p",null,"When a socket is created, an identifier, called a ",(0,s.kt)("strong",{parentName:"p"},"port number"),", is assigned to it. The sending process attaches to the packet a destination address, which consists of the destination host\u2019s IP address and the destination socket\u2019s port number."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:"title='client.py'",title:"'client.py'"},"from socket import *\n\nserverName = '127.0.0.1'\nserverPort = 12000\nclientSocket = socket(AF_INET, SOCK_DGRAM) # 1\n\nmessage = input('Input lowercase sentence:')\nclientSocket.sendto(message.encode(), (serverName, serverPort)) # 2,3\n\nmodifiedMessage, serverAddress = clientSocket.recvfrom(2048) # 4\nprint(modifiedMessage.decode())\nclientSocket.close()\n")),(0,s.kt)("p",null,"[1]"," The first parameter indicates the address family; in particular, ",(0,s.kt)("inlineCode",{parentName:"p"},"AF_INET")," indicates that the underlying network is using IPv4. The second parameter indicates that the socket is of type ",(0,s.kt)("inlineCode",{parentName:"p"},"SOCK_DGRAM"),", which means it is a UDP socket (rather than a TCP socket)."),(0,s.kt)("p",null,"[2]"," Note that we are not specifying the port number of the client socket when we create it; we are instead letting the operating system do this for us."),(0,s.kt)("p",null,"[3]"," ",(0,s.kt)("inlineCode",{parentName:"p"},"encode")," convert the message from string type to byte type."),(0,s.kt)("p",null,"[4]"," The maximum amount of data to be received is specified as 2048 bytes in the buffer size."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:"title='server.py'",title:"'server.py'"},"from socket import *\n\nserverPort = 12000\nserverSocket = socket(AF_INET, SOCK_DGRAM)\nserverSocket.bind(('', serverPort)) # 1\nprint('The server is ready to receive')\n\nwhile True:\n    message, clientAddress = serverSocket.recvfrom(2048)\n    modifiedMessage = message.decode().upper()\n    serverSocket.sendto(modifiedMessage.encode(), clientAddress)\n")),(0,s.kt)("p",null,"[1]"," ",(0,s.kt)("inlineCode",{parentName:"p"},"bind")," binds (that is, assigns) the port number 12000 to the server\u2019s socket. In this manner, when anyone sends a packet to port 12000 at the server, that packet will be directed to this socket."),(0,s.kt)("h4",{id:"tcp"},"TCP"),(0,s.kt)("p",null,"Unlike UDP, TCP is a connection-oriented protocol. This means that before the client and server can start to send data to each other, they first need to handshake and establish a TCP connection. After that, they just drop the data into the TCP connection via sockets. This is different from UDP, for which the server must attach a destination address to the packet before dropping it into the socket."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"What is meant by a handshaking protocol? A protocol uses handshaking if the two communicating entities first exchange control packets before sending data to each other. SMTP uses handshaking at the application layer whereas HTTP does not.")),(0,s.kt)("p",null,"With the server process running, the client process can initiate a TCP connection to the server. This is done in the client program by creating a TCP socket. When the client creates its TCP socket, it specifies the address of the ",(0,s.kt)("strong",{parentName:"p"},"welcoming socket")," in the server, namely, the IP address of the server host and the port number of the socket."),(0,s.kt)("p",null,"During the three-way handshake, when the server \u201chears\u201d the knocking, it creates a new connection socket that is dedicated to that particular client."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(59999).Z,width:"587",height:"494"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:"title='client.py'",title:"'client.py'"},"from socket import *\n\nserverName = '127.0.0.1'\nserverPort = 12000\nclientSocket = socket(AF_INET, SOCK_STREAM)\nclientSocket.connect((serverName, serverPort))\n\nsentence = input('Input lowercase sentence:')\nclientSocket.send(sentence.encode()) # 1\n\nmodifiedSetence = clientSocket.recv(1024)\nprint('From Server:', modifiedSetence.decode())\n\nclientSocket.close()\n")),(0,s.kt)("p",null,"[1]"," This line sends the sentence through the client\u2019s socket and into the TCP connection. Note that the program does not explicitly create a packet and attach the destination address to the packet, as was the case with UDP sockets."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"from socket import *\nserverPort = 12000\nserverSocket = socket(AF_INET, SOCK_STREAM)\nserverSocket.bind(('', serverPort))\nserverSocket.listen(1) ## the maximum number of queued connections (at least 1)\nprint('The server is ready to receive')\nwhile True:\n    connectionSocket, addr = serverSocket.accept()\n    sentence = connectionSocket.recv(1024).decode()\n    capitalizedSentence = setence.upper()\n    connectionSocket.send(capitalizedSentence.encode())\n    connectionSocket.close()\nserverSocket.close()\n")),(0,s.kt)("p",null,"When a client knocks on this door, the program invokes the ",(0,s.kt)("inlineCode",{parentName:"p"},"accept()")," method for ",(0,s.kt)("inlineCode",{parentName:"p"},"serverSocket"),", which creates a new socket in the server, called ",(0,s.kt)("inlineCode",{parentName:"p"},"connectionSocket"),", dedicated to this particular client."),(0,s.kt)("p",null,"With the UDP server, there is no welcoming socket, and all data from different clients enters the server through one single socket. With the TCP server, there is a welcoming socket, thus, to support n simultaneous connections, the server would need n+1 sockets."),(0,s.kt)("h4",{id:"exercise-proxy-server"},"Exercise: Proxy Server"),(0,s.kt)("p",null,"Write a simple TCP program for a server that accepts lines of input from a client and prints the lines onto the server\u2019s standard output."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"from socket import *\nserverPort = 12000\nserverSocket = socket(AF_INET, SOCK_STREAM)\nserverSocket.bind(('', serverPort))\nserverSocket.listen(1)\nwhile True:\n    connectionSocket, addr = serverSocket.accept()\n    sentence = connectionSocket.recv(1024).decode()\n    print(sentence)\n    connectionSocket.send(\"Hello world!\".encode())\n    connectionSocket.close()\nserverSocket.close()\n")),(0,s.kt)("p",null,"On the Web browser, set the proxy server to your running server program. Your browser should now send its GET request messages to your server, and your server should display the messages on its standard output."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"CONNECT www.baidu.com:443 HTTP/1.1\nHost: www.baidu.com:443\nProxy-Connection: keep-alive\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36\n......\n")),(0,s.kt)("h2",{id:"transport-layer"},"Transport Layer"),(0,s.kt)("p",null,"Transport-layer protocols are implemented in the end systems but not in network routers. On the sending side, the transport layer converts the application-layer messages into segments. This is done by (possibly) breaking the application messages into smaller chunks and adding a transport-layer header to each chunk to create the transport-layer segment. The transport layer then passes the segment to the network layer at the sending end system, where the segment is encapsulated within a network-layer packet (a datagram) and sent to the destination. It\u2019s important to note that network routers act only on the network-layer fields of the datagram; that is, they do not examine the fields of the transport-layer segment encapsulated with the datagram. On the receiving side, the network layer extracts the transport-layer segment from the datagram and passes the segment up to the transport layer. The transport layer then processes the received segment, making the data in the segment available to the receiving application."),(0,s.kt)("p",null,"Before proceeding with our introduction of ",(0,s.kt)("strong",{parentName:"p"},"UDP (User Datagram Protocol)")," and ",(0,s.kt)("strong",{parentName:"p"},"TCP (Transmission Control Protocol)"),", it will be useful to say a few words about the Internet\u2019s network layer. IP, for Internet Protocol, is a best-effort delivery service. This means that IP makes its \u201cbest effort\u201d to deliver segments between communicating hosts, but it makes no guarantees."),(0,s.kt)("p",null,"Extending host-to-host delivery to process-to-process delivery is called ",(0,s.kt)("strong",{parentName:"p"},"transport-layer multiplexing and demultiplexing"),".\uff08\u591a\u8def\u590d\u7528\u3001\u591a\u8def\u5206\u89e3\uff09UDP and TCP also provide ",(0,s.kt)("strong",{parentName:"p"},"integrity checking")," by including error-detection fields in their segments\u2019 headers. These two minimal transport-layer services are the only two that UDP provides!"),(0,s.kt)("p",null,"TCP, on the other hand, offers several additional services to applications."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"First and foremost, it provides ",(0,s.kt)("strong",{parentName:"li"},"reliable data transfer"),". Using flow control, sequence numbers, acknowledgments, and timers, TCP ensures that data is delivered from sending process to receiving process, correctly and in order."),(0,s.kt)("li",{parentName:"ul"},"TCP also provides ",(0,s.kt)("strong",{parentName:"li"},"congestion control"),". Congestion control is not so much a service provided to the invoking application as it is a service for the Internet as a whole.")),(0,s.kt)("h3",{id:"multiplexing-and-demultiplexing"},"Multiplexing and Demultiplexing"),(0,s.kt)("p",null,"This job of delivering the data in a transport-layer segment to the correct socket is called demultiplexing. The job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information (that will later be used in demultiplexing) to create segments, and passing the segments to the network layer is called multiplexing."),(0,s.kt)("p",null,"There are ",(0,s.kt)("strong",{parentName:"p"},"source port number field")," and the ",(0,s.kt)("strong",{parentName:"p"},"destination port number field")," in a transport-layer segment. Each port number is a 16-bit number, ranging from 0 to 65535. The port numbers ranging from 0 to 1023 are called well-known port numbers and are restricted, which means reserved for use by well-known application protocols such as HTTP."),(0,s.kt)("p",null,"Each socket in the host could be assigned a port number, and when a segment arrives at the host, the transport layer examines the destination port number in the segment and directs the segment to the corresponding socket. The segment\u2019s data then passes through the socket into the attached process. As we\u2019ll see, this is basically how UDP does it."),(0,s.kt)("p",null,"It is important to note that a UDP socket is fully identified by a two-tuple consisting of a destination IP address and a destination port number. As a consequence, if two UDP segments have different source IP addresses and/or source port numbers, but have the same destination IP address and destination port number, then the two segments will be directed to the same destination process via the same destination socket. In UDP, the source port number serves as part of a \u201creturn address\u201d."),(0,s.kt)("p",null,"TCP socket is identified by a four-tuple: (source IP address, source port number, destination IP address, destination port number). In particular, and in contrast with UDP, two arriving TCP segments with different source IP addresses or source port numbers will (with the exception of a TCP segment carrying the original connection-establishment request) be directed to two different sockets."),(0,s.kt)("p",null,"Today\u2019s high-performing Web servers often use only one process, and create a new thread with a new connection socket for each new client connection. For such a server, at any given time there may be many connection sockets (with different identifiers) attached to the same process. If the client and server are using persistent HTTP, then throughout the duration of the persistent connection the client and server exchange HTTP messages via the same server socket."),(0,s.kt)("h3",{id:"udp-1"},"UDP"),(0,s.kt)("p",null,"Note that with UDP there is no handshaking between sending and receiving transport-layer entities before sending a segment. For this reason, UDP is said to be ",(0,s.kt)("strong",{parentName:"p"},"connectionless"),"."),(0,s.kt)("p",null,"DNS is an example of an application-layer protocol that typically uses UDP. The DNS application at the querying host then waits for a reply to its query. If it doesn\u2019t receive a reply (possibly because the underlying network lost the query or the reply), it might try resending the query, try sending the query to another name server, or inform the invoking application that it can\u2019t get a reply."),(0,s.kt)("p",null,"The UDP header has only four fields, each consisting of two bytes, totally 8 bytes. The length field specifies the number of bytes in the UDP segment (header plus data). The checksum is used by the receiving host to check whether errors have been introduced into the segment. In truth, the checksum is also calculated over a few of the fields in the IP header in addition to the UDP segment."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(18920).Z,width:"481",height:"288"})),(0,s.kt)("p",null,"Although UDP provides error checking, it does not do anything to recover from an error. Some implementations of UDP simply discard the damaged segment; others pass the damaged segment to the application with a warning."),(0,s.kt)("p",null,"Some applications are better suited for UDP (rather than TCP) for the following reasons:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Finer application-level control over what data is sent, and when.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"WHAT: With TCP, the application writes data to the connection send buffer and TCP will grab bytes without necessarily putting a single message in the TCP segment; TCP may put more or less than a single message in a segment. UDP, on the other hand, encapsulates in a segment whatever the application gives it; so that, if the application gives UDP an application message, this message will be the payload of the UDP segment. Thus, with UDP, an application has more control of what data is sent in a segment."),(0,s.kt)("li",{parentName:"ul"},"WHEN: With TCP, due to flow control and congestion control, there may be significant delay from the time when an application writes data to its send buffer until when the data is given to the network layer. UDP does not have delays due to flow control and congestion control."))),(0,s.kt)("li",{parentName:"ul"},"No connection establishment. UDP does not introduce any delay to establish a connection. The TCP connection-establishment delay in HTTP is an important contributor to the delays associated with downloading Web documents."),(0,s.kt)("li",{parentName:"ul"},"No connection state. A server devoted to a particular application can typically support many more active clients when the application runs over UDP rather than TCP."),(0,s.kt)("li",{parentName:"ul"},"Small packet header overhead. The TCP segment has 20 bytes of header over- head in every segment, whereas UDP has only 8 bytes of overhead.")),(0,s.kt)("h3",{id:"tcp-1"},"TCP"),(0,s.kt)("h4",{id:"go-back-n-gbn-and-selective-repeat-sr"},"Go-Back-N (GBN) and Selective Repeat (SR)"),(0,s.kt)("p",null,"In a Go-Back-N (GBN) protocol, the sender is allowed to transmit multiple packets (when available) without waiting for an acknowledgment, but is constrained to have no more than some maximum allowable number, N, of unacknowledged packets in the pipeline."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img-80",src:a(66501).Z,width:"2560",height:"662"})),(0,s.kt)("p",null,"Four intervals in the range of sequence numbers can be identified:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"packets that have already been transmitted and acknowledged"),(0,s.kt)("li",{parentName:"ul"},"packets that have been sent but not yet acknowledged"),(0,s.kt)("li",{parentName:"ul"},"can be used for packets that can be sent immediately"),(0,s.kt)("li",{parentName:"ul"},"cannot be used until an unacknowledged packet currently in the pipeline has been acknowledged")),(0,s.kt)("p",null,"As the protocol operates, this window slides forward over the sequence number space. For this reason, N is often referred to as the window size and the GBN protocol itself as a sliding-window protocol. N is limited by flow control and congestion control."),(0,s.kt)("p",null,"When ",(0,s.kt)("inlineCode",{parentName:"p"},"rdt_send()")," is called from above, the sender first checks to see if the window is full, that is, whether there are N outstanding, unacknowledged packets. If the window is not full, a packet is created and sent, and variables are appropriately updated. If the window is full, the sender simply returns the data back to the upper layer, an implicit indication that the window is full. The upper layer would presumably then have to try again later. In a real implementation, the sender would more likely have either buffered (but not immediately sent) this data, or would have a synchronization mechanism (for example, a semaphore or a flag) that would allow the upper layer to call ",(0,s.kt)("inlineCode",{parentName:"p"},"rdt_send()")," only when the window is not full."),(0,s.kt)("p",null,"Selective-repeat protocols avoid unnecessary retransmissions by having the sender retransmit only those packets that it suspects were received in error (that is, were lost or corrupted) at the receiver. This individual, as-needed, retransmission will require that the receiver individually acknowledge correctly received packets. A window size of N will again be used to limit the number of outstanding, unacknowledged packets in the pipeline. However, unlike GBN, the sender will have already received ACKs for some of the packets in the window."),(0,s.kt)("h4",{id:"tcp-connection"},"TCP Connection"),(0,s.kt)("p",null,"TCP is said to be connection-oriented because before one application process can begin to send data to another, the two processes must first \u201chandshake\u201d with each other. Both sides of the connection will initialize many TCP state variables."),(0,s.kt)("p",null,"Recall that because the TCP protocol runs only in the end systems and not in the intermediate network elements (routers and link-layer switches), the intermediate network elements do not maintain TCP connection state."),(0,s.kt)("p",null,"A TCP connection provides a ",(0,s.kt)("strong",{parentName:"p"},"full-duplex service"),": The application-layer data can flow from Process A to Process B ",(0,s.kt)("strong",{parentName:"p"},"at the same time")," as application-layer data flows from Process B to Process A."),(0,s.kt)("p",null,"Suppose a process running in one host wants to initiate a connection with another process in another host. Recall that the process that is initiating the connection is called the client process, while the other process is called the server process. Because three segments are sent between the two hosts, this connection-establishment procedure is often referred to as a ",(0,s.kt)("strong",{parentName:"p"},"three-way handshake"),"."),(0,s.kt)("p",null,"Once a TCP connection is established, the two application processes can send data to each other. Let\u2019s consider the sending of data from the client process to the server process. The client process passes a stream of data through the socket. Once the data passes through the door, the data is in the hands of TCP running in the client. TCP directs this data to the connection\u2019s send buffer, which is one of the buffers that is set aside during the initial three-way handshake. From time to time, TCP will grab chunks of data from the send buffer and pass the data to the network layer. Interestingly, the TCP specification ","[RFC 793]"," is very laid back about specifying when TCP should actually send buffered data, stating that TCP should \u201csend that data in segments at its own convenience.\u201d"),(0,s.kt)("p",null,"The maximum amount of data that can be grabbed and placed in a segment is limited by the ",(0,s.kt)("strong",{parentName:"p"},"maximum segment size (MSS)"),". The MSS is typically set by first determining the length of the largest link-layer frame that can be sent by the local sending host (the so-called ",(0,s.kt)("strong",{parentName:"p"},"maximum transmission unit, MTU"),"), and then setting the MSS to ensure that a TCP segment (when encapsulated in an IP datagram) plus the TCP/IP header length (typically 40 bytes) will fit into a single link-layer frame. Both Ethernet and PPP link-layer protocols have an MTU of 1,500 bytes. Thus, a typical value of MSS is ",(0,s.kt)("strong",{parentName:"p"},"1460 bytes"),". Note that the MSS is the maximum amount of application-layer data in the segment, not the maximum size of the TCP segment including headers."),(0,s.kt)("p",null,"TCP pairs each chunk of client data with a TCP header, thereby forming TCP segments. The segments are passed down to the network layer, where they are separately encapsulated within network-layer IP datagrams. The IP datagrams are then sent into the network. When TCP receives a segment at the other end, the segment\u2019s data is placed in the TCP connection\u2019s receive buffer. ",(0,s.kt)("strong",{parentName:"p"},"Each side of the connection has its own send buffer and its own receive buffer"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(80219).Z,width:"681",height:"308"})),(0,s.kt)("h4",{id:"tcp-segment"},"TCP Segment"),(0,s.kt)("p",null,"The TCP segment consists of header fields and a data field. TCP header is typically 20 bytes. The data field contains a chunk of application data."),(0,s.kt)("p",null,"As with UDP, the header includes source and destination port numbers, which are used for multiplexing/ demultiplexing data from/to upper-layer applications. Also, as with UDP, the header includes a checksum field. A TCP segment header also contains the following fields:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The 32-bit sequence number field and the 32-bit acknowledgment number field are used by the TCP sender and receiver in implementing a reliable data transfer service."),(0,s.kt)("li",{parentName:"ul"},"The 16-bit receive window field is used for flow control."),(0,s.kt)("li",{parentName:"ul"},"The 4-bit header length field specifies the length of the TCP header (typically 20 bytes)."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("strong",{parentName:"li"},"ACK bit")," is used to indicate that the segment contains an acknowledgment for a segment that has been successfully received."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("strong",{parentName:"li"},"RST"),", ",(0,s.kt)("strong",{parentName:"li"},"SYN"),", and ",(0,s.kt)("strong",{parentName:"li"},"FIN")," bits are used for connection setup and teardown."),(0,s.kt)("li",{parentName:"ul"},"The CWR and ECE bits are used in explicit congestion notification.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(77821).Z,width:"1667",height:"1360"})),(0,s.kt)("p",null,"TCP views data as an unstructured, but ordered, stream of bytes. The sequence number for a segment is therefore the byte-stream number of the first byte in the segment."),(0,s.kt)("p",null,"Suppose that a process in Host A wants to send a stream of data to a process in Host B over a TCP connection. The TCP in Host A will implicitly number each byte in the data stream. Suppose that the data stream consists of a file consisting of 500,000 bytes, that the MSS is 1,000 bytes, and that the first byte of the data stream is numbered 0. As shown in Figure 3.30, TCP constructs 500 segments out of the data stream. The first segment gets assigned sequence number 0, the second segment gets assigned sequence number 1,000, the third segment gets assigned sequence number 2,000, and so on. Each sequence number is inserted in the sequence number field in the header of the appropriate TCP segment."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(33375).Z,width:"1780",height:"606"})),(0,s.kt)("p",null,"Recall that TCP is full-duplex, the acknowledgment number that Host A puts in its segment is the sequence number of the next byte Host A is expecting from Host B."),(0,s.kt)("p",null,"Suppose that Host A has received one segment from Host B containing bytes 0 through 535 and another segment containing bytes 900 through 1,000. For some reason Host A has not yet received bytes 536 through 899. In this example, Host A is still waiting for byte 536 (and beyond) in order to re-create B\u2019s data stream. Thus, A\u2019s next segment to B will contain 536 in the acknowledgment number field. Because TCP only acknowledges bytes up to the first missing byte in the stream, TCP is said to provide ",(0,s.kt)("strong",{parentName:"p"},"cumulative acknowledgments")," \u7d2f\u79ef\u786e\u8ba4. The receiver keeps the out-of-order bytes and waits for the missing bytes to fill in the gaps."),(0,s.kt)("p",null,"\u5728\u56fe 3-30 \u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u521d\u59cb\u5e8f\u53f7\u4e3a 0\u3002\u5b9e\u9645\u4e0a\uff0cTCP \u8fde\u63a5\u7684\u53cc\u65b9\u968f\u673a\u5730\u9009\u62e9\u521d\u59cb\u5e8f\u53f7\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u51cf\u5c11\u5c06\u90a3\u4e9b\u4ecd\u5728\u7f51\u7edc\u4e2d\u5b58\u5728\u7684\u3001\u6765\u81ea\u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u5148\u524d\u5df2\u7ec8\u6b62\u7684\u8fde\u63a5\u7684\u62a5\u6587\u6bb5\uff0c\u8bef\u8ba4\u4e3a\u662f\u540e\u6765\u8fd9\u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u65b0\u5efa\u8fde\u63a5\u6240\u4ea7\u751f\u7684\u6709\u6548\u62a5\u6587\u6bb5\u7684\u53ef\u80fd\u6027\uff08\u5b83\u78b0\u5de7\u4e0e\u65e7\u8fde\u63a5\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u7aef\u53e3\u53f7\uff09\u3002"),(0,s.kt)("h4",{id:"round-trip-time-estimation-and-timeout"},"Round-Trip Time Estimation and Timeout"),(0,s.kt)("p",null,"TCP uses a timeout/retransmit mechanism to recover from lost segments. Perhaps the most obvious question is the length of the timeout intervals. Clearly, the timeout should be larger than the connection\u2019s round-trip time (RTT). Otherwise, unnecessary retransmissions would be sent."),(0,s.kt)("p",null,"How TCP estimates the round-trip time between sender and receiver? The sample RTT, denoted ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT"),", for a segment is the amount of time between when the segment is sent (that is, passed to IP) and when an acknowledgment for the segment is received. At any point in time, the ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT")," is being estimated for only one of the transmitted but currently unacknowledged segments, leading to a new value of ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT")," approximately once every RTT. Also, TCP ",(0,s.kt)("strong",{parentName:"p"},"never")," computes a ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT")," for a segment that has been retransmitted; it only measures ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT")," for segments that have been transmitted once."),(0,s.kt)("p",null,"Obviously, the ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT")," values will fluctuate. Upon obtaining a new ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT"),", TCP updates ",(0,s.kt)("inlineCode",{parentName:"p"},"EstimatedRTT")," according to the following formula:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"EstimatedRTT = (1 \u2013 \u03b1) * EstimatedRTT + \u03b1 * SampleRTT")," (The recommended value of \u03b1 is 0.125)"),(0,s.kt)("p",null,"Note that EstimatedRTT is a weighted average of the SampleRTT values."),(0,s.kt)("p",null,"It is also valuable to have a measure of the variability of the RTT: ",(0,s.kt)("inlineCode",{parentName:"p"},"DevRTT"),", an estimate of how much ",(0,s.kt)("inlineCode",{parentName:"p"},"SampleRTT")," typically deviates from ",(0,s.kt)("inlineCode",{parentName:"p"},"EstimatedRTT"),"."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"DevRTT = (1 \u2013 \u03b2) * DevRTT + \u03b2 * |SampleRTT \u2013 EstimatedRTT|")," (The recommended value of \u03b2 is 0.25)"),(0,s.kt)("p",null,"It is therefore desirable to set the timeout equal to the ",(0,s.kt)("inlineCode",{parentName:"p"},"EstimatedRTT")," plus some margin:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"TimeoutInterval = EstimatedRTT + 4 * DevRTT")),(0,s.kt)("p",null,"An initial ",(0,s.kt)("inlineCode",{parentName:"p"},"TimeoutInterval")," value of 1 second is recommended ","[RFC 6298]",". Also, when a timeout occurs, the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"TimeoutInterval")," is doubled to avoid a premature timeout occurring for a subsequent segment that will soon be acknowledged. However, as soon as a segment is received and ",(0,s.kt)("inlineCode",{parentName:"p"},"EstimatedRTT")," is updated, the ",(0,s.kt)("inlineCode",{parentName:"p"},"TimeoutInterval")," is again computed using the formula above."),(0,s.kt)("h4",{id:"reliable-data-transfer"},"Reliable Data Transfer"),(0,s.kt)("p",null,"We should keep in mind that reliable data transfer can be provided by link-, network-, transport-, or application-layer protocols."),(0,s.kt)("p",null,"The TCP timer management procedures use only a single retransmission ",(0,s.kt)("strong",{parentName:"p"},"timer"),", even if there are multiple transmitted but not yet acknowledged segments. It is helpful to think of the timer as being associated with the oldest unacknowledged segment."),(0,s.kt)("p",null,"Whenever the timeout event occurs, TCP retransmits the not-yet-acknowledged segment with the smallest sequence number, sets the next timeout interval to twice the previous value. Thus, the intervals grow exponentially after each retransmission. However, whenever the timer is started after either of the two other events (that is, data received from application above, and ACK received), the ",(0,s.kt)("inlineCode",{parentName:"p"},"TimeoutInterval")," is derived from the most recent values of ",(0,s.kt)("inlineCode",{parentName:"p"},"EstimatedRTT")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"DevRTT"),"."),(0,s.kt)("p",null,"One of the problems with timeout-triggered retransmissions is that the timeout period can be relatively long. Fortunately, the sender can often detect packet loss well before the timeout event occurs by noting so-called duplicate ACKs. In the case that ",(0,s.kt)("strong",{parentName:"p"},"three duplicate ACKs")," are received, the TCP sender performs a ",(0,s.kt)("strong",{parentName:"p"},"fast retransmit")," ","[RFC 5681]",", retransmitting the missing segment before that segment\u2019s timer expires."),(0,s.kt)("p",null,"TCP looks a lot like a GBN-style protocol. But there are some striking differences between TCP and Go- Back-N. Many TCP implementations will buffer correctly received but out-of-order segments."),(0,s.kt)("p",null,"A proposed modification to TCP, the so-called selective acknowledgment ","[RFC 2018]",", allows a TCP receiver to acknowledge out-of-order segments selectively rather than just cumulatively acknowledging the last correctly received, in-order segment. When combined with selective retransmission\u2014skipping the retransmission of segments that have already been selectively acknowledged by the receiver\u2014TCP looks a lot like our generic SR protocol. Thus, TCP\u2019s error-recovery mechanism is probably best categorized as a hybrid of GBN and SR protocols."),(0,s.kt)("h4",{id:"flow-control"},"Flow Control"),(0,s.kt)("p",null,"Recall that the hosts on each side of a TCP connection set aside a ",(0,s.kt)("strong",{parentName:"p"},"receive buffer")," for the connection. Because TCP is full-duplex, the sender at each side of the connection maintains a distinct ",(0,s.kt)("strong",{parentName:"p"},"receive window"),"."),(0,s.kt)("p",null,"When the TCP connection receives bytes that are correct and in sequence, it places the data in the receive buffer. The associated application process will read data from this buffer, but not necessarily at the instant the data arrives. If the application is relatively slow at reading the data, the sender can very easily overflow the connection\u2019s receive buffer by sending too much data too quickly."),(0,s.kt)("p",null,"TCP provides a flow-control service to its applications to eliminate the possibility of the sender overflowing the receiver\u2019s buffer. Flow control is thus a speed matching service\u2014matching the rate at which the sender is sending against the rate at which the receiving application is reading."),(0,s.kt)("p",null,"Even though the actions taken by flow and congestion control are similar (the throttling of the sender), they are obviously taken for very different reasons."),(0,s.kt)("p",null,"TCP provides flow control by having the sender maintain a variable called the ",(0,s.kt)("strong",{parentName:"p"},"receive window"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"rwnd = RcvBuffer \u2013 [LastByteRcvd \u2013 LastByteRead]")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(15820).Z,width:"1702",height:"974"})),(0,s.kt)("p",null,"Host A makes sure throughout the connection\u2019s life that, the amount of unacknowledged data that A has sent into the connection, less or equals than the rwnd: ",(0,s.kt)("inlineCode",{parentName:"p"},"LastByteSent \u2013 LastByteAcked <= rwnd"),"."),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/flow-control/index.html"},"interactive animation"),"."),(0,s.kt)("h4",{id:"tcp-connection-management"},"TCP Connection Management"),(0,s.kt)("p",null,"Suppose a process running in one host (client) wants to initiate a connection with another process in another host (server):"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The client-side TCP first sends a special TCP segment, the ",(0,s.kt)("strong",{parentName:"li"},"SYN segment"),", to the server-side TCP. The SYN segment contains no application-layer data. But the SYN bit, is set to 1. In addition, the client randomly chooses an initial sequence number (",(0,s.kt)("inlineCode",{parentName:"li"},"client_isn"),") and puts this number in the sequence number field of the initial TCP SYN segment."),(0,s.kt)("li",{parentName:"ol"},"Once the TCP SYN segment arrives, the server allocates the TCP buffers and variables to the connection, and sends a connection-granted segment, the ",(0,s.kt)("strong",{parentName:"li"},"SYNACK segment"),", to the client TCP. The SYNACK segment also contains no application-layer data. However, it does contain three important pieces of information in the segment header. First, the SYN bit is set to 1. Second, the acknowledgment field of the TCP segment header is set to ",(0,s.kt)("inlineCode",{parentName:"li"},"client_isn+1"),". Finally, the server chooses its own initial sequence number (",(0,s.kt)("inlineCode",{parentName:"li"},"server_isn"),") and puts this value in the sequence number field of the TCP segment header."),(0,s.kt)("li",{parentName:"ol"},"Upon receiving the SYNACK segment, the client also allocates buffers and variables to the connection. The client host then sends the server yet another segment, putting the value ",(0,s.kt)("inlineCode",{parentName:"li"},"server_isn+1")," in the acknowledgment field of the TCP segment header. The SYN bit is set to zero, since the connection is established. This third stage of the three-way handshake may carry client-to-server data in the segment payload.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(25808).Z,width:"1540",height:"1350"})),(0,s.kt)("p",null,"Once these three steps have been completed, the client and server hosts can send segments containing data to each other."),(0,s.kt)("p",null,"Either of the two processes participating in a TCP connection can end the connection. suppose the client decides to close the connection:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The client TCP sends a TCP segment with the FIN bit set to 1.\uff08\u4e4b\u540e\u5ba2\u6237\u7aef\u505c\u6b62\u53d1\u9001\u6570\u636e\uff0c\u4f46\u4ecd\u4f1a\u5bf9\u6536\u5230\u7684\u6570\u636e\u8fdb\u884c\u786e\u8ba4\uff09"),(0,s.kt)("li",{parentName:"ul"},"When the server receives this segment, it sends the client an acknowledgment segment in return.\uff08\u6b64\u65f6\u670d\u52a1\u7aef\u8fd8\u53ef\u80fd\u7ee7\u7eed\u53d1\u9001\u4e00\u4e9b\u6570\u636e\uff0c\u5ba2\u6237\u7aef\u4e5f\u4f1a\u5bf9\u8fd9\u4e9b\u6570\u636e\u8fd4\u56de ACK \u786e\u8ba4\uff09"),(0,s.kt)("li",{parentName:"ul"},"The server then sends its own shutdown segment, which has the FIN bit set to 1.\uff08\u4e4b\u540e\u670d\u52a1\u7aef\u4e5f\u505c\u6b62\u53d1\u9001\u6570\u636e\uff09"),(0,s.kt)("li",{parentName:"ul"},"The client acknowledges the server\u2019s shutdown segment and wait for a time, typically 30 seconds, letting the TCP client resend the final acknowledgment in case the ACK is lost. After the wait, the connection formally closes and all resources on the client side (including port numbers) are released."),(0,s.kt)("li",{parentName:"ul"},"The server receives the final ACK and closes down.")),(0,s.kt)("p",null,"TCP \u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u4e3b\u52a8\u65b9\u548c\u88ab\u52a8\u65b9\u5206\u522b\u53d1\u751f\u4e86\u4ec0\u4e48\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u53cc\u65b9\u90fd\u9700\u8981\u53d1\u9001 FIN \u4fe1\u53f7\uff0c\u5e76\u4e14\uff0c\u53d1\u9001 ACK \u4ee5\u786e\u8ba4\u5bf9\u65b9\u53d1\u7684 FIN \u4fe1\u53f7"),(0,s.kt)("li",{parentName:"ul"},"\u4e3b\u52a8\u65b9\u5728\u53d1\u9001\u6700\u540e\u7684 ACK \u540e\uff0c\u9700\u8981\u7b49\u5f85 2MSL \u7684\u65f6\u95f4\uff0c\u8fd9\u662f\u4e3a\u4e86\u786e\u8ba4\u88ab\u52a8\u65b9\u6536\u5230\u4e86\u6700\u540e\u7684 ACK")),(0,s.kt)("p",null,"The MSL is the maximum amount of time that a TCP segment can live in the network."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(94262).Z,width:"1472",height:"1490"})),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://nmap.org/"},"Nmap"),' ("Network Mapper") is a free and open source (license) utility for network discovery and security auditing.')),(0,s.kt)("h4",{id:"classic-tcp-congestion-control-tcp-reno"},"Classic TCP Congestion Control (TCP Reno)"),(0,s.kt)("p",null,"TCP \u62e5\u585e\u63a7\u5236\u7684\u65b9\u6cd5\u662f\u8ba9\u6bcf\u4e00\u4e2a\u53d1\u9001\u65b9\u6839\u636e\u6240\u611f\u77e5\u5230\u7684\u7f51\u7edc\u62e5\u585e\u7a0b\u5ea6\u6765\u9650\u5236\u5176\u53d1\u9001\u6d41\u91cf\u7684\u901f\u7387\u3002"),(0,s.kt)("p",null,"The TCP congestion-control mechanism operating at the ",(0,s.kt)("strong",{parentName:"p"},"sender")," keeps track of an additional variable, the ",(0,s.kt)("strong",{parentName:"p"},"congestion window"),", denoted ",(0,s.kt)("inlineCode",{parentName:"p"},"cwnd"),". Specifically, the amount of unacknowledged data at a sender may not exceed the minimum of ",(0,s.kt)("inlineCode",{parentName:"p"},"cwnd")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"rwnd"),", that is: ",(0,s.kt)("inlineCode",{parentName:"p"},"LastByteSent \u2013 LastByteAcked <= min{cwnd, rwnd}"),".\uff08TCP \u6d41\u6c34\u7ebf\u4e2d\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u7684\u3001\u5373\u672a\u7ecf ACK \u786e\u8ba4\u7684\u6570\u636e\u91cf\uff0c\u4e0d\u80fd\u8d85\u8fc7\u62e5\u585e\u7a97\u53e3\u548c\u63a5\u6536\u7a97\u53e3\u4e2d\u7684\u8f83\u5c0f\u503c\uff09"),(0,s.kt)("p",null,"The constraint above limits the amount of unacknowledged data at the sender and therefore indirectly limits the sender\u2019s send rate."),(0,s.kt)("p",null,"There is no explicit signaling of congestion state by the network\u2014",(0,s.kt)("strong",{parentName:"p"},"ACKs and loss events")," serve as implicit signals. The loss event at the sender\u2014either a timeout or the receipt of three duplicate ACKs (totally 4 ACKs)\u2014which is taken by the sender to be an indication of congestion on the sender-to-receiver path. An acknowledged segment indicates that the network is delivering the sender\u2019s segments to the receiver, and hence, the sender\u2019s rate can be increased when an ACK arrives."),(0,s.kt)("p",null,"We\u2019re now in a position to consider the details of the celebrated ",(0,s.kt)("strong",{parentName:"p"},"TCP congestion-control algorithm"),", which has three major components: (1) slow start, (2) congestion avoidance, and (3) fast recovery."),(0,s.kt)("p",null,"In the ",(0,s.kt)("strong",{parentName:"p"},"slow-start")," state, the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"cwnd")," begins at 1 MSS and increases by 1 MSS every time a transmitted segment is first acknowledged. This process results in a doubling of the sending rate every RTT. Thus, the TCP send rate starts slow but grows exponentially during the slow start phase."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Timeout: ",(0,s.kt)("inlineCode",{parentName:"li"},"ssthresh = cwnd/2; cwnd = 1 MSS;"),", begins the slow start process anew."),(0,s.kt)("li",{parentName:"ul"},"3 duplicate ACKs: ",(0,s.kt)("inlineCode",{parentName:"li"},"ssthresh = cwnd/2; cwnd = ssthresh + 3 * MSS;"),", performs a fast retransmit and enters the fast recovery state."),(0,s.kt)("li",{parentName:"ul"},"When ",(0,s.kt)("inlineCode",{parentName:"li"},"cwnd == ssthresh"),", slow start ends and TCP transitions into congestion avoidance mode.")),(0,s.kt)("p",null,"On entry to the ",(0,s.kt)("strong",{parentName:"p"},"congestion-avoidance state"),", TCP linearly increases the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"cwnd")," by just a single MSS every RTT."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Timeout: ",(0,s.kt)("inlineCode",{parentName:"li"},"ssthresh = cwnd/2; cwnd = 1 MSS;"),", begins the slow start process anew."),(0,s.kt)("li",{parentName:"ul"},"3 duplicate ACKs: ",(0,s.kt)("inlineCode",{parentName:"li"},"ssthresh = cwnd/2; cwnd = ssthresh + 3 * MSS;"),", performs a fast retransmit and enters the fast recovery state.")),(0,s.kt)("p",null,"In ",(0,s.kt)("strong",{parentName:"p"},"fast recovery state"),", the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"cwnd")," is increased by 1 MSS for every duplicate ACK received for the missing segment. Eventually, when an ACK arrives for the missing segment, TCP enters the congestion-avoidance state and sets ",(0,s.kt)("inlineCode",{parentName:"p"},"cwnd = ssthresh"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Timeout: ",(0,s.kt)("inlineCode",{parentName:"li"},"ssthresh = cwnd/2; cwnd = 1 MSS;"),", begins the slow start process anew.")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"[1]"," ssthresh: slow start threshold."),(0,s.kt)("p",{parentName:"blockquote"},"[2]",' Adding in 3 MSS for good measure to account for the triple duplicate ACKs received. This artificially "inflates" the congestion window by the number of segments (three) that have left the network and which the receiver has buffered ',"[RFC 2582]",".")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(45285).Z,width:"2049",height:"1667"})),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The arrows in the FSM description indicate the transition of the protocol from one state to another."),(0,s.kt)("p",{parentName:"blockquote"},"The event causing the transition is shown above the horizontal line labeling the transition, and the actions taken when the event occurs are shown below the horizontal line."),(0,s.kt)("p",{parentName:"blockquote"},"When no action is taken on an event, or no event occurs and an action is taken, we\u2019ll use the symbol \u039b below or above the horizontal, respectively, to explicitly denote the lack of an action or event."),(0,s.kt)("p",{parentName:"blockquote"},"The initial state of the FSM is indicated by the dashed arrow.")),(0,s.kt)("p",null,"Ignoring the slow-start phase (This phase is typically very short, since the sender grows out of the phase exponentially fast) and assuming that losses are indicated by triple duplicate ACKs, TCP\u2019s congestion control consists of linear (additive) increase in cwnd of 1 MSS per RTT and then a halving (multiplicative decrease) of cwnd on a triple duplicate-ACK event. For this reason, TCP congestion control is often referred to as an ",(0,s.kt)("strong",{parentName:"p"},"additive-increase, multiplicative-decrease (AIMD)")," form of congestion control."),(0,s.kt)("p",null,"TCP Reno\u2019s AIMD to congestion control may be overly cautious. It\u2019s better to more quickly ramp up the sending rate to get close to the pre-loss sending rate and only then probe cautiously for bandwidth. This insight lies at the heart of a flavor of TCP known as TCP CUBIC, who has recently gained wide deployment."),(0,s.kt)("h4",{id:"explicit-congestion-notification-and-delayed-based-congestion-control"},"Explicit Congestion Notification and Delayed-based Congestion Control"),(0,s.kt)("p",null,"TCP \u62e5\u585e\u63a7\u5236\u5df2\u7ecf\u6f14\u5316\u4e86\u591a\u5e74\u5e76\u4ecd\u5728\u7ee7\u7eed\u6f14\u5316\u3002"),(0,s.kt)("p",null,"More recently, extensions to both IP and TCP ","[RFC 3168]"," have been proposed, implemented, and deployed that allow the network to explicitly signal congestion to a TCP sender and receiver."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Explicit Congestion Notification (ECN)"),' \u663e\u5f0f\u963b\u585e\u901a\u77e5 is the form of network-assisted congestion control performed within the Internet. Both TCP and IP are involved. At the network layer, two bits (with four possible values, overall) in the "Type of Service field" of the IP datagram header are used for ECN.'),(0,s.kt)("p",null,"One setting of the ECN bits is used by a router to indicate that it (the router) is experiencing congestion. A second setting of the ECN bits is used by the sending host to inform routers that the sender and receiver are ECN-capable, and thus capable of taking action in response to ECN-indicated network congestion."),(0,s.kt)("p",null,"The intuition is that the congestion indication bit can be set to signal the onset of congestion to the sender before loss actually occurs."),(0,s.kt)("p",null,"As shown in Figure 3.55, when the TCP in the receiving host receives an ECN congestion indication via a received IP datagram, the TCP in the receiving host informs the TCP in the sending host of the congestion indication by setting the ECE (Explicit Congestion Notification Echo) bit in a receiver-to-sender TCP ACK segment. The TCP sender, in turn, reacts by halving the congestion window, as it would react to a lost segment using fast retransmit, and sets the CWR (Congestion Window Reduced) bit in the header of the next transmitted TCP sender-to-receiver segment."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(29498).Z,width:"2108",height:"1374"})),(0,s.kt)("p",null,"In addition, a number of variations of TCP congestion control protocols have been proposed that infer congestion using measured packet delay."),(0,s.kt)("h4",{id:"fairness"},"Fairness"),(0,s.kt)("p",null,"TCP \u7684 AIMD \u7b97\u6cd5\u516c\u5e73\u5417? TCP \u8d8b\u4e8e\u5728\u7ade\u4e89\u7684\u591a\u6761 TCP \u8fde\u63a5\u4e4b\u95f4\u63d0\u4f9b\u5bf9\u74f6\u9888\u94fe\u8def\u5e26\u5bbd\u7684\u5e73\u7b49\u5206\u4eab\u3002\u4f46\u5b9e\u8df5\u4e2d\uff0c\u90a3\u4e9b\u5177\u6709\u8f83\u5c0f RTT \u7684\u8fde\u63a5\u80fd\u591f\u901a\u8fc7\u66f4\u5feb\u5730\u589e\u5927\u5176\u62e5\u585e\u7a97\u53e3\u3001\u62a2\u5230\u66f4\u591a\u7684\u53ef\u7528\u5e26\u5bbd\uff0c\u56e0\u800c\u6bd4\u90a3\u4e9b\u5177\u6709\u8f83\u5927 RTT \u7684\u8fde\u63a5\u4eab\u7528\u66f4\u9ad8\u7684\u541e\u5410\u91cf\u3002"),(0,s.kt)("p",null,"UDP \u662f\u6ca1\u6709\u5185\u7f6e\u7684\u62e5\u585e\u63a7\u5236\u7684\u3002\u5b9e\u65f6\u901a\u8bdd\u5e94\u7528\u901a\u5e38\u5e0c\u671b\u4ee5\u6052\u5b9a\u7684\u901f\u7387\u5c06\u5176\u6570\u636e\u6ce8\u5165\u7f51\u7edc\uff0c\u5b83\u4eec\u53ef\u4ee5\u63a5\u53d7\u5076\u5c14\u4e22\u5931\u5206\u7ec4\uff0c\u4f46\u4e0d\u613f\u5728\u62e5\u585e\u65f6\u5c06\u5176\u53d1\u9001\u901f\u7387\u964d\u81f3\u201c\u516c\u5e73\u201d\u7ea7\u522b\u800c\u4e0d\u4e22\u5931\u4efb\u4f55\u5206\u7ec4\u3002\u4ece TCP \u7684\u89c2\u70b9\u6765\u770b\uff0c\u8fd0\u884c\u5728 UDP \u4e0a\u7684\u5e94\u7528\u662f\u4e0d\u516c\u5e73\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4e0e\u5176\u4ed6\u8fde\u63a5\u5408\u4f5c\u3001\u9002\u65f6\u5730\u8c03\u6574\u4f20\u8f93\u901f\u7387\uff0cUDP \u6709\u53ef\u80fd\u538b\u5236 TCP \u6d41\u91cf\u3002\u5f53\u4eca\u7684\u4e00\u4e2a\u4e3b\u8981\u7814\u7a76\u9886\u57df\u5c31\u662f\u56e0\u7279\u7f51\u7684\u62e5\u585e\u63a7\u5236\u673a\u5236\uff0c\u7528\u4e8e\u963b\u6b62 UDP \u6d41\u91cf\u4e0d\u65ad\u538b\u5236\u76f4\u81f3\u4e2d\u65ad\u56e0\u7279\u7f51\u541e\u5410\u91cf\u7684\u60c5\u51b5\u3002"),(0,s.kt)("p",null,"\u5373\u4f7f\u6211\u4eec\u80fd\u591f\u4f7f UDP \u6d41\u91cf\u5177\u6709\u516c\u5e73\u7684\u884c\u4e3a\uff0c\u4f46\u516c\u5e73\u6027\u95ee\u9898\u4ecd\u7136\u6ca1\u6709\u5b8c\u5168\u89e3\u51b3\u3002\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u963b\u6b62\u5e94\u7528\u4f7f\u7528\u591a\u4e2a\u5e76\u884c TCP \u8fde\u63a5\u3002\u4f8b\u5982\uff0cWeb \u6d4f\u89c8\u5668\u901a\u5e38\u4f7f\u7528\u591a\u4e2a\u5e76\u884c TCP \u8fde\u63a5\u6765\u4f20\u9001\u4e00\u4e2a Web"),(0,s.kt)("h3",{id:"evolution"},"Evolution"),(0,s.kt)("p",null,"Three decades of experience with TCP and UDP has identified circumstances in which neither is ideally suited, and so the design and implementation of transport layer functionality has continued to evolve."),(0,s.kt)("p",null,"Indeed, measurements in ","[Yang 2014]"," indicate that CUBIC (and its predecessor, BIC ","[Xu 2004]",") and CTCP are more widely deployed on Web servers than classic ",(0,s.kt)("strong",{parentName:"p"},"TCP Reno"),"; we also saw that BBR is being deployed in Google\u2019s internal B4 network, as well as on many of Google\u2019s public-facing servers. And there are many (many!) more versions of TCP!"),(0,s.kt)("p",null,"QUIC is a new application-layer protocol designed from the ground up to improve the performance of transport-layer services for secure HTTP. QUIC has already been widely deployed, although is still in the process of being standardized as an Internet RFC."),(0,s.kt)("p",null,"QUIC is an application-layer protocol, using UDP as its underlying transport-layer protocol, and is designed to interface above specifically to a simplified but evolved version of HTTP/2. In the near future, HTTP/3 will natively incorporate QUIC."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img-80",src:a(85609).Z,width:"2508",height:"1066"})),(0,s.kt)("p",null,"Some of QUIC\u2019s major features include:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Connection-Oriented and Secure. QUIC combines the handshakes needed to establish connection state with those needed for authentication and encryptionm, thus providing faster establishment."),(0,s.kt)("li",{parentName:"ul"},"Streams. QUIC allows several different application-level \u201cstreams\u201d to be multiplexed through a single QUIC connection. Data from multiple streams may be contained within a single QUIC segment, which is carried over UDP."),(0,s.kt)("li",{parentName:"ul"},"Reliable, TCP-friendly congestion-controlled data transfer. QUIC provides reliable data transfer to each QUIC stream separately. Since QUIC provides a reliable in-order delivery on a per-stream basis, a lost UDP segment only impacts those streams whose data was carried in that segment; HTTP messages in other streams can continue to be received and delivered to the application. QUIC provides reliable data transfer using acknowledgment mechanisms similar to TCP\u2019s, as specified in ","[RFC 5681]",".")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(82131).Z,width:"2334",height:"1128"})),(0,s.kt)("h2",{id:"network-layer"},"Network Layer"),(0,s.kt)("p",null,"Having now covered the application layer and the transport layer, our discussion of the network edge is complete. It is time to explore the network core!"),(0,s.kt)("p",null,"The network layer is arguably the most complex layer in the protocol stack. We\u2019ll see that the network layer can be decomposed into two interacting parts, the ",(0,s.kt)("strong",{parentName:"p"},"data plane")," and the ",(0,s.kt)("strong",{parentName:"p"},"control plane"),"."),(0,s.kt)("p",null,"In Chapter 4, we\u2019ll first cover the data plane functions\u2014the ",(0,s.kt)("strong",{parentName:"p"},"per-router")," functions that determine how a datagram arriving on one of a router\u2019s input links is forwarded to one of that router\u2019s output links."),(0,s.kt)("p",null,"In Chapter 5, we\u2019ll cover the control plane functions\u2014the ",(0,s.kt)("strong",{parentName:"p"},"network-wide")," logic that controls how a datagram is routed among routers along an end-to-end path from the source host to the destination host, also, how network-layer components and services are configured and managed."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Forwarding")," refers to the router-local action of transferring a packet from an input link interface to the appropriate output link interface. Forwarding takes place at very short timescales (typically a few nanoseconds), and thus is typically implemented in hardware."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Routing")," refers to the network-wide process that determines the end-to-end paths that packets take from source to destination. Routing takes place on much longer timescales (typically seconds), and as we will see is often implemented in software."),(0,s.kt)("p",null,"Some packet switches, called ",(0,s.kt)("strong",{parentName:"p"},"link-layer switches"),", base their forwarding decision on values in the fields of the link-layer frame; switches are thus referred to as link-layer (layer 2) devices. Other packet switches, called ",(0,s.kt)("strong",{parentName:"p"},"routers"),", base their forwarding decision on header field values in the network-layer datagram. Routers are thus network-layer (layer 3) devices."),(0,s.kt)("h3",{id:"data-plane"},"Data Plane"),(0,s.kt)("h4",{id:"router"},"Router"),(0,s.kt)("p",null,"\u4e00\u53f0\u8def\u7531\u5668\u7684\u7ec4\u6210\uff1a\uff08\u6ce8\u610f\u8fd9\u91cc\u7684\u7aef\u53e3\u6307\u7684\u662f\u7269\u7406\u786c\u4ef6\u7aef\u53e3\uff0c\u800c\u975e\u8f6f\u4ef6\u7aef\u53e3\uff09"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Input ports. It is here that the forwarding table is consulted to determine the router output port to which an arriving packet will be forwarded via the switching fabric. Control packets (for example, packets carrying routing protocol information) are forwarded from an input port to the routing processor."),(0,s.kt)("li",{parentName:"ul"},"Switching fabric. The switching fabric connects the router\u2019s input ports to its output ports. A network inside of a router!"),(0,s.kt)("li",{parentName:"ul"},"Output ports. An output port stores packets received from the switching fabric and transmits these packets on the outgoing link."),(0,s.kt)("li",{parentName:"ul"},"Routing processor. The routing processor performs control-plane functions. In traditional routers, it executes the routing protocols, maintains routing tables and attached link state information, and computes the forwarding table for the router. In SDN routers, the routing processor is responsible for communicating with the remote controller in order to (among other activities) receive forwarding table entries computed by the remote controller, and install these entries in the router\u2019s input ports.")),(0,s.kt)("p",null,"A router\u2019s input ports, output ports, and switching fabric are almost always implemented in hardware."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(33329).Z,width:"2560",height:"1280"})),(0,s.kt)("p",null,"The lookup performed in the input port is central to the router\u2019s operation\u2014it is here that the router uses the forwarding table to look up the output port to which an arriving packet will be forwarded via the switching fabric."),(0,s.kt)("p",null,"The forwarding table is either computed and updated by the routing processor (using a routing protocol to interact with the routing processors in other network routers, the traditional approach) or is received from a remote SDN controller (The SDN approach)."),(0,s.kt)("p",null,"We\u2019ll initially assume in this section that forwarding decisions are based only on the packet\u2019s destination address, rather than on a generalized set of packet header fields. The router matches a ",(0,s.kt)("strong",{parentName:"p"},"prefix")," of the packet\u2019s destination address with the entries in the table; When there are multiple matches, the router uses the ",(0,s.kt)("strong",{parentName:"p"},"longest prefix matching")," rule."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Prefix"),(0,s.kt)("th",{parentName:"tr",align:null},"Link Interface"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"11001000 00010111 00010"),(0,s.kt)("td",{parentName:"tr",align:null},"0")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"11001000 00010111 00011000"),(0,s.kt)("td",{parentName:"tr",align:null},"1")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"11001000 00010111 00011"),(0,s.kt)("td",{parentName:"tr",align:null},"2")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Otherwise"),(0,s.kt)("td",{parentName:"tr",align:null},"3")))),(0,s.kt)("p",null,"Once a packet\u2019s output port has been determined via the lookup, the packet can be sent into the switching fabric."),(0,s.kt)("p",null,"Switching can be accomplished in a number of ways: Switching via memory; Switching via a bus; Switching via an interconnection network."),(0,s.kt)("p",null,"If the switch fabric is not fast enough (relative to the input line speeds) to transfer all arriving packets through the fabric without delay, packet queuing can occur at the input ports."),(0,s.kt)("p",null,"Output port processing takes packets that have been stored in the output port\u2019s memory and transmits them over the output link. This includes selecting and de-queueing packets for transmission, and performing the needed link-layer and physical-layer transmission functions."),(0,s.kt)("h4",{id:"ipv4"},"IPv4"),(0,s.kt)("p",null,"Note that an IP datagram has a total of 20 bytes of header (assuming no options). If the datagram carries a TCP segment, then each datagram carries a total of 40 bytes of header (20 bytes of IP header plus 20 bytes of TCP header) along with the application-layer message."),(0,s.kt)("p",null,"A host typically has only a single link into the network. The boundary between the host and the physical link is called an ",(0,s.kt)("strong",{parentName:"p"},"interface"),". The boundary between the router and any one of its links is also called an interface. A router thus has multiple interfaces, one for each of its links. Because every host and router is capable of sending and receiving IP datagrams, IP requires each host and router interface to have its own IP address. Thus, ",(0,s.kt)("strong",{parentName:"p"},"an IP address is technically associated with an interface, rather than with the host or router containing that interface"),"."),(0,s.kt)("p",null,"Each IP address is 32 bits long (4 bytes), and there are thus a total of ",(0,s.kt)("inlineCode",{parentName:"p"},"2 ^ 32")," (or approximately 4 billion) possible IP addresses."),(0,s.kt)("p",null,"Each interface on every host and router in the global Internet must have an IP address that is globally unique (except for interfaces behind NATs)."),(0,s.kt)("p",null,"Figure 4.18 provides an example of IP addressing and interfaces."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img-70",src:a(1047).Z,width:"2146",height:"1568"})),(0,s.kt)("p",null,"The three hosts in the upper-left portion of Figure 4.18, and the router interface to which they are connected, all have an IP address of the form 223.1.1.xxx. In IP terms, this network interconnecting three host interfaces and one router interface forms a ",(0,s.kt)("strong",{parentName:"p"},"subnet"),". IP addressing assigns an address to this subnet: 223.1.1.0/24, where the /24 notation, sometimes known as a ",(0,s.kt)("strong",{parentName:"p"},"subnet mask")," \u5b50\u7f51\u63a9\u7801, indicates that the leftmost 24 bits of the 32-bit quantity define the subnet address. Any additional hosts attached to the 223.1.1.0/24 subnet would be required to have an address of the form 223.1.1.xxx."),(0,s.kt)("p",null,"It\u2019s clear that an organization (such as a company or academic institution) with multiple Ethernet segments and point-to-point links will have multiple subnets, with all of the devices on a given subnet having the same subnet address."),(0,s.kt)("p",null,"The global Internet\u2019s address assignment strategy is known as ",(0,s.kt)("strong",{parentName:"p"},"Classless Interdomain Routing")," (CIDR\u2014pronounced cider) ","[RFC 4632]",". CIDR generalizes the notion of subnet addressing. As with subnet addressing, the 32-bit IP address is divided into two parts and again has the dotted-decimal form a.b.c.d/x, where x indicates the number of bits in the first part of the address."),(0,s.kt)("p",null,"An organization is typically assigned a block of contiguous addresses, that is, a range of addresses with a common prefix. In this case, the IP addresses of devices within the organization will share the common prefix."),(0,s.kt)("p",null,"The remaining ",(0,s.kt)("inlineCode",{parentName:"p"},"32 - x")," bits of an address can be thought of as distinguishing among the devices within the organization, all of which have the same network prefix. These are the bits that will be considered only when forwarding packets at routers within the organization. These lower-order bits may (or may not) have an additional subnetting structure. \uff08\u7ec4\u7ec7\u5185\u90e8\u53c8\u53ef\u4ee5\u5206\u5272\u6210\u66f4\u591a\u7684\u5b50\u7f51\uff09"),(0,s.kt)("p",null,"IP broadcast address: When a host sends a datagram with destination address 255.255.255.255, the message is delivered to all hosts on the same subnet (e.g. using in DHCP)."),(0,s.kt)("p",null,"Let\u2019s begin looking at how an organization gets a block of addresses for its devices, and then look at how a device (such as a host) is assigned an address from within the organization\u2019s block of addresses."),(0,s.kt)("p",null,"In order to obtain a block of IP addresses for use within an organization\u2019s subnet, a network administrator might first contact its ISP, which would provide addresses from a larger block of addresses that had already been allocated to the ISP."),(0,s.kt)("p",null,"Is there a global authority that has ultimate responsibility for managing the IP address space and allocating address blocks to ISPs and other organizations? IP addresses are managed under the authority of the ICANN. The role of the nonprofit ICANN organization is not only to allocate IP addresses, but also to manage the DNS root servers."),(0,s.kt)("p",null,"Once an organization has obtained a block of addresses, it can assign individual IP addresses to the host and router interfaces in its organization. Typically this is done using the ",(0,s.kt)("strong",{parentName:"p"},"Dynamic Host Configuration Protocol (DHCP)"),". DHCP allows a host to obtain (be allocated) an IP address automatically. A network administrator can configure DHCP so that a given host receives the same IP address each time it connects to the network, or a host may be assigned a temporary IP address that will be different each time the host connects to the network. In addition to host IP address assignment, DHCP also allows a host to learn additional information, such as its subnet mask, the address of its first-hop router (often called the default gateway), and the address of its local DNS server."),(0,s.kt)("p",null,"DHCP is a client-server protocol. A client is typically a newly arriving host wanting to obtain network configuration information, including an IP address for itself. In the simplest case, each subnet will have a DHCP server. If no server is present on the subnet, a DHCP relay agent (typically a router) that knows the address of a DHCP server for that network is needed."),(0,s.kt)("p",null,"For a newly arriving host, the DHCP protocol is a four-step process: DHCP server discovery; DHCP server offer(s); DHCP request; DHCP ACK."),(0,s.kt)("h4",{id:"nat"},"NAT"),(0,s.kt)("p",null,"The address space 10.0.0.0/8 is one of three portions of the IP address space that is reserved in ","[RFC 1918]"," for a private network. The other two are 172.16.0.0/12, 192.168.0.0/16."),(0,s.kt)("p",null,"Figure 4.25 shows the operation of ",(0,s.kt)("strong",{parentName:"p"},"Network Address Translation (NAT)"),". The NAT-enabled router, residing in the home, has an interface that is part of the home network on the right of Figure 4.25."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(88688).Z,width:"2404",height:"1278"})),(0,s.kt)("p",null,"The NAT router behaves to the outside world as a single device with a single IP address. The router gets its address from the ISP\u2019s DHCP server, and the router runs a DHCP server to provide addresses to computers within the NAT-DHCP-router-controlled home network\u2019s address space."),(0,s.kt)("p",null,"If all datagrams arriving at the NAT router from the WAN (Wide area network) have the same destination IP address, then how does the router know the internal host to which it should forward a given datagram? The trick is to use a ",(0,s.kt)("strong",{parentName:"p"},"NAT translation table")," at the NAT router, and to include port numbers as well as IP addresses in the table entries."),(0,s.kt)("h4",{id:"ipv6"},"IPv6"),(0,s.kt)("p",null,"In the early 1990s, the Internet Engineering Task Force began an effort to develop a successor to the IPv4 protocol. A prime motivation for this effort was the realization that the 32-bit IPv4 address space was beginning to be used up."),(0,s.kt)("p",null,"The most important changes introduced in IPv6 are evident in the datagram format: IPv6 increases the size of the IP address from 32 to 128 bits. This ensures that the world won\u2019t run out of IP addresses."),(0,s.kt)("p",null,"How will the public Internet, which is based on IPv4, be transitioned to IPv6? The problem is that while new IPv6-capable systems can be made backward-compatible, that is, can send, route, and receive IPv4 datagrams, already deployed IPv4-capable systems are not capable of handling IPv6 datagrams."),(0,s.kt)("p",null,"The approach to IPv4-to-IPv6 transition that has been most widely adopted in practice involves ",(0,s.kt)("strong",{parentName:"p"},"tunneling"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img-80",src:a(36807).Z,width:"1832",height:"1538"})),(0,s.kt)("p",null,"Suppose two IPv6 nodes (in this example, B and E in Figure 4.27) want to interoperate using IPv6 datagrams but are connected to each other by intervening IPv4 routers. We refer to the intervening set of IPv4 routers between two IPv6 routers as a tunnel. With tunneling, the IPv6 node on the sending side of the tunnel (in this example, B) takes the entire IPv6 datagram and puts it in the data (payload) field of an IPv4 datagram. This IPv4 datagram is then addressed to the IPv6 node on the receiving side of the tunnel (in this example, E) and sent to the first node in the tunnel (in this example, C). The intervening IPv4 routers in the tunnel route this IPv4 datagram among themselves, just as they would any other datagram. The IPv6 node on the receiving side determines that the payload is a IPv6 datagram, extracts the IPv6 datagram, and then routes the IPv6 datagram exactly as it would if it had received the IPv6 datagram from a directly connected IPv6 neighbor."),(0,s.kt)("h3",{id:"control-plane"},"Control Plane"),(0,s.kt)("p",null,"We saw that the forwarding table (in the case of destination-based forwarding) and the flow table (in the case of generalized forwarding) were the principal elements that linked the network layer\u2019s data and control planes. We saw that in the case of generalized forwarding, the actions taken could include not only forwarding a packet to a router\u2019s output port, but also dropping a packet, replicating a packet, and/or rewriting layer 2, 3 or 4 packet-header fields."),(0,s.kt)("p",null,"In this chapter, we\u2019ll study how those forwarding and flow tables are computed, maintained and installed. We learned that there are two possible approaches for doing so:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Per-router control: Each router has a routing component that communicates with the routing components in other routers to compute the values for its forwarding table. This per-router control approach has been used in the Internet for decades. The OSPF and BGP are based on this per-router approach to control."),(0,s.kt)("li",{parentName:"ul"},"Software-defined networking (SDN) control: A logically centralized controller computes and distributes the forwarding tables to be used by each and every router. The OpenFlow protocol operates between an SDN controller and an SDN-controlled switch or other device implementing the OpenFlow API. The OpenFlow protocol operates over TCP, with a default port number of 6653.")),(0,s.kt)("h4",{id:"routing-algorithms"},"Routing Algorithms"),(0,s.kt)("p",null,"The goal of routing algorithms is to determine the least cost paths (equivalently, routes), from senders to receivers, through the network of routers. A ",(0,s.kt)("strong",{parentName:"p"},"graph")," is used to formulate routing problems. The least-cost problem is therefore clear: Find a path between the source and destination that has least cost. Note that if all edges in the graph have the same cost, the ",(0,s.kt)("strong",{parentName:"p"},"least-cost path")," is also the shortest path (that is, the path with the smallest number of links between the source and the destination)."),(0,s.kt)("p",null,"A centralized routing algorithm computes the least-cost path using complete, global knowledge about the network. Algorithms with global state information are often referred to as ",(0,s.kt)("strong",{parentName:"p"},"link-state (LS) algorithms"),", since the algorithm must be aware of the cost of each link in the network. In practice, this is accomplished by having each node broadcast link-state packets to all other nodes in the network, with each link-state packet containing the identities and costs of its attached links. In practice (for example, with the Internet\u2019s OSPF routing protocol), this is often accomplished by a link-state broadcast algorithm. The result of the nodes\u2019 broadcast is that all nodes have an identical and complete view of the network. Each node can then run the LS algorithm and compute the same set of least-cost paths as every other node."),(0,s.kt)("p",null,"In a decentralized routing algorithm, the calculation of the least-cost path is carried out in an iterative, distributed manner by the routers. No node has complete information about the costs of all network links. Instead, each node begins with only the knowledge of the costs of its own directly attached links. Then, through an iterative process of calculation and exchange of information with its neighboring nodes, a node gradually calculates the least-cost path to a destination or set of destinations. The decentralized routing algorithm we\u2019ll study is called a ",(0,s.kt)("strong",{parentName:"p"},"distance-vector (DV) algorithm"),", because each node maintains a vector of estimates of the costs (distances) to all other nodes in the network. Such decentralized algorithms, with interactive message exchange between neighboring routers is perhaps more naturally suited to control planes where the routers interact directly with each other."),(0,s.kt)("p",null,"Neither algorithm is an obvious winner over the other; indeed, both algorithms are used in the Internet. These two algorithms are the basis for two widely deployed Internet routing protocols, OSPF and BGP."),(0,s.kt)("h4",{id:"ospf-and-bgp"},"OSPF and BGP"),(0,s.kt)("p",null,"In our study of routing algorithms, we\u2019ve viewed the network simply as a collection of interconnected routers. In practice, this model is simplistic for two important reasons: First, today\u2019s Internet consists of hundreds of millions of routers. Storing routing information for possible destinations at each of these routers would clearly require enormous amounts of memory. The overhead required to broadcast connectivity and link cost updates among all of the routers would be huge! A distance-vector algorithm that iterated among such a large number of routers would surely never converge. Clearly, something must be done to reduce the complexity of route computation in a network as large as the Internet. Second, the Internet is a network of ISPs, with each ISP consisting of its own network of routers. An ISP generally desires to operate its network as it pleases or to hide aspects of its network\u2019s internal organization from the outside. Ideally, an organization should be able to operate and administer its network as it wishes, while still being able to connect its network to other outside networks."),(0,s.kt)("p",null,"Both of these problems can be solved by organizing routers into ",(0,s.kt)("strong",{parentName:"p"},"autonomous systems (ASs)"),", with each AS consisting of a group of routers that are under the same administrative control. An autonomous system is identified by its globally unique autonomous system number (ASN). AS numbers, like IP addresses, are assigned by ICANN regional registries."),(0,s.kt)("p",null,"Routers within the same AS all run the same routing algorithm and have infor- mation about each other. The routing algorithm running within an autonomous sys- tem is called an intra-autonomous system routing protocol. OSPF routing and its closely related cousin, IS-IS, are widely used for intra-AS routing in the Internet."),(0,s.kt)("p",null,"Since an inter-AS routing protocol involves coordination among multiple ASs, communicating ASs must run the same inter-AS routing protocol. In fact, in the Internet, all ASs run the same inter-AS routing protocol, called the Border Gateway Protocol, more commonly known as ",(0,s.kt)("strong",{parentName:"p"},"BGP"),"."),(0,s.kt)("h4",{id:"managing-the-ip-network"},"Managing the IP Network"),(0,s.kt)("p",null,"The Internet Control Message Protocol (ICMP), specified in ","[RFC 792]",", is used by hosts and routers to communicate network-layer information to each other."),(0,s.kt)("p",null,"In practice, there are three commonly used ways in a network operator can manage the network:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"CLI. A network operator may issue direct Command Line Interface (CLI) commands to the device. These commands can be typed directly on a managed device\u2019s console (if the operator is physically present at the device), or over a Telnet or secure shell (SSH) connection, possibly via scripting, between the managing server/controller and the managed device."),(0,s.kt)("li",{parentName:"ul"},"SNMP/MIB. In this approach, the network operator can query/set the data contained in a device\u2019s Management Information Base (MIB) objects using the Simple Network Management Protocol (SNMP)."),(0,s.kt)("li",{parentName:"ul"},"NETCONF/YANG. The NETCONF/YANG approach takes a more abstract, network-wide, and holistic view toward network management, with a much stronger emphasis on configuration management, including specifying correctness constraints and providing atomic management operations over multiple controlled devices. YANG ","[RFC 6020]"," is a data modeling language used to model configuration and operational data. The NETCONF protocol ","[RFC 6241]"," is used to communicate YANG-compatible actions and data to/from/among remote devices.")),(0,s.kt)("h2",{id:"link-layer"},"Link Layer"),(0,s.kt)("p",null,"We refer to any device that runs a link-layer protocol as a ",(0,s.kt)("strong",{parentName:"p"},"node"),". Nodes include hosts, routers, switches, and WiFi access points. We will also refer to the communication channels that connect adjacent nodes along the communication path as ",(0,s.kt)("strong",{parentName:"p"},"links"),"."),(0,s.kt)("p",null,"The basic service of the link layer is to move a network-layer datagram from one node to an adjacent node."),(0,s.kt)("p",null,"In order for a datagram to be transferred from source host to destination host, it must be moved over each of the individual links in the end-to-end path. Over a given link, a transmitting node encapsulates the datagram in a ",(0,s.kt)("strong",{parentName:"p"},"link-layer frame")," and transmits the frame into the link."),(0,s.kt)("p",null,"There are two types of network links: point-to-point links and broadcast links."),(0,s.kt)("p",null,"A point-to-point link consists of a single sender at one end of the link and a single receiver at the other end of the link. The point-to-point protocol (PPP) and high-level data link control (HDLC) are two protocols designed for point-to-point links."),(0,s.kt)("p",null,"A broadcast link, can have multiple sending and receiving nodes all connected to the same, single, shared broadcast channel. The term broadcast is used here because when any one node transmits a frame, the channel broadcasts the frame and each of the other nodes receives a copy. Ethernet and wireless LANs are examples of broadcast link-layer technologies."),(0,s.kt)("h3",{id:"multiple-access-protocols"},"Multiple Access Protocols"),(0,s.kt)("p",null,"A problem of central importance to the link layer: how to coordinate the access of multiple sending and receiving nodes to a shared broadcast channel\u2014the ",(0,s.kt)("strong",{parentName:"p"},"multiple access problem"),". Computer have so-called ",(0,s.kt)("strong",{parentName:"p"},"multiple access protocols")," by which nodes regulate their transmission into the shared broadcast channel. We can classify them to one of three categories: channel partitioning protocols, random access protocols, and taking-turns protocols."),(0,s.kt)("h4",{id:"channel-partitioning-protocols"},"Channel Partitioning Protocols"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Time-division multiplexing (TDM)")," divides time into time frames and further divides each time frame into N time slots. Each time slot is then assigned to one of the N nodes. Whenever a node has a packet to send, it transmits the packet\u2019s bits during its assigned time slot in the revolving TDM frame. TDM is appealing because it eliminates collisions and is perfectly fair. However, it has two major drawbacks. First, a node is limited to an average rate of R/N bps even when it is the only node with packets to send. A second drawback is that a node must always wait for its turn in the transmission sequence\u2014again, even when it is the only node with a frame to send."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Frequency-division multiplexing (FDM)")," divides the R bps channel into different frequencies (each with a bandwidth of R/N) and assigns each frequency to one of the N nodes. It avoids collisions and divides the bandwidth fairly among the N nodes. However, FDM also shares a principal disadvantage with TDM\u2014a node is limited to a bandwidth of R/N, even when it is the only node with packets to send."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Code division multiple access (CDMA)")," assigns a different code to each node. Each node then uses its unique code to encode the data bits it sends. If the codes are chosen carefully, CDMA networks have the wonderful property that different nodes can transmit simultaneously."),(0,s.kt)("h4",{id:"random-access-protocols"},"Random Access protocols"),(0,s.kt)("p",null,"In a random access protocol, a transmitting node always transmits at the full rate of the channel, namely, R bps. When there is a collision, each node involved in the collision repeatedly retransmits its frame (that is, packet) until its frame gets through without a collision. But when a node experiences a collision, it doesn\u2019t necessarily retransmit the frame right away. Instead it waits a random delay before retransmitting the frame. Each node involved in a collision chooses independent random delays. Because the random delays are independently chosen, it is possible that one of the nodes will pick a delay that is sufficiently less than the delays of the other colliding nodes and will therefore be able to sneak its frame into the channel without a collision."),(0,s.kt)("p",null,"A few of the most commonly used random access protocols\u2014the ALOHA protocols and the carrier sense multiple access (CSMA) protocols. Ethernet is a popular and widely deployed CSMA protocol."),(0,s.kt)("h4",{id:"taking-turns-protocols"},"Taking-Turns Protocols"),(0,s.kt)("p",null,"The first one is the ",(0,s.kt)("strong",{parentName:"p"},"polling protocol"),". The polling protocol requires one of the nodes to be designated as a master node. The master node polls each of the nodes in a round-robin fashion. In particular, the master node first sends a message to node 1, saying that it (node 1) can transmit up to some maximum number of frames. After node 1 transmits some frames, the master node tells node 2 it (node 2) can transmit up to the maximum number of frames. (The master node can determine when a node has finished sending its frames by observing the lack of a signal on the channel.) The procedure continues in this manner, with the master node polling each of the nodes in a cyclic manner. The Bluetooth protocol is an example of a polling protocol."),(0,s.kt)("p",null,"The second one is the ",(0,s.kt)("strong",{parentName:"p"},"token-passing protocol"),". A small, special-purpose frame known as a token is exchanged among the nodes in some fixed order. When a node receives a token, it holds onto the token only if it has some frames to transmit; otherwise, it immediately forwards the token to the next node. If a node does have frames to transmit when it receives the token, it sends up to a maximum number of frames and then forwards the token to the next node. Token passing is decentralized and highly efficient. But it has its problems as well. For example, the failure of one node can crash the entire channel. Or if a node accidentally neglects to release the token, then some recovery procedure must be invoked to get the token back in circulation. Over the years many token-passing protocols have been developed, including the fiber distributed data interface (FDDI) protocol and the IEEE 802.5 token ring protocol, and each one had to address these as well as other sticky issues."),(0,s.kt)("h4",{id:"docsis"},"DOCSIS"),(0,s.kt)("p",null,"A cable access network will make for an excellent case study here, as we\u2019ll find aspects of each of these three classes of multiple access protocols with the cable access network! The Data-Over-Cable Service Interface Specifications (DOCSIS) specifies the cable data network architecture and its protocols."),(0,s.kt)("h3",{id:"switched-local-area-networks"},"Switched Local Area Networks"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(65570).Z,width:"2134",height:"1398"})),(0,s.kt)("p",null,"Figure 6.15 shows a switched local network connecting three departments, two servers and a router with four switches. Because these switches operate at the link layer, they switch link-layer frames (rather than network-layer datagrams), don\u2019t recognize network-layer addresses, and don\u2019t use routing algorithms like OSPF to determine paths through the network of layer-2 switches. Instead of using IP addresses, we will soon see that they use link-layer addresses to forward link-layer frames through the network of switches."),(0,s.kt)("p",null,"We\u2019ll begin our study of switched LANs by first covering link-layer addressing. We then examine the celebrated Ethernet protocol. After examining link-layer addressing and Ethernet, we\u2019ll look at how link-layer switches operate, and then see how these switches are often used to build large-scale LANs."),(0,s.kt)("h4",{id:"link-layer-addressing-and-arp"},"Link-Layer Addressing and ARP"),(0,s.kt)("p",null,"In truth, it is not hosts and routers that have link-layer addresses but rather their adapters (that is, network interfaces) that have link-layer addresses. Link-layer switches do not have link-layer addresses associated with their interfaces that connect to hosts and routers. A link-layer address is variously called a LAN address, a physical address, or a ",(0,s.kt)("strong",{parentName:"p"},"MAC address"),". For most LANs (including Ethernet and 802.11 wireless LANs), the MAC address is 6 bytes long, giving ",(0,s.kt)("inlineCode",{parentName:"p"},"2 ^ 48")," possible MAC addresses."),(0,s.kt)("p",null,"Although MAC addresses were designed to be permanent, it is now possible to change an adapter\u2019s MAC address via software. For the rest of this section, however, we\u2019ll assume that an adapter\u2019s MAC address is fixed. One interesting property of MAC addresses is that no two adapters have the same address. The IEEE manages the MAC address space. In particular, when a company wants to manufacture adapters, it purchases a chunk of the address space consisting of 224 addresses for a nominal fee. IEEE allocates the chunk of 224 addresses by fixing the first 24 bits of a MAC address and letting the company create unique combinations of the last 24 bits for each adapter."),(0,s.kt)("p",null,"When an adapter wants to send a frame to some destination adapter, the sending adapter inserts the destination adapter\u2019s MAC address into the frame and then sends the frame into the LAN. As we will soon see, a switch occasionally broadcasts an incoming frame onto all of its interfaces. 802.11 also broadcasts frames. Thus, an adapter may receive a frame that isn\u2019t addressed to it. Thus, when an adapter receives a frame, it will check to see whether the destination MAC address in the frame matches its own MAC address. If there is a match, the adapter extracts the enclosed datagram and passes the datagram up the protocol stack. If there isn\u2019t a match, the adapter discards the frame, without passing the network-layer datagram up."),(0,s.kt)("p",null,"However, sometimes a sending adapter does want all the other adapters on the LAN to receive and process the frame it is about to send. In this case, the sending adapter inserts a special MAC broadcast address into the destination address field of the frame. For LANs that use 6-byte addresses (such as Ethernet and 802.11), the broadcast address is a string of 48 consecutive 1s (that is, FF-FF-FF-FF-FF-FF in hexadecimal notation)."),(0,s.kt)("p",null,"Because there are both network-layer addresses (for example, Internet IP addresses) and link-layer addresses (that is, MAC addresses), there is a need to translate between them. For the Internet, this is the job of the ",(0,s.kt)("strong",{parentName:"p"},"Address Resolution Protocol (ARP)"),"."),(0,s.kt)("p",null,"Each host and router has an ARP table in its memory, which contains mappings of IP addresses to MAC addresses. But what if the ARP table doesn\u2019t currently have an entry for the destination? In this case, the sender uses the ARP protocol to resolve the address."),(0,s.kt)("h4",{id:"ethernet"},"Ethernet"),(0,s.kt)("p",null,"Today, Ethernet is by far the most prevalent wired LAN technology, and it is likely to remain so for the foreseeable future. One might say that Ethernet has been to local area networking what the Internet has been to global networking."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(1585).Z,width:"2317",height:"417"})),(0,s.kt)("p",null,"We can learn a lot about Ethernet by examining the Ethernet frame:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Data field (46 to 1,500 bytes). This field carries the IP datagram. The maximum transmission unit (MTU) of Ethernet is 1,500 bytes. This means that if the IP datagram exceeds 1,500 bytes, then the host has to fragment the datagram, as discussed in Section 4.3.2. The minimum size of the data field is 46 bytes. This means that if the IP datagram is less than 46 bytes, the data field has to be \u201cstuffed\u201d to fill it out to 46 bytes. When stuffing is used, the data passed to the network layer contains the stuffing as well as an IP datagram. The network layer uses the length field in the IP datagram header to remove the stuffing."),(0,s.kt)("li",{parentName:"ul"},"Destination address (6 bytes). This field contains the MAC address of the destination adapter. When destination adapter receives an Ethernet frame whose destination address is its or the MAC broadcast address, it passes the contents of the frame\u2019s data field to the network layer; if it receives a frame with any other MAC address, it discards the frame."),(0,s.kt)("li",{parentName:"ul"},"Source address (6 bytes). This field contains the MAC address of the adapter that transmits the frame onto the LAN."),(0,s.kt)("li",{parentName:"ul"},"Type field (2 bytes). The type field permits Ethernet to multiplex network-layer protocols. To understand this, we need to keep in mind that hosts can use other network-layer protocols besides IP (e.g. ARP)."),(0,s.kt)("li",{parentName:"ul"},"Cyclic redundancy check (CRC) (4 bytes). As discussed in Section 6.2.3, the purpose of the CRC field is to allow the receiving adapter to detect bit errors in the frame."),(0,s.kt)("li",{parentName:"ul"},"Preamble (8 bytes).")),(0,s.kt)("p",null,"Many Ethernet technologies have been standardized over the years by the IEEE 802.3 CSMA/CD (Ethernet) working group. Ethernet is both a link-layer and a physical-layer specification and is carried over a variety of physical media including coaxial cable, copper wire, and fiber."),(0,s.kt)("p",null,"In a switch-based Ethernet LAN there are no collisions and, therefore, there is no need for a MAC protocol!"),(0,s.kt)("h4",{id:"link-layer-switches"},"Link-Layer Switches"),(0,s.kt)("p",null,"The role of the switch is to receive incoming link-layer frames and forward them onto outgoing links; we\u2019ll study this forwarding function in detail in this subsection. We\u2019ll see that the switch itself is transparent to the hosts and routers in the subnet; that is, a host/router addresses a frame to another host/router (rather than addressing the frame to the switch) and happily sends the frame into the LAN, unaware that a switch will be receiving the frame and forward- ing it."),(0,s.kt)("p",null,"Filtering is the switch function that determines whether a frame should be for- warded to some interface or should just be dropped. Forwarding is the switch function that determines the interfaces to which a frame should be directed, and then moves the frame to those interfaces. Switch filtering and forwarding are done with a switch table. As long as the switch table is complete and accurate, the switch forwards frames toward destinations without any broadcasting."),(0,s.kt)("p",null,"As we learned in Chapter 4, routers are store-and-forward packet switches that for- ward packets using network-layer addresses. Although a switch is also a store-and- forward packet switch, it is fundamentally different from a router in that it forwards packets using MAC addresses. Whereas a router is a layer-3 packet switch, a switch is a layer-2 packet switch. Recall, however, that we learned in Section 4.4 that mod- ern switches using the \u201cmatch plus action\u201d operation can be used to forward a layer-2 frame based on the frame's destination MAC address, as well as a layer-3 datagram using the datagram's destination IP address. Indeed, we saw that switches using the OpenFlow standard can perform generalized packet forwarding based on any of eleven different frame, datagram, and transport-layer header fields."),(0,s.kt)("p",null,"Even though switches and routers are fundamentally different, network admin- istrators must often choose between them when installing an interconnection device. What are the pros and cons of the two approaches?"),(0,s.kt)("p",null,"First consider the pros and cons of switches. As mentioned above, switches are plug-and-play, a property that is cherished by all the overworked network adminis- trators of the world. Switches can also have relatively high filtering and forwarding rates\u2014as shown in Figure 6.24, switches have to process frames only up through layer 2, whereas routers have to process datagrams up through layer 3. On the other hand, to prevent the cycling of broadcast frames, the active topology of a switched network is restricted to a spanning tree. Also, a large switched network would require large ARP tables in the hosts and routers and would generate substantial ARP traffic and processing. Furthermore, switches are susceptible to broadcast storms\u2014if one host goes haywire and transmits an endless stream of Ethernet broadcast frames, the switches will forward all of these frames, causing the entire network to collapse."),(0,s.kt)("p",null,"Now consider the pros and cons of routers. Because network addressing is often hierarchical (and not flat, as is MAC addressing), packets do not normally cycle through routers even when the network has redundant paths. (However, packets can cycle when router tables are misconfigured; but as we learned in Chapter 4, IP uses a special datagram header field to limit the cycling.) Thus, packets are not restricted to a spanning tree and can use the best path between source and destination. Because routers do not have the spanning tree restriction, they have allowed the Internet to be built with a rich topology that includes, for example, multiple active links between Europe and North America. Another feature of routers is that they provide firewall protection against layer-2 broadcast storms. Perhaps the most significant drawback of routers, though, is that they are not plug-and-play\u2014they and the hosts that connect to them need their IP addresses to be configured. Also, routers often have a larger per-packet processing time than switches, because they have to process up through the layer-3 fields."),(0,s.kt)("h3",{id:"a-day-in-the-life-of-a-web-page-request"},"A Day in the Life of a Web Page Request"),(0,s.kt)("p",null,"A student, Bob, connects his laptop to an Ethernet cable connected to the school\u2019s Ethernet switch and downloads a Web page."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(60620).Z,width:"1941",height:"1529"})),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The operating system on Bob\u2019s laptop creates a DHCP request message (Section 4.3.3) and puts this message within a UDP segment (Section 3.3) with destination port 67 (DHCP server) and source port 68 (DHCP client). The UDP segment is then placed within an IP datagram (Section 4.3.1) with a broadcast IP destination address (255.255.255.255) and a source IP address of 0.0.0.0, since Bob\u2019s laptop doesn\u2019t yet have an IP address."),(0,s.kt)("li",{parentName:"ol"},"The IP datagram containing the DHCP request message is then placed within an Ethernet frame (Section 6.4.2). The Ethernet frame has a destination MAC addresses of FF:FF:FF:FF:FF:FF so that the frame will be broadcast to all devices connected to the switch (hopefully including a DHCP server); the frame\u2019s source MAC address is that of Bob\u2019s laptop, 00:16:D3:23:68:8A."),(0,s.kt)("li",{parentName:"ol"},"The broadcast Ethernet frame containing the DHCP request is the first frame sent by Bob\u2019s laptop to the Ethernet switch. The switch broadcasts the incoming frame on all outgoing ports, including the port connected to the router."),(0,s.kt)("li",{parentName:"ol"},"The router receives the broadcast Ethernet frame containing the DHCP request on its interface with MAC address 00:22:6B:45:1F:1B and the IP datagram is extracted from the Ethernet frame. The datagram\u2019s broadcast IP destination address indicates that this IP datagram should be processed by upper layer protocols at this node, so the datagram\u2019s payload (a UDP segment) is thus demultiplexed (Section 3.2) up to UDP, and the DHCP request message is extracted from the UDP segment. The DHCP server now has the DHCP request message."),(0,s.kt)("li",{parentName:"ol"},"Let\u2019s suppose that the DHCP server running within the router can allocate IP addresses in the CIDR (Section 4.3.3) block 68.85.2.0/24. In this example, all IP addresses used within the school are thus within Comcast\u2019s address block. Let\u2019s suppose the DHCP server allocates address 68.85.2.101 to Bob\u2019s laptop. The DHCP server creates a DHCP ACK message (Section 4.3.3) containing this IP address, as well as the IP address of the DNS server (68.87.71.226), the IP address for the default gateway router (68.85.2.1), and the subnet block (68.85.2.0/24) (equivalently, the \u201cnetwork mask\u201d). The DHCP message is put inside a UDP segment, which is put inside an IP datagram, which is put inside an Ethernet frame. The Ethernet frame has a source MAC address of the router\u2019s interface to the home network (00:22:6B:45:1F:1B) and a destination MAC address of Bob\u2019s laptop (00:16:D3:23:68:8A)."),(0,s.kt)("li",{parentName:"ol"},"The Ethernet frame containing the DHCP ACK is sent (unicast) by the router to the switch. Because the switch is self-learning (Section 6.4.3) and previously received an Ethernet frame (containing the DHCP request) from Bob\u2019s laptop, the switch knows to forward a frame addressed to 00:16:D3:23:68:8A only to the output port leading to Bob\u2019s laptop."),(0,s.kt)("li",{parentName:"ol"},"Bob\u2019s laptop receives the Ethernet frame containing the DHCP ACK, extracts the IP datagram from the Ethernet frame, extracts the UDP segment from the IP datagram, and extracts the DHCP ACK message from the UDP segment. Bob\u2019s DHCP client then records its IP address and the IP address of its DNS server. It also installs the address of the default gateway into its IP forward- ing table (Section 4.1). Bob\u2019s laptop will send all datagrams with destination address outside of its subnet 68.85.2.0/24 to the default gateway. At this point, Bob\u2019s laptop has initialized its networking components and is ready to begin processing the Web page fetch."),(0,s.kt)("li",{parentName:"ol"},'The operating system on Bob\u2019s laptop thus creates a DNS query message (Section 2.5.3), putting the string "',(0,s.kt)("a",{parentName:"li",href:"http://www.google.com%22"},'www.google.com"')," in the question section of the DNS message. This DNS message is then placed within a UDP segment with a destination port of 53 (DNS server). The UDP segment is then placed within an IP datagram with an IP destination address of 68.87.71.226 (the address of the DNS server returned in the DHCP ACK in step 5) and a source IP address of 68.85.2.101."),(0,s.kt)("li",{parentName:"ol"},"Bob\u2019s laptop then places the datagram containing the DNS query message in an Ethernet frame. This frame will be sent (addressed, at the link layer) to the gateway router in Bob\u2019s school\u2019s network. However, even though Bob\u2019s laptop knows the IP address of the school\u2019s gateway router (68.85.2.1) via the DHCP ACK message in step 5 above, it doesn\u2019t know the gateway router\u2019s MAC address. In order to obtain the MAC address of the gateway router, Bob\u2019s laptop will need to use the ARP protocol (Section 6.4.1)."),(0,s.kt)("li",{parentName:"ol"},"Bob\u2019s laptop creates an ARP query message with a target IP address of 68.85.2.1 (the default gateway), places the ARP message within an Ethernet frame with a broadcast destination address (FF:FF:FF:FF:FF:FF) and sends the Ethernet frame to the switch, which delivers the frame to all connected devices, including the gateway router."),(0,s.kt)("li",{parentName:"ol"},"ThegatewayrouterreceivestheframecontainingtheARPquerymessageonthe interface to the school network, and finds that the target IP address of 68.85.2.1 in the ARP message matches the IP address of its interface. The gateway router thus prepares an ARP reply, indicating that its MAC address of 00:22:6B:45:1F:1B corresponds to IP address 68.85.2.1. It places the ARP reply message in an Ethernet frame, with a destination address of 00:16:D3:23:68:8A (Bob\u2019s laptop) and sends the frame to the switch, which delivers the frame to Bob\u2019s laptop."),(0,s.kt)("li",{parentName:"ol"},"Bob\u2019s laptop receives the frame containing the ARP reply message and extracts the MAC address of the gateway router (00:22:6B:45:1F:1B) from the ARP reply message."),(0,s.kt)("li",{parentName:"ol"},"Bob\u2019s laptop can now (finally!) address the Ethernet frame containing the DNS query to the gateway router\u2019s MAC address. Note that the IP datagram in this frame has an IP destination address of 68.87.71.226 (the DNS server), while the frame has a destination address of 00:22:6B:45:1F:1B (the gateway router). Bob\u2019s laptop sends this frame to the switch, which delivers the frame to the gateway router."),(0,s.kt)("li",{parentName:"ol"},"The gateway router receives the frame and extracts the IP datagram containing the DNS query. The router looks up the destination address of this datagram (68.87.71.226) and determines from its forwarding table that the datagram should be sent to the leftmost router in the Comcast network in Figure 6.32. The IP datagram is placed inside a link-layer frame appropriate for the link connecting the school\u2019s router to the leftmost Comcast router and the frame is sent over this link."),(0,s.kt)("li",{parentName:"ol"},"The leftmost router in the Comcast network receives the frame, extracts the IP datagram, examines the datagram\u2019s destination address (68.87.71.226) and determines the outgoing interface on which to forward the datagram toward the DNS server from its forwarding table, which has been filled in by Comcast\u2019s intra-domain protocol (such as RIP, OSPF or IS-IS, Section 5.3) as well as the Internet\u2019s inter-domain protocol, BGP (Section 5.4)."),(0,s.kt)("li",{parentName:"ol"},"Eventually the IP datagram containing the DNS query arrives at the DNS server. The DNS server extracts the DNS query message, looks up the name ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com")," in its DNS database (Section 2.5), and finds the DNS resource record that contains the IP address (64.233.169.105) for ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com."},"www.google.com.")," (assuming that it is currently cached in the DNS server). Recall that this cached data originated in the authoritative DNS server (Section 2.5.2) for google.com. The DNS server forms a DNS reply message containing this hostname-to-IP-address mapping, and places the DNS reply message in a UDP segment, and the segment within an IP datagram addressed to Bob\u2019s laptop (68.85.2.101). This datagram will be forwarded back through the Comcast network to the school\u2019s router and from there, via the Ethernet switch to Bob\u2019s laptop."),(0,s.kt)("li",{parentName:"ol"},"Bob\u2019s laptop extracts the IP address of the server ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com")," from the DNS message. Finally, after a lot of work, Bob\u2019s laptop is now ready to contact the ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com")," server!"),(0,s.kt)("li",{parentName:"ol"},"Now that Bob\u2019s laptop has the IP address of ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com"),", it can create the TCP socket (Section 2.7) that will be used to send the HTTP GET message (Section 2.2.3) to ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com."},"www.google.com.")," When Bob creates the TCP socket, the TCP in Bob\u2019s laptop must first perform a three-way handshake (Section 3.5.6) with the TCP in ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com."},"www.google.com.")," Bob\u2019s laptop thus first creates a TCP SYN segment with destination port 80 (for HTTP), places the TCP segment inside an IP datagram with a destination IP address of 64.233.169.105 (",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com"),"), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch."),(0,s.kt)("li",{parentName:"ol"},"The routers in the school network, Comcast\u2019s network, and Google\u2019s network forward the datagram containing the TCP SYN toward ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com"),", using the forwarding table in each router, as in steps 14\u201316 above. Recall that the router forwarding table entries governing forwarding of packets over the inter-domain link between the Comcast and Google networks are determined by the BGP protocol (Chapter 5)."),(0,s.kt)("li",{parentName:"ol"},"Eventually, the datagram containing the TCP SYN arrives at",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com."},"www.google.com.")," The TCP SYN message is extracted from the datagram and demultiplexed to the welcome socket associated with port 80. A connection socket (Section 2.7) is created for the TCP connection between the Google HTTP server and Bob\u2019s laptop. A TCP SYNACK (Section 3.5.6) segment is generated, placed inside a datagram addressed to Bob\u2019s laptop, and finally placed inside a link-layer frame appropriate for the link connecting ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com")," to its first-hop router."),(0,s.kt)("li",{parentName:"ol"},"The datagram containing the TCP SYNACK segment is forwarded through the Google, Comcast, and school networks, eventually arriving at the Ethernet controller in Bob\u2019s laptop. The datagram is demultiplexed within the operating system to the TCP socket created in step 18, which enters the connected state."),(0,s.kt)("li",{parentName:"ol"},"With the socket on Bob\u2019s laptop now (finally!) ready to send bytes to ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com"),", Bob\u2019s browser creates the HTTP GET message (Section 2.2.3) containing the URL to be fetched. The HTTP GET message is then written into the socket, with the GET message becoming the payload of a TCP segment. The TCP segment is placed in a datagram and sent and delivered to ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com")," as in steps 18\u201320 above."),(0,s.kt)("li",{parentName:"ol"},"The HTTP server at ",(0,s.kt)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com")," reads the HTTP GET message from the TCP socket, creates an HTTP response message (Section 2.2), places the requested Web page content in the body of the HTTP response message, and sends the message into the TCP socket."),(0,s.kt)("li",{parentName:"ol"},"The datagram containing the HTTP reply message is forwarded through the Google, Comcast, and school networks, and arrives at Bob\u2019s laptop. Bob\u2019s Web browser program reads the HTTP response from the socket, extracts the html for the Web page from the body of the HTTP response, and finally (finally!) displays the Web page!")),(0,s.kt)("h2",{id:"wireless-and-mobile-networks"},"Wireless and Mobile Networks"),(0,s.kt)("p",null,"A ",(0,s.kt)("strong",{parentName:"p"},"base station")," is responsible for sending and receiving data (e.g., packets) to and from a ",(0,s.kt)("strong",{parentName:"p"},"wireless host")," that is associated with that base station. Cell towers in cellular networks and access points in 802.11 wireless LANs are examples of base stations."),(0,s.kt)("p",null,"When a mobile host moves beyond the range of one base station and into the range of another\u2014a process referred to as ",(0,s.kt)("strong",{parentName:"p"},"handoff")," or handover."),(0,s.kt)("p",null,"At the highest level we can classify wireless networks to:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Single-hop, infrastructure-based. These networks have a base station that is connected to a larger wired network (e.g., the Internet). Furthermore, all communication is between this base station and a wireless host over a single wireless hop. The 802.11 networks you use in the classroom, caf\xe9, or library; and the 4G LTE data networks all fall in this category."),(0,s.kt)("li",{parentName:"ul"},"Single-hop, infrastructure-less. In these networks, there is no base station that is connected to a wireless network. However, as we will see, one of the nodes in this single-hop network may coordinate the transmissions of the other nodes. Bluetooth networks fall in this."),(0,s.kt)("li",{parentName:"ul"},"Multi-hop, infrastructure-based. In these networks, a base station is present that is wired to the larger network. However, some wireless nodes may have to relay their communication through other wireless nodes in order to communicate via the base station. Some wireless sensor networks and so-called wireless mesh networks deployed in homes fall in this category."),(0,s.kt)("li",{parentName:"ul"},"Multi-hop, infrastructure-less. There is no base station in these networks, and nodes may have to relay messages among several other nodes in order to reach a destination. Nodes may also be mobile, with connectivity changing among nodes\u2014a class of networks known as mobile ad hoc networks (MANETs). If the mobile nodes are vehicles, the network is a vehicular ad hoc network (VANET). As you might imagine, the development of protocols for such net- works is challenging and is the subject of much ongoing research.")),(0,s.kt)("p",null,"Bluetooth operates over short ranges, at low power, and at low cost. Bluetooth networks operate in the unlicensed 2.4 GHz radio band. The Bluetooth wireless channel is operated in a TDM manner, with time slots of 625 microseconds. Bluetooth data rates can reach up to 3 Mbps."),(0,s.kt)("p",null,"Bluetooth networks are ad hoc networks. Bluetooth devices must organize themselves into a piconet of up to eight active devices. One of these devices is designated as the master, with the remaining devices acting as clients. In addition to the active devices, there can also be up to 255 \u201cparked\u201d devices in the piconet. These parked devices are often in some form of \u201csleep mode\u201d to conserve energy and will awaken periodically, according to the master\u2019s schedule, to receive beacon messages from the master. A parked device cannot communicate until its status has been changed from parked to active by the master node."),(0,s.kt)("h3",{id:"wireless-links-and-wifi"},"Wireless Links and WiFi"),(0,s.kt)("p",null,"Wireless links differ from their wired counterparts in a number important ways: Decreasing signal strength; Interference from other sources; Multipath propagation. Bit errors will be more common in wireless links than in wired links. For this reason, wireless link protocols employ not only powerful CRC error detection codes, but also link-level reliable-data-transfer protocols that retransmit corrupted frames."),(0,s.kt)("p",null,"This host receives an electromagnetic signal that is a combination of a degraded form of the original signal transmitted by the sender (degraded due to the attenuation and multipath propagation effects that we discussed above, among others) and background noise in the environment. The ",(0,s.kt)("strong",{parentName:"p"},"signal-to-noise ratio (SNR)")," is a relative measure of the strength of the received signal and this noise. The SNR is typically measured in units of decibels (",(0,s.kt)("strong",{parentName:"p"},"dB"),"). A larger SNR makes it easier for the receiver to extract the transmitted signal from the background noise."),(0,s.kt)("p",null,"Although many technologies and standards for wireless LANs were developed in the 1990s, one particular class of standards has clearly emerged as the winner: the IEEE 802.11 wireless LAN, also known as WiFi."),(0,s.kt)("p",null,"The fundamental building block of the 802.11 architecture is the basic service set (BSS). A BSS contains one or more wireless stations and a central base station, known as an ",(0,s.kt)("strong",{parentName:"p"},"access point (AP)")," in 802.11 parlance. As with Ethernet devices, each 802.11 wireless station has a 6-byte MAC address that is stored in the firmware of the station\u2019s adapter (that is, 802.11 network interface card). Each AP also has a MAC address for its wireless interface. As with Ethernet, these MAC addresses are administered by IEEE and are (in theory) globally unique."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(8393).Z,width:"1830",height:"1346"})),(0,s.kt)("p",null,"When a network administrator installs an AP, the administrator assigns a one- or two-word ",(0,s.kt)("strong",{parentName:"p"},"Service Set Identifier (SSID)")," to the access point\uff08\u5373 Wi-Fi \u5217\u8868\u91cc\u663e\u793a\u7684\u540d\u79f0\uff09. The 802.11 standard requires that an AP periodically send ",(0,s.kt)("strong",{parentName:"p"},"beacon frames"),", each of which includes the AP\u2019s SSID and MAC address."),(0,s.kt)("p",null,"The process of scanning channels and listening for beacon frames is known as passive scanning. A wireless device can also perform active scanning, by broadcasting a probe frame that will be received by all APs within the wireless device\u2019s range."),(0,s.kt)("p",null,"In order to create an association with a particular AP, the wireless device may be required to authenticate itself to the AP. One approach is to permit access based on a device\u2019s MAC address. A second approach employs usernames and passwords."),(0,s.kt)("p",null,"Because multiple wireless devices, or the AP itself may want to transmit data frames at the same time over the same channel, a multiple access protocol is needed to coordinate the transmissions. Inspired by the huge success of Ethernet and its random access protocol, the designers of 802.11 chose ",(0,s.kt)("strong",{parentName:"p"},"CSMA with collision avoidance (CSMA/CA)"),". 802.11 uses collision-avoidance techniques and link-layer acknowledgment/retransmission (ARQ) scheme."),(0,s.kt)("h3",{id:"mobility-in-the-same-ip-subnet"},"Mobility in the Same IP Subnet"),(0,s.kt)("p",null,"In order to increase the physical range of a wireless LAN, companies and universities will often deploy multiple BSSs within the same IP subnet. This naturally raises the issue of mobility among the BSSs\u2014how do wireless stations seamlessly move from one BSS to another while maintaining ongoing TCP sessions?"),(0,s.kt)("p",null,"Mobility can be handled in a relatively straightforward manner when the BSSs are part of the subnet."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(10081).Z,width:"1918",height:"1116"})),(0,s.kt)("p",null,"Figure 7.15 shows two interconnected BSSs with a host, H1, moving from BSS1 to BSS2. Because in this example the interconnection device that connects the two BSSs is not a router, all of the stations in the two BSSs, including the APs, belong to the same IP subnet. Thus, when H1 moves from BSS1 to BSS2, it may keep its IP address and all of its ongoing TCP connections. If the interconnection device were a router, then H1 would have to obtain a new IP address in the subnet in which it was moving. This address change would disrupt (and eventually terminate) any on-going TCP connections at H1. In Section 7.6, we\u2019ll see how a network-layer mobility protocol, such as mobile IP, can be used to avoid this problem."),(0,s.kt)("p",null,"As H1 wanders away from AP1, H1 detects a weakening signal from AP1 and starts to scan for a stronger signal. H1 receives beacon frames from AP2 (which in many corporate and university settings will have the same SSID as AP1). H1 then disassociates with AP1 and associates with AP2, while keeping its IP address and maintaining its ongoing TCP sessions."),(0,s.kt)("p",null,"But what about the switch? How does it know that the host has moved from one AP to another? As you may recall from Chapter 6, switches are \u201cself-learning\u201d and automatically build their forwarding tables. This self-learning feature nicely handles occasional moves; however, switches were not designed to support highly mobile users who want to maintain TCP connections while moving between BSSs. To appreciate the problem here, recall that before the move, the switch has an entry in its forwarding table that pairs H1\u2019s MAC address with the outgoing switch interface through which H1 can be reached. If H1 is initially in BSS1, then a datagram destined to H1 will be directed to H1 via AP1. Once H1 associates with BSS2, however, its frames should be directed to AP2. One solution (a bit of a hack, really) is for AP2 to send a broadcast Ethernet frame with H1\u2019s source address to the switch just after he new association. When the switch receives the frame, it updates its forwarding table, allowing H1 to be reached via AP2. The 802.11f standards group is developing an inter-AP protocol to handle these and related issues."),(0,s.kt)("h3",{id:"cellular-networks-4g-and-5g"},"Cellular Networks: 4G and 5G"),(0,s.kt)("p",null,"In a relatively short span of 20 years, cellular carrier networks have undergone an astonishing transition from being almost exclusively circuit-switched telephone networks to being all-IP packet-switched data networks."),(0,s.kt)("p",null,"The term cellular refers to the fact that the region covered by a cellular network is partitioned into a number of geographic coverage areas, known as cells. Each cell contains a base station that transmits signals to, and receives signals from, the mobile devices currently in its cell."),(0,s.kt)("p",null,"The 4G networks that are pervasive implement the 4G Long-Term Evolution standard, or more succinctly ",(0,s.kt)("strong",{parentName:"p"},"4G LTE"),"."),(0,s.kt)("p",null,"The mobile device is a network endpoint, with an IP address (obtained through NAT). The mobile device also has a globally unique 64-bit identifier called the ",(0,s.kt)("strong",{parentName:"p"},"International Mobile Subscriber Identity (IMSI)"),", which is stored on its SIM (Subscriber Identity Module) card."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"LTE Element"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"),(0,s.kt)("th",{parentName:"tr",align:null},"Similar WLAN function(s)"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Mobile device"),(0,s.kt)("td",{parentName:"tr",align:null},"End user\u2019s IP-capable wireless/mobile device"),(0,s.kt)("td",{parentName:"tr",align:null},"Host, end-system")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Base Station"),(0,s.kt)("td",{parentName:"tr",align:null},"Network side of wireless access link into LTE network"),(0,s.kt)("td",{parentName:"tr",align:null},"Access point (AP), although the LTE base station performs many functions not found in WLANs")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"The Mobility Management Entity (MME)"),(0,s.kt)("td",{parentName:"tr",align:null},"Coordinator for mobile device services: authentication, mobility management"),(0,s.kt)("td",{parentName:"tr",align:null},"Access point (AP), although the MME performs many functions not found in WLANs")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Home Subscriber Server (HSS)"),(0,s.kt)("td",{parentName:"tr",align:null},"Located in a mobile device\u2019s home network, providing authentication, access privileges in home and visited networks"),(0,s.kt)("td",{parentName:"tr",align:null},"No WLAN equivalent")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Serving Gateway (S-GW), PDN-Gateway (P-GW)"),(0,s.kt)("td",{parentName:"tr",align:null},"Routers in a cellular carrier\u2019s network, coordinating forwarding to outside of the carrier\u2019s network"),(0,s.kt)("td",{parentName:"tr",align:null},"iBGP and eBGP routers in access ISP network")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Radio Access Network"),(0,s.kt)("td",{parentName:"tr",align:null},"Wireless link between mobile device and a base station"),(0,s.kt)("td",{parentName:"tr",align:null},"802.11 wireless link between mobile and AP")))),(0,s.kt)("p",null,"LTE uses a combination of frequency division multiplexing and time division multi- plexing on the downstream channel, known as orthogonal frequency division multi- plexing (OFDM).\uff08\u9891\u5206\u590d\u7528\u548c\u65f6\u5206\u590d\u7528\u7ed3\u5408\uff0c\u79f0\u4e3a\u6b63\u4ea4\u9891\u5206\u590d\u7528\uff09"),(0,s.kt)("p",null,"The ultimate wide-area data service would be one with ubiquitous gigabit connec- tion speeds, extremely low latency, and unrestricted limitations on the number of users and devices that could be supported in any region. It is expected that 5G, for which progressively improved versions are likely to be rolled out in the 2020 decade, will make a big step towards achieving the goals of the ultimate wide-area data service."),(0,s.kt)("p",null,"5G standards divide frequencies into two groups: FR1 (450 MHz\u20136 GHz) and FR2 (24 GHz\u201352 GHz). FR2 frequencies are also known as millimeter wave frequencies. Many 5G innovations will be a direct result of working in the millimeter wave fre- quencies in the 24 GHz\u201352 GHz band."),(0,s.kt)("p",null,"5G is expected to provide a 100x increase in capacity in urban areas. Similarly, owing to the much wider fre- quency band, 5G is expected to provide peak download rates of 1 Gbps or higher. Millimeter wave signals are, however, easily blocked by buildings and trees. Small cell stations are needed to fill in coverage gaps between base stations and users. In a highly populous region, the distance between two small cells could vary from 10 to 100 meters."),(0,s.kt)("h2",{id:"network-security"},"Network Security"),(0,s.kt)("h3",{id:"network-under-attack"},"Network Under Attack"),(0,s.kt)("p",null,"Much of the ",(0,s.kt)("strong",{parentName:"p"},"malware")," out there today is ",(0,s.kt)("strong",{parentName:"p"},"self-replicating"),": once it infects one host, from that host it seeks entry into other hosts over the Internet, and from the newly infected hosts, it seeks entry into yet more hosts. Malware can spread in the form of a ",(0,s.kt)("strong",{parentName:"p"},"virus")," or a ",(0,s.kt)("strong",{parentName:"p"},"worm"),". Viruses are malware that require some form of user interaction to infect the user\u2019s device. Worms are malware that can enter a device without any explicit user interaction."),(0,s.kt)("p",null,"Another broad class of security threats are known as ",(0,s.kt)("strong",{parentName:"p"},"denial-of-service (DoS)")," attacks. As the name suggests, a DoS attack renders a network, host, or other piece of infrastructure unusable by legitimate users."),(0,s.kt)("p",null,"A passive receiver that records a copy of every packet that flies by is called a ",(0,s.kt)("strong",{parentName:"p"},"packet sniffer"),"."),(0,s.kt)("p",null,"It is surprisingly easy to create a packet with an arbitrary source address, packet content, and destination address and then transmit this hand-crafted packet into the Internet, which will dutifully forward the packet to its destination. Imagine the unsuspecting receiver (say an Internet router) who receives such a packet, takes the (false) source address as being truthful, and then performs some command embedded in the packet\u2019s contents (say modifies its forwarding table). The ability to inject packets into the Internet with a false source address is known as ",(0,s.kt)("strong",{parentName:"p"},"IP spoofing"),", and is but one of many ways in which one user can masquerade as another user."),(0,s.kt)("h3",{id:"symmetric-key-cryptography"},"Symmetric Key Cryptography"),(0,s.kt)("p",null,"Prefer: AES-GCM, ChaCha20/Poly1305."),(0,s.kt)("p",null,"Deprecated: RC4, 3DES-CBC, AES-CBC."),(0,s.kt)("h3",{id:"public-key-encryption"},"Public Key Encryption"),(0,s.kt)("p",null,"Prefer: >= 2048-bit RSA, Elliptic Curves"),(0,s.kt)("h3",{id:"cryptographic-hash-functions"},"Cryptographic Hash Functions"),(0,s.kt)("p",null,"Prefer: SHA-2 Family."),(0,s.kt)("p",null,"Deprecated: MD5, SHA-1."),(0,s.kt)("h3",{id:"digital-signatures"},"Digital Signatures"),(0,s.kt)("p",null,"An important application of digital signatures is public key certification, that is, certifying that a public key belongs to a specific entity."),(0,s.kt)("h3",{id:"transport-layer-security-tls"},"Transport Layer Security (TLS)"),(0,s.kt)("p",null,"Desirable properties of secure communication (Transport layer security provides):"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Encryption: So it can\u2019t be read by other people."),(0,s.kt)("li",{parentName:"ul"},"Integrity: The message can\u2019t be altered without detection."),(0,s.kt)("li",{parentName:"ul"},"Authentication: Prove the identity of exactly who you are talking to.")),(0,s.kt)("p",null,"TLS is often used to provide security to transactions that take place over HTTP. However, because TLS secures TCP, it can be employed by any application that runs over TCP. TLS provides a simple Application Programmer Interface (API) with sockets, which is similar and analogous to TCP\u2019s API."),(0,s.kt)("p",null,"TLS has three phases: handshake, key derivation, and data transfer. We now describe these three phases for a communication session between a client (Bob) and a server (Alice), with Alice having a private/public key pair and a certificate that binds her identity to her public key."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Once the TCP connection is established, Bob sends Alice a hello message. The client sends a list of cryptographic algorithms it supports, along with a client nonce."),(0,s.kt)("li",{parentName:"ol"},"From the list, the server chooses a symmetric algorithm (for example, AES) and a public key algorithm (for example, RSA with a specific key length), and HMAC algorithm (MD5 or SHA-1) along with the HMAC keys. It sends back to the client its choices, as well as a certificate and a server nonce."),(0,s.kt)("li",{parentName:"ol"},"Because the certificate has been certified by a CA, Bob knows for sure that the public key in the certificate belongs to Alice. Bob generates a Pre-Master Secret (PMS), encrypts the PMS with the server\u2019s public key, and sends the encrypted PMS to the server. The client sends the HMAC of all the handshake messages."),(0,s.kt)("li",{parentName:"ol"},"Using the same key derivation function (as specified by the TLS standard), the client and server independently compute the ",(0,s.kt)("strong",{parentName:"li"},"Master Secret (MS)")," from the PMS and nonces. The MS is then sliced up to generate ",(0,s.kt)("strong",{parentName:"li"},"the two encryption and two HMAC keys"),". HMAC is a standardized hashed message authentication code (MAC). Henceforth, all messages sent between client and server are encrypted and authenticated (with the HMAC). The server sends the HMAC of all the handshake messages.")),(0,s.kt)("p",null,"Four keys:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"EB = session encryption key for data sent from Bob to Alice"),(0,s.kt)("li",{parentName:"ul"},"MB = session HMAC key for data sent from Bob to Alice"),(0,s.kt)("li",{parentName:"ul"},"EA = session encryption key for data sent from Alice to Bob"),(0,s.kt)("li",{parentName:"ul"},"MA = session HMAC key for data sent from Alice to Bob")),(0,s.kt)("p",null,"Now that Alice and Bob share the same four session keys (EB, MB, EA, and MA), they can start to send secured data to each other over the TCP connection. Since TCP is a byte-stream protocol, TLS breaks the data stream into ",(0,s.kt)("strong",{parentName:"p"},"records"),", appends an HMAC to each record for integrity checking, and then encrypts the record+HMAC. This encrypted package is then passed to TCP for transport over the Internet."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:a(6806).Z,width:"2246",height:"510"})),(0,s.kt)("p",null,"Bob maintains a sequence number counter, which begins at zero and is incremented for each TLS record he sends. Bob doesn\u2019t actually include a sequence number in the record itself, but when he calculates the HMAC, he includes the sequence number in the HMAC calculation. Thus, the HMAC is now a hash of the data plus the HMAC key plus the current sequence number. Alice tracks Bob\u2019s sequence numbers, allowing her to verify the data integrity of a record by including the appropriate sequence number in the HMAC calculation. This use of TLS sequence numbers prevents Trudy from carrying out a woman-in-the-middle attack, such as reordering or replaying segments."),(0,s.kt)("p",null,"You may be wondering why there are nonces in steps 1 and 2. Don\u2019t sequence numbers suffice for preventing the segment replay attack? The answer is yes, but they don\u2019t alone prevent the \u201cconnection replay attack.\u201d Suppose Trudy sniffs all messages between Alice and Bob. The next day, Trudy masquerades as Bob and sends to Alice exactly the same sequence of messages that Bob sent to Alice on the previous day. If Alice doesn\u2019t use nonces, she will respond with exactly the same sequence of messages she sent the previous day. Alice will not suspect any funny business, as each message she receives will pass the integrity check. If Alice is an e-commerce server, she will think that Bob is placing a second order (for exactly the same thing). On the other hand, by including a nonce in the protocol, Alice will send different nonces for each TCP session, causing the encryption keys to be different on the two days. Therefore, when Alice receives played-back TLS records from Trudy, the records will fail the integrity checks, and the bogus e-commerce transaction will not succeed. In summary, in TLS, nonces are used to defend against the \u201cconnection replay attack\u201d and sequence numbers are used to defend against replaying individual packets during an ongoing session."),(0,s.kt)("p",null,"At some point, either Bob or Alice will want to end the TLS session. One approach would be to let Bob end the TLS session by simply terminating the underlying TCP connection. But such a naive design sets the stage for the truncation attack. If Trudy were to do this, Alice would think she received all of Bob\u2019s data when actuality she only received a portion of it."),(0,s.kt)("p",null,"The solution to this problem is to indicate in the type field whether the record serves to terminate the TLS session. (Although the TLS type is sent in the clear, it is authenticated at the receiver using the record\u2019s HMAC.) By including such a field, if Alice were to receive a TCP FIN before receiving a closure TLS record, she would know that something funny was going on."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img-80",src:a(80238).Z,width:"1184",height:"1402"})),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://segmentfault.com/a/1190000021494676"},"HTTPS \u8be6\u89e3\u4e00\uff1a\u9644\u5e26\u6700\u7cbe\u7f8e\u8be6\u5c3d\u7684 HTTPS \u539f\u7406\u56fe"))),(0,s.kt)("h3",{id:"ipsec-and-vpns"},"IPsec and VPNs"),(0,s.kt)("p",null,"The IP security protocol, more commonly known as ",(0,s.kt)("strong",{parentName:"p"},"IPsec"),", provides security at the network layer. IPsec secures IP datagrams between any two network-layer entities, including hosts and routers."),(0,s.kt)("p",null,"An institution that extends over multiple geographical regions often desires its own IP network, so that its hosts and servers can send data to each other in a secure and confidential manner. To achieve this goal, the institution could actually deploy a stand-alone physical network, called a private network."),(0,s.kt)("p",null,"Instead of deploying and maintaining a private network, many institutions today create VPNs over the existing public Internet. With a VPN, the institution\u2019s inter-office traffic is sent over the public Internet rather than over a physically independent network."),(0,s.kt)("p",null,"We'll focus on the Encapsulation Security Payload (ESP) protocol in the IPsec protocol suite. The ESP protocol provides source authentication, data integrity, and confidentiality."),(0,s.kt)("p",null,"Before sending IPsec datagrams from source entity to destination entity, the source and destination entities create a network-layer logical connection. This logical connection is called a ",(0,s.kt)("strong",{parentName:"p"},"security association (SA)"),". An SA is unidirectional, if both entities want to send secure datagrams to each other, then two SAs need to be established."),(0,s.kt)("p",null,"Large, geographically distributed deployments require an automated mechanism for creating the SAs. IPsec does this with the Internet Key Exchange (IKE) protocol."))}c.isMDXComponent=!0},37411:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/137c36ad-e563-4db2-a3e5-4d0a8675b59e-47e50fb5df17ff3f945a0c363673dbe9.png"},81318:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1A46D224-C9F6-41C8-88A9-E2612F154B7F-160ab0ee2538f433aa3a1835862b96c7.jpg"},82131:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1d0a6128-dc02-4e5a-938a-711cb8227694-716bd8c6aba8895ca54153af8da1abb1.png"},88688:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/27f2f9fa-0491-4e4e-b151-31aa972c1ef5-ab614daab0eeb9100725b8a871b35a9e.png"},15820:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2c34bbc3-fb1a-40a0-be20-60dbed5764a2-d1b9b8a8671f17fbf3031d97ddecb7dc.png"},65706:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2dcd5341-c392-49b1-b2ee-3eb7e357af2f-3eb08c8fd9b81d7edc2a868e3ea51511.png"},33375:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2fa1b7f7-7e91-4476-b7f7-47f20997d923-a535079c2c354422287462334546a787.png"},80219:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3483e571-f865-4200-8eb3-2bf951add260-537310703435aa1b532e8a41fef0e81d.jpg"},23899:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3CA03F1B-4719-4E90-977E-849FCD857DBB-1ae452fbac2b52f2b062aafca2ec59e6.jpg"},59999:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3b306793-09e2-4022-a2af-b960959232fc-411294f7f51d35cc08d59b6004e27ffa.jpg"},18920:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3e9abcd9-448d-4b5e-a9c2-f4cffdae7808-83b6d061b1252c3d768173887fc7ebc6.jpg"},45285:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/41a59b59-dace-4d31-acde-4cddeada64ca-8942455b85a618d8a0896af93e389f43.png"},36807:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/41cf63cf-9758-4b6b-9759-6ce8b8585df8-f1b16572f9721113520ce6a8b264d7af.png"},13695:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/4d3a46f7-4960-4f27-92c1-49e317ee2c5c-37a14960e4bc3f411766cfac20afd714.jpg"},10081:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/58f51861-ebbb-43f7-9076-d060ff13b11a-2d9fa37e61020dd41e3ff81b58eb005b.png"},24355:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/5A9F468D-F161-4FC4-B691-1FFC1C06B953-4b9a1697185f1165cce4676075c0aab4.jpg"},96359:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/636E8239-B438-48B9-82C4-4B7219C4B65C-69fcf662604386f2efd787789f909274.jpg"},66501:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/6b6efedb-18b1-4215-8432-7e05d3b8cc0c-f28dde76faa999c0ad18c22da83ac395.png"},6806:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/6dd1c78b-2527-4a51-90ea-8fa905ba93f4-79f3f7baf07e87aa895e3fc462bfa0c1.png"},3484:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/7182E1A1-1964-4FFD-8AC9-659F8101715C-d30d4a8b45fea1dc631ef79e6042db71.jpg"},80238:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/7A53B42F-BDBE-47C9-9592-4123314BF45A-398e9837b2b137e6611329af057ad4d7.png"},69749:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/8399A4F3-9540-4485-A26D-2747A1DC4BAF-d5bf8d06e0a7d4eee534c8d7d5bf1808.jpg"},85609:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/83a49780-3c9b-45bc-8281-da99bbdbd1fc-efbb033289765e9a1eccbb0153156456.png"},29498:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/9f99030c-c50e-41f4-970d-4bd207e00f72-9926918ffecf58ec889936c386d14a8c.png"},14630:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/AD027E75-A0DC-49C4-ADCF-611BD0BE7459-60b2a1fac5cab0b21de463576495f152.jpg"},13606:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/E14F3F02-2CA7-43D9-94C9-8AF9913719FC-7380e9ec9784eb870638515a6c6985ab.jpg"},1089:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/EA05AE9A-A41A-4AE1-A1E3-48D1E6A8AC03-1677963bd4e034b25833cc8955dec270.jpg"},94262:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/a3952603-43c0-49c8-b969-df3d4ef60658-7a5c4721120fda4d5dd831b6b84136b2.png"},33329:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/b03d7bc1-becf-419c-9aa5-fb0b0d5ed702-2ac70f15777ebaea0a48bb727c5d211f.png"},94692:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/b36ec106-6902-449e-a5af-962988445beb-192af444bf714a77d82f60ada3308629.png"},60620:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/c2a1a1a5-7c35-49aa-95ad-cb9b82cb3490-0691b8db702e42924c399637b6810ec9.png"},84320:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/e088a3e7-dabb-40f0-8a12-46816d54acf4-c55e9c9b2e8ca1cd805a75dfc35027a8.jpg"},77821:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/e1517d86-1953-4dc1-8bcc-6aa30160c5b5-24abf62786985a40edeeb005086fbcb1.jpg"},16156:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/e1531839-a9e8-43b6-aeeb-6743e1f210ed-23b31ebde22f01f0a1690b6c795603bb.png"},1047:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/e48ac656-d67a-4c0a-a481-11ced61796e0-1c1de6af34aee9d335d44984b833c578.png"},8393:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/f1ef6d59-64c0-476c-83ed-c0d97595c328-67842dcdfdfb1e150515e85248f42cb8.png"},1585:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/f5a8f2be-2251-46ac-8285-048cc0776700-abe926e44379c756ae6e21295d924a84.png"},25808:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/f7435a29-0c44-415f-b830-676a291e1f6e-87d09b51e4431a99d2e560b7dd7eddec.png"},65570:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/fe4477ef-50b4-46a3-ad40-997a187b7833-0e6c4c438c32124f07569a7079e4dea1.png"}}]);