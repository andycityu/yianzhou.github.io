"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6784],{54630:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var o=a(87462),i=(a(67294),a(3905));a(61839);const n={},s="Protocols and Categories",l={unversionedId:"Effective Objective-C/effective-oc-4",id:"Effective Objective-C/effective-oc-4",title:"Protocols and Categories",description:"23: Use Delegate and Data Source Protocols for Inter-object Communication",source:"@site/docs/language/Effective Objective-C/effective-oc-4.md",sourceDirName:"Effective Objective-C",slug:"/Effective Objective-C/effective-oc-4",permalink:"/docs/language/Effective Objective-C/effective-oc-4",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interface and API",permalink:"/docs/language/Effective Objective-C/effective-oc-3"},next:{title:"Memory Management",permalink:"/docs/language/Effective Objective-C/effective-oc-5"}},r={},c=[{value:"23: Use Delegate and Data Source Protocols for Inter-object Communication",id:"23-use-delegate-and-data-source-protocols-for-inter-object-communication",level:2},{value:"24: Use Categories to Break Class Implementations into Manageable Segments",id:"24-use-categories-to-break-class-implementations-into-manageable-segments",level:2},{value:"25: Always Prefix Category Names on Third-Party Classes",id:"25-always-prefix-category-names-on-third-party-classes",level:2},{value:"26: Avoid Properties in Categories",id:"26-avoid-properties-in-categories",level:2},{value:"27: Use the Class-Continuation Category to Hide Implementation Detail",id:"27-use-the-class-continuation-category-to-hide-implementation-detail",level:2},{value:"28: Use a Protocol to Provide Anonymous Objects",id:"28-use-a-protocol-to-provide-anonymous-objects",level:2}],d={toc:c};function p(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"protocols-and-categories"},"Protocols and Categories"),(0,i.kt)("h2",{id:"23-use-delegate-and-data-source-protocols-for-inter-object-communication"},"23: Use Delegate and Data Source Protocols for Inter-object Communication"),(0,i.kt)("p",null,"Define a protocol with potentially optional methods to define the interface that your delegate should support."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the Delegate pattern to provide an interface to your objects that need to tell other objects about pertinent events."),(0,i.kt)("li",{parentName:"ul"},"Use the Delegate pattern when an object needs to obtain data from another object. In this case, it is often referred to as a \u201cdata source.\u201d")),(0,i.kt)("h2",{id:"24-use-categories-to-break-class-implementations-into-manageable-segments"},"24: Use Categories to Break Class Implementations into Manageable Segments"),(0,i.kt)("p",null,"Use categories to split a class implementation into more manageable fragments."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"EOCPerson+Friendship(.h/.m)"),(0,i.kt)("li",{parentName:"ul"},"EOCPerson+Work(.h/.m)"),(0,i.kt)("li",{parentName:"ul"},"EOCPerson+Play(.h/.m)")),(0,i.kt)("p",null,"Create a category called Private to hide implementation detail of methods that should be considered as private."),(0,i.kt)("h2",{id:"25-always-prefix-category-names-on-third-party-classes"},"25: Always Prefix Category Names on Third-Party Classes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Always append your naming prefix to the names of categories you add to classes that are not your own."),(0,i.kt)("li",{parentName:"ul"},"Always append your naming prefix to the method names within categories you add to classes that are not your own.")),(0,i.kt)("h2",{id:"26-avoid-properties-in-categories"},"26: Avoid Properties in Categories"),(0,i.kt)("p",null,"Although it is technically possible to declare a property in a category, you should avoid doing so if possible. Keep all property declarations for encapsulated data in the main interface definition."),(0,i.kt)("h2",{id:"27-use-the-class-continuation-category-to-hide-implementation-detail"},"27: Use the Class-Continuation Category to Hide Implementation Detail"),(0,i.kt)("p",null,"After all, no method or instance variable is truly private in Objective-C, owing to the way the dynamic messaging system works. However, it is good practice to expose publicly only what needs to be exposed."),(0,i.kt)("p",null,"\u6210\u5458\u53d8\u91cf\u6709\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u65b9\u6cd5\u6ca1\u6709\u8bbf\u95ee\u4fee\u9970\u7b26\u3002"),(0,i.kt)("p",null,"The class-continuation category, unlike normal categories, is the only category that is allowed to declare extra instance variables. Also, this category doesn\u2019t have a specific implementation. Any method defined within it is expected to appear in the main implementation of the class. Unlike other categories, a class-continuation category has no name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},"@interface EOCPerson ()\n// Methods here\n@end\n")),(0,i.kt)("p",null,"Similarly, the instance variable could have been added to the implementation block, semantically equivalent to adding it to the class-continuation category and more a matter of preference. I prefer adding it to the category because it keeps all data definitions in the same place."),(0,i.kt)("h2",{id:"28-use-a-protocol-to-provide-anonymous-objects"},"28: Use a Protocol to Provide Anonymous Objects"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@property (nonatomic, weak) id <EOCDelegate> delegate;")))}p.isMDXComponent=!0}}]);