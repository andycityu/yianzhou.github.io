"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5358],{17006:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var i=t(87462),l=(t(67294),t(3905));t(61839);const s={},r="\u6392\u5e8f\u3001\u67e5\u627e",o={unversionedId:"leetcode/leetcode4",id:"leetcode/leetcode4",title:"\u6392\u5e8f\u3001\u67e5\u627e",description:"912-\u6570\u7ec4\u6392\u5e8f\uff08\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\uff09",source:"@site/docs/dev/leetcode/leetcode4.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode4",permalink:"/docs/dev/leetcode/leetcode4",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u94fe\u8868\u548c\u56fe",permalink:"/docs/dev/leetcode/leetcode3"},next:{title:"\u5b57\u7b26\u4e32",permalink:"/docs/dev/leetcode/leetcode5"}},a={},u=[{value:"912-\u6570\u7ec4\u6392\u5e8f\uff08\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\uff09",id:"912-\u6570\u7ec4\u6392\u5e8f\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5",level:2},{value:"215-\u7b2c k \u5927\u7684\u6570",id:"215-\u7b2c-k-\u5927\u7684\u6570",level:2},{value:"\u65b9\u6848\u4e00\uff1a\u5feb\u901f\u9009\u62e9\u7b97\u6cd5",id:"\u65b9\u6848\u4e00\u5feb\u901f\u9009\u62e9\u7b97\u6cd5",level:3},{value:"\u65b9\u6848\u4e8c\uff1a\u4f18\u5148\u961f\u5217",id:"\u65b9\u6848\u4e8c\u4f18\u5148\u961f\u5217",level:3},{value:"347-Top K \u9ad8\u9891\u5143\u7d20",id:"347-top-k-\u9ad8\u9891\u5143\u7d20",level:2},{value:"973-\u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9",id:"973-\u6700\u63a5\u8fd1\u539f\u70b9\u7684-k-\u4e2a\u70b9",level:2},{value:"295-\u4ece\u6570\u636e\u6d41\u4e2d\u627e\u4e2d\u4f4d\u6570",id:"295-\u4ece\u6570\u636e\u6d41\u4e2d\u627e\u4e2d\u4f4d\u6570",level:2},{value:"27-\u79fb\u9664\u6570\u7ec4\u4e2d\u6307\u5b9a\u5143\u7d20\uff08\u540c\u5411\u53cc\u6307\u9488\uff09",id:"27-\u79fb\u9664\u6570\u7ec4\u4e2d\u6307\u5b9a\u5143\u7d20\u540c\u5411\u53cc\u6307\u9488",level:2},{value:"26-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\uff08\u540c\u5411\u53cc\u6307\u9488\uff09",id:"26-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\u540c\u5411\u53cc\u6307\u9488",level:2},{value:"80-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II\uff08\u540c\u5411\u53cc\u6307\u9488\uff09",id:"80-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879-ii\u540c\u5411\u53cc\u6307\u9488",level:2},{value:"283-\u79fb\u52a8\u96f6\uff08\u540c\u5411\u53cc\u6307\u9488\uff09",id:"283-\u79fb\u52a8\u96f6\u540c\u5411\u53cc\u6307\u9488",level:2},{value:"75-\u989c\u8272\u6392\u5e8f",id:"75-\u989c\u8272\u6392\u5e8f",level:2},{value:"977-\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9",id:"977-\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9",level:2},{value:"34-\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e",id:"34-\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e",level:2},{value:"69-\u5e73\u65b9\u6839",id:"69-\u5e73\u65b9\u6839",level:2}],p={toc:u};function m(n){let{components:e,...s}=n;return(0,l.kt)("wrapper",(0,i.Z)({},p,s,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u6392\u5e8f\u67e5\u627e"},"\u6392\u5e8f\u3001\u67e5\u627e"),(0,l.kt)("h2",{id:"912-\u6570\u7ec4\u6392\u5e8f\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/sort-an-array/"},"912-\u6570\u7ec4\u6392\u5e8f"),"\uff08\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\uff09"),(0,l.kt)("p",null,"\u5f52\u5e76\u6392\u5e8f\uff1a\u539f\u59cb\u6570\u7ec4 ",(0,l.kt)("inlineCode",{parentName:"p"},"[4, 1, 3, 2]"),"\uff1b\u5148\u6392\u5e8f\u5de6\u534a\u8fb9\u3001\u518d\u6392\u5e8f\u53f3\u534a\u8fb9\uff0c\u5f97\u5230 ",(0,l.kt)("inlineCode",{parentName:"p"},"[1, 4, 2, 3]"),"\uff1b\u6700\u540e\u5408\u5e76\u6210 ",(0,l.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 4]"),"\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        N = len(nums)\n        aux = [0] * N # auxiliary \u8f85\u52a9\u6570\u7ec4\uff0c\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u989d\u5916 N \u7684\u5b58\u50a8\u7a7a\u95f4\n        self.sort(nums, aux, 0, N-1)\n        return nums\n\n    def sort(self, nums, aux, lo, hi):\n        if lo >= hi: return\n        mid = lo + (hi-lo)//2\n        self.sort(nums, aux, lo, mid)\n        self.sort(nums, aux, mid+1, hi)\n        self.merge(nums, aux, lo, mid, hi)\n\n    def merge(self, nums, aux, lo, mid, hi):\n        # copy to aux\n        for i in range(lo, hi+1):\n            aux[i] = nums[i]\n        # merge back to nums\n        i = lo\n        j = mid + 1\n        for k in range(lo, hi+1):\n            if i > mid: # \u5de6\u534a\u8fb9\u7684\u6570\u53d6\u5b8c\u4e86\uff0c\u53d6\u53f3\u534a\u8fb9\u7684\n                nums[k] = aux[j]\n                j += 1\n            elif j > hi: # \u53f3\u534a\u8fb9\u7684\u6570\u53d6\u5b8c\u4e86\uff0c\u53d6\u5de6\u534a\u8fb9\u7684\n                nums[k] = aux[i]\n                i += 1\n            elif aux[i] <= aux[j]:\n                nums[k] = aux[i]\n                i += 1\n            else:\n                nums[k] = aux[j]\n                j += 1\n")),(0,l.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int partition(vector<int>& nums, int lo, int hi) {\n        int i = lo + 1;\n        int j = hi;\n        while (true) {\n            while (i <= j && nums[i] <= nums[lo]) ++i;\n            while (i <= j && nums[j] >= nums[lo]) --j;\n            if (i >= j) break;\n            swap(nums[i], nums[j]);\n        }\n        swap(nums[lo], nums[j]);\n        return j;\n    }\n    void sort(vector<int>& nums, int lo, int hi) {\n        if (lo >= hi) return;\n        int pa = partition(nums, lo, hi);\n        sort(nums, lo, pa - 1);\n        sort(nums, pa + 1, hi);\n    }\n    vector<int> sortArray(vector<int>& nums) {\n        sort(nums, 0, nums.size() - 1);\n        return nums;\n    }\n};\n")),(0,l.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u5728\u5e73\u5747\u72b6\u51b5\u4e0b\u6709\u7740\u4e0d\u9519\u7684\u8868\u73b0\uff0c\u4f46\u662f\u5bf9\u4e8e\u57fa\u51c6\u503c\u7684\u9009\u62e9\u5341\u5206\u654f\u611f\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f O(n^2)\u3002C++ std sort \u7684\u5b9e\u73b0\u9009\u62e9\u4e86\u9996\u90e8\u3001\u4e2d\u90e8\u3001\u5c3e\u90e8\u4e09\u4e2a\u5143\u7d20\u7684\u4e2d\u503c\u4f5c\u4e3a pivot\u3002"),(0,l.kt)("p",null,"\u73b0\u5b9e\u4e2d\u5e94\u7528\u7684\u6392\u5e8f\uff0c\u5f80\u5f80\u6839\u636e\u6570\u636e\u96c6\u7684\u7279\u5f81\uff0c\u91c7\u7528\u591a\u79cd\u6392\u5e8f\u7b97\u6cd5\u7684\u6df7\u5408\u3002\u6bd4\u5982 C++ std sort \u7684\u5b9e\u73b0\u88ab\u79f0\u4e3a Introspective Sorting\uff08\u5185\u7701\u5f0f\u6392\u5e8f\uff09\uff0c\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u3001\u5206\u6bb5\u6392\u5e8f\uff1b\u5f53\u5206\u6bb5\u7684\u5143\u7d20\u4e2a\u6570\u5c0f\u4e8e 16 \u65f6\uff0c\u91c7\u7528\u63d2\u5165\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u5bf9\u201c\u5927\u90e8\u5206\u6709\u5e8f\u201d\u7684\u6570\u636e\u96c6\u6548\u7387\u975e\u5e38\u597d\uff1b\u5f53\u9012\u5f52\u5c42\u6b21\u8fc7\u6df1\u3001\u5206\u5272\u884c\u4e3a\u6709\u6076\u5316\u503e\u5411\u65f6\uff0c\u91c7\u7528\u5806\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u80fd\u4fdd\u8bc1 O(NlogN)\u3002\u53c2\u8003 ",(0,l.kt)("a",{parentName:"p",href:"https://feihu.me/blog/2014/sgi-std-sort/"},"std::sort \u6e90\u7801\u5256\u6790"),"\u3002"),(0,l.kt)("h2",{id:"215-\u7b2c-k-\u5927\u7684\u6570"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/"},"215-\u7b2c k \u5927\u7684\u6570")),(0,l.kt)("p",null,"\u627e\u5230\u6570\u7ec4\u4e2d\u7b2c k \u5927\u7684\u6570\uff0c\u6700\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u7528 O(NlogN) \u6392\u5e8f\uff0c\u518d\u7528 O(1) \u53d6\u7b2c k-1 \u4e2a\u5143\u7d20\u3002"),(0,l.kt)("h3",{id:"\u65b9\u6848\u4e00\u5feb\u901f\u9009\u62e9\u7b97\u6cd5"},"\u65b9\u6848\u4e00\uff1a\u5feb\u901f\u9009\u62e9\u7b97\u6cd5"),(0,l.kt)("p",null,"\u4e0e\u5feb\u901f\u6392\u5e8f\u4e00\u6837\uff0c\u90fd\u662f\u7531\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u6258\u5c3c\xb7\u970d\u5c14\u53d1\u660e\u7684\u3002"),(0,l.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\u4e2d\uff0c\u6709\u4e00\u4e2a\u5b50\u8fc7\u7a0b\u79f0\u4e3a\u5206\u533a\uff0c\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u91cc\u5c06\u4e00\u4e2a\u5217\u8868\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5206\u522b\u662f\u5c0f\u4e8e\u57fa\u51c6\u548c\u5927\u4e8e\u7b49\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u3002"),(0,l.kt)("p",null,"\u4e0e\u5feb\u901f\u6392\u5e8f\u4e00\u6837\uff0c\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\u5bf9\u4e8e\u57fa\u51c6\u503c\u7684\u9009\u62e9\u975e\u5e38\u654f\u611f\uff0c\u53ef\u4ee5\u5728\u5207\u5206\u51fd\u6570\u7684\u4e00\u5f00\u59cb\uff0c\u968f\u673a\u4ea4\u6362\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0e\u5b83\u540e\u9762\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u3002"),(0,l.kt)("p",null,"\u5b83\u7684\u65f6\u95f4\u4ee3\u4ef7\u7684\u671f\u671b\u662f O(n)\uff0c\u8bc1\u660e\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u300c\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b9.2\uff1a\u671f\u671b\u4e3a\u7ebf\u6027\u7684\u9009\u62e9\u7b97\u6cd5\u300d\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int partition(vector<int>& nums, int lo, int hi) {\n        int i = lo + 1;\n        int j = hi;\n        while (true) {\n            while (i <= j && nums[i] <= nums[lo]) ++i;\n            while (i <= j && nums[j] >= nums[lo]) --j;\n            if (i >= j) break;\n            swap(nums[i], nums[j]);\n        }\n        swap(nums[lo], nums[j]);\n        return j;\n    }\n\n    int findKthLargest(vector<int>& nums, int k) {\n        int N = nums.size();\n        k = N - k; // to find kth largest, means nums[N-k]\n        int lo = 0;\n        int hi = N - 1;\n        while (lo <= hi) {\n            int pa = partition(nums, lo, hi);\n            if (pa == k) {\n                return nums[k];\n            } else if (pa < k) {\n                lo = pa + 1;\n            } else {\n                hi = pa - 1;\n            }\n        }\n        return nums[k];\n    }\n};\n")),(0,l.kt)("h3",{id:"\u65b9\u6848\u4e8c\u4f18\u5148\u961f\u5217"},"\u65b9\u6848\u4e8c\uff1a\u4f18\u5148\u961f\u5217"),(0,l.kt)("p",null,"\u4f18\u5148\u961f\u5217\u5929\u7136\u5c31\u662f\u89e3\u51b3 TopK \u8fd9\u79cd\u95ee\u9898\u7684\u3002"),(0,l.kt)("p",null,"\u8003\u8651\u4ece 10 \u4ebf\u4e2a\u6570\u4e2d\u627e\u5230\u6700\u5927/\u6700\u5c0f\u7684 100 \u4e2a\u6570\u3002\u9996\u5148\u7a7a\u95f4\u4e0a\uff0c\u6837\u672c\u6570\u636e\u5982\u679c\u7279\u522b\u5927\uff08\u4f8b\u5982 10 \u4ebf\u8fd9\u79cd\u7ea7\u522b\uff09\uff0c\u5e76\u4e0d\u9002\u5408\u4e00\u6b21\u6027\u5c06\u6240\u6709\u6570\u636e\u8bfb\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5904\u7406\uff1b\u7b2c\u4e8c\u65f6\u95f4\u4e0a\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u96c6\u5206\u62c6\uff0c\u5145\u5206\u5229\u7528\u591a\u6838 CPU \u5e76\u884c\u5904\u7406\uff0c\u63d0\u9ad8\u6548\u7387\u3002"),(0,l.kt)("p",null,"\u4ee5\u627e\u6700\u5927\u7684 100 \u4e2a\u6570\u4e3a\u4f8b\uff08\u627e\u6700\u5927\u5219\u6784\u5efa\u6700\u5c0f\u5806\uff0c\u627e\u6700\u5c0f\u5219\u6784\u5efa\u6700\u5927\u5806\uff09\uff0c\u5c06\u6837\u672c\u96c6\u5206\u6210 1,000,000,000 / 100 = 1,000,000 \u4efd\uff0c\u6bcf\u4efd\u627e\u5230\u6700\u5927\u7684 100 \u4e2a\u6570\uff0c\u6700\u7ec8\u6574\u4f53\u7684\u6700\u5927 100 \u4e2a\u6570\u5fc5\u5b9a\u5728\u8fd9\u4e2d\u95f4\u4ea7\u751f\u3002\u5bf9\u6bcf\u4e00\u4efd\uff0c\u7528\u524d 100 \u4e2a\u6570\u6784\u5efa\u6700\u5c0f\u5806\uff0c\u518d\u904d\u5386\u5269\u4f59\u7684\u6570\uff0c\u5982\u679c\u5c0f\u4e8e\u5806\u9876\u5219\u76f4\u63a5\u8df3\u8fc7\uff1b\u5982\u679c\u5927\u4e8e\u5806\u9876\u5219\u5c06\u5b83\u653e\u5230\u5806\u91cc\uff0c\u540c\u65f6\u8c03\u6574\u5806\u3002\u8fd9\u6837\u904d\u5386\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4e2a\u6700\u5c0f\u5806\u5c31\u662f\u8fd9\u4e00\u4efd\u6837\u672c\u4e2d\u6700\u5927\u7684 100 \u4e2a\u6570\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5f53\u7236\u8282\u70b9\u7684\u952e\u503c\u603b\u662f\u5927\u4e8e\u6216\u7b49\u4e8e\u4efb\u4f55\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u952e\u503c\u65f6\u4e3a\u6700\u5927\u5806\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u5f53\u7236\u8282\u70b9\u7684\u952e\u503c\u603b\u662f\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4efb\u4f55\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u952e\u503c\u65f6\u4e3a\u6700\u5c0f\u5806\u3002")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        priority_queue<int, vector<int>, greater<int>> topK;\n        for (int i : nums) {\n            if (topK.size() < k) {\n                topK.push(i);\n            } else if (i > topK.top()) {\n                topK.push(i);\n                topK.pop();\n            }\n        }\n        return topK.top();\n    }\n};\n")),(0,l.kt)("h2",{id:"347-top-k-\u9ad8\u9891\u5143\u7d20"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/top-k-frequent-elements/"},"347-Top K \u9ad8\u9891\u5143\u7d20")),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002"),(0,l.kt)("p",null,"\u4f18\u5148\u961f\u5217\u5929\u7136\u5c31\u662f\u89e3\u51b3 TopK \u8fd9\u79cd\u95ee\u9898\u7684\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        unordered_map<int, int> um;\n        for (int i = 0; i < nums.size(); ++i) {\n            um[nums[i]] += 1;\n        }\n        auto cmp = [&um](int lhs, int rhs) { return um[lhs] > um[rhs]; };\n        priority_queue<int, vector<int>, decltype(cmp)> topK(cmp);\n        for (const auto &kv : um) {\n            if (topK.size() < k) {\n                topK.push(kv.first);\n            } else if (kv.second > um[topK.top()]) {\n                topK.pop();\n                topK.push(kv.first);\n            }\n        }\n        vector<int> res;\n        while (!topK.empty()) {\n            res.push_back(topK.top());\n            topK.pop();\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("h2",{id:"973-\u6700\u63a5\u8fd1\u539f\u70b9\u7684-k-\u4e2a\u70b9"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/k-closest-points-to-origin/"},"973-\u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {\n        auto cmp = [](const vector<int> &lhs, const vector<int> &rhs) {\n            return (pow(lhs[0], 2) + pow(lhs[1], 2)) < (pow(rhs[0], 2) + pow(rhs[1], 2));\n        };\n        priority_queue<vector<int>, vector<vector<int>>, decltype(cmp)> topK(cmp);\n        for (vector<int> &point : points) {\n            if (topK.size() < k) {\n                topK.push(point);\n            } else if (cmp(point, topK.top())) {\n                topK.pop();\n                topK.push(point);\n            }\n        }\n        vector<vector<int>> res;\n        while (!topK.empty()) {\n            res.emplace_back(std::move(topK.top()));\n            topK.pop();\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("h2",{id:"295-\u4ece\u6570\u636e\u6d41\u4e2d\u627e\u4e2d\u4f4d\u6570"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/find-median-from-data-stream/solution/"},"295-\u4ece\u6570\u636e\u6d41\u4e2d\u627e\u4e2d\u4f4d\u6570")),(0,l.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u5230\u5bb9\u5668\u4e2d\uff1b\u8fd4\u56de\u5bb9\u5668\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002"),(0,l.kt)("p",null,"\u65b9\u6848\u4e00\uff1a\u63d2\u5165\u6392\u5e8f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6570\u5b57\u63d2\u5165\u5230\u5217\u8868\u4e2d\u5e76\u7ee7\u7eed\u4fdd\u6301\u5217\u8868\u6709\u5e8f\u3002\u4e8c\u5206\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logN)\uff1b\u63d2\u5165\u65f6\u56e0\u4e3a\u8981\u79fb\u52a8\u63d2\u5165\u4f4d\u7f6e\u540e\u9762\u7684\u6240\u6709\u5143\u7d20\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N)\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N)\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class MedianFinder {\npublic:\n    void addNum(int num) {\n        if (vec.empty()) {\n            vec.push_back(num);\n        } else {\n            auto ite = lower_bound(vec.begin(), vec.end(), num); // \u4e8c\u5206\u67e5\u627e\n            vec.insert(ite, num); // \u63d2\u5165\n        }\n    }\n    double findMedian() {\n        int n = static_cast<int>(vec.size());\n        if (n % 2 == 0) {\n            return (vec[n/2-1] + vec[n/2]) * 0.5; // \u6ce8\u610f\u6574\u578b\u76f8\u9664\u7ed3\u679c 3 / 2 = 1\uff0c\u6240\u4ee5\u8981\u7528 * 0.5\n        } else {\n            return vec[n/2];\n        }\n    }\nprivate:\n    vector<int> vec;\n};\n")),(0,l.kt)("p",null,"\u65b9\u6848\u4e8c\uff1a\u8fd9\u9898\u6211\u4eec\u5173\u5fc3\u7684\u4ec5\u4ec5\u662f\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e0d\u9700\u8981\u4fdd\u6301\u6574\u4e2a\u6570\u7ec4\u6709\u5e8f\uff0c\u56e0\u6b64\u65b9\u6848\u4e00\u80af\u5b9a\u662f\u6709\u4f18\u5316\u7a7a\u95f4\u7684\u3002\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u5806\uff0c\u5c06\u6240\u6709\u6bd4\u4e2d\u4f4d\u6570\u5c0f\u7684\u6570\u653e\u5728 small \u5806\uff08\u5927\u6839\u5806\u3001\u6839\u6700\u5927\uff09\uff0c\u6bd4\u4e2d\u4f4d\u6570\u5927\u7684\u6570\u653e\u5728 big \u5806\uff08\u5c0f\u6839\u5806\u3001\u6839\u6700\u5c0f\uff09\uff0c\u5e76\u4e14\u4fdd\u8bc1\u4e24\u5806\u5bb9\u91cf\u4e4b\u5dee\u5c0f\u4e8e\u7b49\u4e8e 1\u3002\u90a3\u4e48\uff0c\u4e2d\u4f4d\u6570\u5c31\u4e00\u5b9a\u5728\u4e24\u4e2a\u5806\u7684\u5806\u9876\u4e4b\u4e2d\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"img-40",src:t(26101).Z,width:"683",height:"538"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class MedianFinder {\npublic:\n    void addNum(int num) {\n        if (small.empty()) {\n            small.push(num);\n            ++N;\n            return;\n        }\n        if (num <= small.top()) {\n            small.push(num);\n        } else {\n            big.push(num);\n        }\n        if (small.size() > 1 + big.size()) { // \u6ce8\u610f size_type \u662f\u65e0\u7b26\u53f7\u6570\uff0c\u4e0d\u8981\u76f8\u51cf\uff01\uff01\n            big.push(small.top());\n            small.pop();\n        } else if (big.size() > 1 + small.size()) {\n            small.push(big.top());\n            big.pop();\n        }\n        ++N;\n    }\n    double findMedian() {\n        if (N % 2 == 0) {\n            return (small.top() + big.top()) * 0.5;\n        } else {\n            return small.size() > big.size() ? small.top() : big.top();\n        }\n    }\nprivate:\n    priority_queue<int> small;\n    priority_queue<int, vector<int>, greater<int>> big;\n    int N = 0;\n};\n")),(0,l.kt)("p",null,"\u65b9\u6848\u4e09\uff1a\u80fd\u591f\u540c\u65f6\u6ee1\u8db3\u9ad8\u6548\u63d2\u5165\u3001\u641c\u7d22\u7684\u6570\u636e\u7ed3\u6784\u662f\u4ec0\u4e48\uff1f\u2014\u2014\u7ea2\u9ed1\u6811\u3002\u7ea2\u9ed1\u6811\u53ef\u4ee5\u4ee5 O(logN) \u65f6\u95f4\u63d2\u5165\u5143\u7d20\u5e76\u4fdd\u6301\u81ea\u5e73\u8861\uff1b\u800c\u4e2d\u4f4d\u6570\u5c31\u662f\u6839\u8282\u70b9\u3001\u6216\u6839\u8282\u70b9\u4e0e\u5b83\u7684\u4e00\u4e2a\u5b50\u6811\u7684\u5747\u503c\u3002"),(0,l.kt)("p",null,"\u7ea2\u9ed1\u6811\u5728 C++ \u7684\u5b9e\u73b0\u662f ",(0,l.kt)("inlineCode",{parentName:"p"},"set"),"\uff0c\u7531\u4e8e\u672c\u9898\u53ef\u80fd\u51fa\u73b0\u76f8\u540c\u6570\u5b57\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7528 ",(0,l.kt)("inlineCode",{parentName:"p"},"multiset"),"\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\uff1a\u5f53\u6570\u7ec4\u5927\u5c0f\u4e3a\u5947\u6570\u65f6\uff0c\u6307\u5411\u4e2d\u4f4d\u6570\uff1b\u5f53\u6570\u7ec4\u5927\u5c0f\u4e3a\u5076\u6570\u65f6\uff0c\u6307\u5411\u4e2d\u95f4\u4e24\u4e2a\u6570\u503c\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class MedianFinder {\npublic:\n    void addNum(int num) {\n        const size_t N = data.size();\n        data.insert(num);\n        if (N == 0) {\n            mid = data.begin();\n        } else if (num < *mid) {\n            mid = N & 1 ? mid : prev(mid);\n        } else {\n            mid = N & 1 ? next(mid) : mid;\n        }\n    }\n    double findMedian() {\n        const size_t N = data.size();\n        if (N & 1) {\n            return *mid;\n        } else {\n            return (*prev(mid) + *mid) * 0.5;\n        }\n    }\nprivate:\n    multiset<int> data;\n    multiset<int>::iterator mid;\n};\n")),(0,l.kt)("h2",{id:"27-\u79fb\u9664\u6570\u7ec4\u4e2d\u6307\u5b9a\u5143\u7d20\u540c\u5411\u53cc\u6307\u9488"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/remove-element/submissions/"},"27-\u79fb\u9664\u6570\u7ec4\u4e2d\u6307\u5b9a\u5143\u7d20"),"\uff08\u540c\u5411\u53cc\u6307\u9488\uff09"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5728\u539f\u5730\u5220\u9664\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int i = 0; // [0, i] \u533a\u95f4\u662f\u7b26\u5408\u6761\u4ef6\u7684\u7ed3\u679c\n        for (int j = 0; j < nums.size(); ++j) {\n            if (nums[j] != val) {\n                nums[i] = nums[j];\n                ++i;\n            }\n        }\n        return i;\n    }\n};\n")),(0,l.kt)("h2",{id:"26-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\u540c\u5411\u53cc\u6307\u9488"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/"},"26-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"),"\uff08\u540c\u5411\u53cc\u6307\u9488\uff09"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u7ec4\uff0c\u5728\u539f\u5730\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u8fd9\u4e2a\u601d\u8def\u53ef\u4ee5\u603b\u7ed3\u4e3a\u201c\u540c\u5411\u53cc\u6307\u9488\u201d\uff0c\u5373\u4e24\u4e2a\u6307\u9488\u671d\u540c\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\uff0c\u4e00\u5feb\u4e00\u6162\u3002\u5feb\u6307\u9488\u7528\u4e8e\u904d\u5386\uff0c\u6162\u6307\u9488\u5728\u6bcf\u4e2a\u5faa\u73af\u4f53\u4e2d\uff0c\u59cb\u7ec8\u4fdd\u6301\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u3002")),(0,l.kt)("p",null,"\u6b64\u9898\u4e2d\uff0c\u6162\u6307\u9488 i \u59cb\u7ec8\u6307\u5411\u7ed3\u679c\u6570\u7ec4\u7684\u53f3\u8fb9\u754c\uff0c\u59cb\u7ec8\u4fdd\u6301 nums","[0, i]"," \u662f\u7b26\u5408\u9898\u76ee\u6761\u4ef6\u7684\u6570\u7ec4\u3002"),(0,l.kt)("p",null,"\u7531\u4e8e\u6570\u7ec4\u6709\u5e8f\uff0ci \u59cb\u7ec8\u6307\u5411\u6700\u540e\u627e\u5230\u7684\u975e\u91cd\u590d\u5143\u7d20\uff0c\u5f53 j \u904d\u5386\u5230\u4e00\u4e2a\u4e0e i \u4e0d\u76f8\u540c\u7684\u503c\uff0c\u5c31\u4ee3\u8868\u627e\u5230\u4e86\u4e00\u4e2a\u65b0\u503c\uff0c\u6b64\u65f6\u79fb\u52a8\u6162\u6307\u9488\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5e76\u8986\u76d6\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if (nums.empty())\n            return 0;\n        int i = 1;\n        for (int j = 1; j < nums.size(); ++j) {\n            if (nums[j] != nums[j-1]) {\n                nums[i] = nums[j];\n                ++i;\n            }\n        }\n        return i;\n    }\n};\n")),(0,l.kt)("h2",{id:"80-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879-ii\u540c\u5411\u53cc\u6307\u9488"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/"},"80-\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II"),"\uff08\u540c\u5411\u53cc\u6307\u9488\uff09"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u7ec4\uff0c\u5728\u539f\u5730\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002"),(0,l.kt)("p",null,"\u4e0e\u4e0a\u9898\u601d\u8def\u4e00\u6837\uff0c\u6ce8\u610f\u521d\u59cb\u65f6\u6162\u6307\u9488\u7684\u8fb9\u754c\uff0c\u4ee5\u53ca\u79fb\u52a8\u6162\u6307\u9488\u7684\u6761\u4ef6\u5373\u53ef\u3002\u62d3\u5c55\u5230\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0 k \u6b21\uff0c\u4e5f\u662f\u4e00\u6837\u7684\u505a\u6cd5\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if (nums.size() <= 2)\n            return static_cast<int>(nums.size());\n        int i = 2;\n        for (int j = 2; j < nums.size(); ++j) {\n            if (nums[i-2] != nums[j]) {\n                nums[i] = nums[j];\n                ++i;\n            }\n        }\n        return i;\n    }\n};\n")),(0,l.kt)("h2",{id:"283-\u79fb\u52a8\u96f6\u540c\u5411\u53cc\u6307\u9488"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/move-zeroes/"},"283-\u79fb\u52a8\u96f6"),"\uff08\u540c\u5411\u53cc\u6307\u9488\uff09"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int i = 0;\n        for (int j = 0; j < nums.size(); ++j) {\n            if (nums[j] != 0) {\n                nums[i] = nums[j];\n                ++i;\n            }\n        }\n        for (int j = i; j < nums.size(); ++j) {\n            nums[j] = 0;\n        }\n    }\n};\n")),(0,l.kt)("h2",{id:"75-\u989c\u8272\u6392\u5e8f"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/sort-colors/"},"75-\u989c\u8272\u6392\u5e8f")),(0,l.kt)("p",null,"\u8fd9\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u7ecf\u5178\u7684\u8377\u5170\u56fd\u65d7\u95ee\u9898\u30021, 2, 3 \u4ee3\u8868\u7ea2\u767d\u84dd\u4e09\u8272\uff0c\u7ed9\u5b9a\u6570\u7ec4 ","[2,0,2,1,1,0]","\uff0c\u6392\u5e8f\u6210 ","[0,0,1,1,2,2]","\u3002"),(0,l.kt)("p",null,"\u8981\u628a\u6570\u7ec4\u5206\u6210\u4e09\u4e2a\u989c\u8272\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53cc\u6307\u9488 left, right \u6846\u5b9a\u597d \u201c1\u201d \u7684\u8303\u56f4\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u662f\uff0cnums","[left...right]"," \u90fd\u662f 1\u3001left \u7684\u5de6\u8fb9\u90fd\u662f 0\u3001right \u7684\u53f3\u8fb9\u90fd\u662f 2\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        int lo = 0;\n        int hi = static_cast<int>(nums.size()) - 1;\n        int i = 0;\n        while (i <= hi) {\n            if (nums[i] == 0) {\n                std::swap(nums[lo], nums[i]);\n                ++lo;\n                ++i;\n            } else if (nums[i] == 1) {\n                ++i;\n            } else {\n                std::swap(nums[i], nums[hi]);\n                --hi;\n            }\n        }\n    }\n};\n")),(0,l.kt)("p",null,"\u5982\u679c\u6269\u5c55\u5230\u56db\u8272\u5462\uff1f\u6709\u4e00\u79cd\u904d\u5386\u4e24\u6b21\u7684\u65b9\u6cd5\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u5148\u8bb0\u5f55\u6bcf\u4e2a\u989c\u8272\u7684\u4e2a\u6570\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u5c06\u6bcf\u4e2a\u989c\u8272\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u5373\u53ef\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        unordered_map<int, int> um;\n        for (int i : nums) {\n            ++um[i];\n        }\n        for (int i = 0; i < nums.size(); ++i) {\n            if (um[0] > 0) {\n                nums[i] = 0;\n                --um[0];\n            } else if (um[1] > 0) {\n                nums[i] = 1;\n                --um[1];\n            } else {\n                nums[i] = 2;\n                --um[2];\n            }\n        }\n    }\n};\n")),(0,l.kt)("h2",{id:"977-\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/squares-of-a-sorted-array/"},"977-\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9")),(0,l.kt)("p",null,"\u7ed9\u5b9a\u975e\u9012\u51cf\u6570\u7ec4 A\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6570\u5b57\u7684\u5e73\u65b9\u7ec4\u6210\u7684\u65b0\u6570\u7ec4\uff0c\u8981\u6c42\u4e5f\u6309\u975e\u9012\u51cf\u6392\u5e8f\u3002"),(0,l.kt)("p",null,"\u9047\u5230\u7684\u963f\u91cc\u9762\u8bd5\u771f\u9898\u3002\u5982\u679c\u76f4\u63a5\u4e58\u65b9\u7136\u540e\u6392\u5e8f\uff0c\u8ba1\u7b97\u6b21\u6570\u662f N + NLogN\uff0c\u590d\u6742\u5ea6\u662f O(NLogN)\u3002\u672c\u9898\u4e2d\u53ef\u4ee5\u5229\u7528\u6709\u5e8f\u6570\u7ec4\u3001\u6c42\u5e73\u65b9\u8fd9\u4e24\u4e2a\u7279\u6027\uff0c\u505a\u4e00\u4e9b\u6280\u5de7\uff0c\u964d\u4f4e\u8ba1\u7b97\u6b21\u6570\u3002"),(0,l.kt)("p",null,"\u65b9\u6848\u4e00\uff1a\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u96f6\u7684\u6570\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u5206\u522b\u5411\u5de6\u53f3\u904d\u5386\u3002"),(0,l.kt)("p",null,"\u65b9\u6848\u4e8c\uff1a\u5229\u7528\u539f\u6570\u7ec4\u7684\u7279\u6027\uff1a\u4e24\u8fb9\u7684\u5e73\u65b9\u5927\uff0c\u4e2d\u95f4\u7684\u5e73\u65b9\u5c0f\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int N = nums.size();\n        vector<int> res(N, 0);\n        int lo = 0;\n        int hi = N - 1;\n        for (int i = N - 1; i >= 0; --i) {\n            if (abs(nums[lo]) > abs(nums[hi])) {\n                res[i] = pow(nums[lo], 2);\n                ++lo;\n            } else {\n                res[i] = pow(nums[hi], 2);\n                --hi;\n            }\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("h2",{id:"34-\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},"34-\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e")),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u7ec4\uff0c\u627e\u51fa\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002"),(0,l.kt)("p",null,"\u8f93\u5165\uff1anums = ","[5,7,7,8,8,10]",", target = 8\uff1b\u8f93\u51fa\uff1a","[3,4]","\u3002"),(0,l.kt)("p",null,"\u4e8c\u5206\u6cd5+\u7ebf\u6027\u67e5\u627e\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def binarySearch(self, nums, target, lo, hi):\n        if lo > hi: return -1\n        mid = (lo + hi) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            return self.binarySearch(nums, target, lo, hi-1)\n        else:\n            return self.binarySearch(nums, target, lo+1, hi)\n\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        index = self.binarySearch(nums, target, 0, len(nums)-1)\n        i = index - 1\n        j = index + 1\n        while i >= 0 and nums[i] == target:\n            i -= 1\n        while j < len(nums) and nums[j] == target:\n            j += 1\n        return [i+1, j-1]\n")),(0,l.kt)("h2",{id:"69-\u5e73\u65b9\u6839"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/sqrtx/"},"69-\u5e73\u65b9\u6839")),(0,l.kt)("p",null,"\u65b9\u6848\u4e00\uff0c\u4e00\u4e2a\u6570\u7684\u5e73\u65b9\u6839\u4e0d\u4f1a\u8d85\u8fc7\u5b83\u9664\u4ee5\u4e8c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728 ","[2, x/2]"," \u8303\u56f4\u5185\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int mySqrt(int x) {\n        if (x <= 1) return x;\n        long hi = x / 2;\n        long lo = 0;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            long y = mid * mid; // mid * mid \u53ef\u80fd\u4f1a\u8d85\u51fa int \u7684\u8303\u56f4\n            if (y > x) {\n                hi = mid - 1;\n            } else if (y < x) {\n                lo = mid + 1;\n            } else {\n                return static_cast<int>(mid);\n            }\n        }\n        return static_cast<int>(hi);\n    }\n};\n")),(0,l.kt)("p",null,"\u65b9\u6848\u4e8c\uff0c\u725b\u987f\u8fed\u4ee3\u6cd5\u3002"))}m.isMDXComponent=!0},26101:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/41e4aa19-5f6e-41cc-97aa-afcf6e6dc9f3-c6b96b0e3cc2ed7f6625850b946aa109.png"}}]);