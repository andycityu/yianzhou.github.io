"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9581],{84960:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>C,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=t(87462),i=(t(67294),t(3905));t(61839);const o={},s="UIImage",r={unversionedId:"uiimage",id:"uiimage",title:"UIImage",description:"",source:"@site/docs/codes/uiimage.md",sourceDirName:".",slug:"/uiimage",permalink:"/docs/codes/uiimage",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Foundation",permalink:"/docs/codes/foundation"},next:{title:"UIKit",permalink:"/docs/codes/"}},d={},c=[],m={toc:c};function C(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"uiimage"},"UIImage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},"- (void)zya_saveToPath:(NSString *)filePath {\n    if (filePath.length == 0) {\n        return;\n    }\n    @autoreleasepool {\n        CFURLRef url = (__bridge CFURLRef)[NSURL fileURLWithPath:filePath];\n        CGImageDestinationRef destination = CGImageDestinationCreateWithURL(url, kUTTypePNG, 1, NULL);\n        CGImageDestinationAddImage(destination, [self CGImage], nil);\n        CFRelease(destination);\n    }\n}\n\n/// Convert UIImage to NSData using Core Graphics API\n- (NSData *)zya_NSData {\n    // Create a mutable data object\n    NSMutableData *data = [NSMutableData data];\n\n    // Create a CGImageDestinationRef using the data object and the MIME type\n    CGImageDestinationRef destination = CGImageDestinationCreateWithData((__bridge CFMutableDataRef)data, kUTTypeJPEG, 1, NULL);\n\n    // Check if the destination was created successfully\n    if (!destination) {\n        return nil;\n    }\n\n    // Create a CGImageRef from the UIImage\n    CGImageRef cgImage = self.CGImage;\n\n    // Add the CGImageRef to the destination\n    CGImageDestinationAddImage(destination, cgImage, nil);\n\n    // Finalize the destination\n    if (!CGImageDestinationFinalize(destination)) {\n        CFRelease(destination);\n        return nil;\n    }\n\n    // Release the destination\n    CFRelease(destination);\n\n    // Return the data object\n    return data;\n}\n\n- (void)screenshot {\n    CGSize imageSize = [UIScreen mainScreen].bounds.size;\n\n    UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    UIWindow *window = [[[UIApplication sharedApplication] windows] firstObject]\n    CGContextSaveGState(context);\n    CGContextTranslateCTM(context, window.center.x, window.center.y);\n    CGContextConcatCTM(context, window.transform);\n    CGContextTranslateCTM(\n                          context, -window.bounds.size.width * window.layer.anchorPoint.x, -window.bounds.size.height * window.layer.anchorPoint.y);\n    [window drawViewHierarchyInRect:window.bounds afterScreenUpdates:NO];\n    CGContextRestoreGState(context);\n\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n")))}C.isMDXComponent=!0}}]);