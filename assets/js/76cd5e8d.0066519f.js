"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9498],{47152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),s=(n(67294),n(3905));n(61839);const i={sidebar_position:5},l="Runtime",o={unversionedId:"Objective-C/runtime",id:"Objective-C/runtime",title:"Runtime",description:"isa",source:"@site/docs/language/Objective-C/runtime.md",sourceDirName:"Objective-C",slug:"/Objective-C/runtime",permalink:"/docs/language/Objective-C/runtime",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Block",permalink:"/docs/language/Objective-C/block"},next:{title:"RunLoop",permalink:"/docs/language/Objective-C/runloop"}},r={},c=[{value:"isa",id:"isa",level:2},{value:"method_t",id:"method_t",level:2},{value:"Type Encodings",id:"type-encodings",level:2},{value:"\u65b9\u6cd5\u7f13\u5b58",id:"\u65b9\u6cd5\u7f13\u5b58",level:2},{value:"fastpath \u548c slowpath",id:"fastpath-\u548c-slowpath",level:2},{value:"objc_msgSend",id:"objc_msgsend",level:2},{value:"objc_msgSendSuper",id:"objc_msgsendsuper",level:2},{value:"super \u5f15\u51fa\u7684\u51fd\u6570\u8c03\u7528\u5206\u6790",id:"super-\u5f15\u51fa\u7684\u51fd\u6570\u8c03\u7528\u5206\u6790",level:2},{value:"\u6c47\u7f16\u4ee3\u7801\u4e0e\u4e2d\u95f4\u4ee3\u7801",id:"\u6c47\u7f16\u4ee3\u7801\u4e0e\u4e2d\u95f4\u4ee3\u7801",level:2},{value:"\u65b9\u6cd5\u4ea4\u6362",id:"\u65b9\u6cd5\u4ea4\u6362",level:2},{value:"\u6570\u7ec4\u8d8a\u754c\u5982\u4f55\u4fdd\u62a4",id:"\u6570\u7ec4\u8d8a\u754c\u5982\u4f55\u4fdd\u62a4",level:2},{value:"\u6d88\u606f\u53d1\u9001",id:"\u6d88\u606f\u53d1\u9001",level:2},{value:"Weak \u7684\u5b9e\u73b0\u63a2\u7d22",id:"weak-\u7684\u5b9e\u73b0\u63a2\u7d22",level:2},{value:"class_rw_ext_t",id:"class_rw_ext_t",level:2},{value:"Method List",id:"method-list",level:2},{value:"Tagged Pointer",id:"tagged-pointer",level:2}],p={toc:c};function d(e){let{components:t,...i}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"runtime"},"Runtime"),(0,s.kt)("h2",{id:"isa"},"isa"),(0,s.kt)("p",null,"\u524d\u9762\u5b66\u4e60 ",(0,s.kt)("inlineCode",{parentName:"p"},"NSObject")," \u7684\u65f6\u5019\uff0c\u6211\u4eec\u77e5\u9053 ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_object")," \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6210\u5458\uff0c\u5c31\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"isa")," \u6307\u9488\uff0c\u6307\u5411 ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_class")," \u7c7b\u578b\u3002"),(0,s.kt)("p",null,"\u5728 32 \u4f4d\u67b6\u6784\u65f6\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"isa")," \u7684\u786e\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6307\u9488\uff0c\u5b58\u50a8\u7740\u7c7b\u5bf9\u8c61\u7684\u5730\u5740\u3002"),(0,s.kt)("p",null,"\u4f46\u5728 64 \u4f4d\u67b6\u6784\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"isa")," \u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4f7f\u7528\u4e86 union\uff08\u5171\u7528\u4f53\uff09\u548c bit-field\uff08\u4f4d\u57df\uff09\u6765\u5b58\u50a8\u66f4\u591a\u7684\u4fe1\u606f\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c",metastring:"title='objc-private.h'",title:"'objc-private.h'"},'union isa_t {\n    // \u6570\u636e\u90fd\u5b58\u5728\u8fd9\u91cc\n    // printf("%zu\\n", sizeof(uintptr_t)); // 8\u5b57\u8282\uff0c64\u4f4d\n    // defines: sys/_types/_uintptr_t.h\n    uintptr_t bits;\n\nprivate:\n    // Accessing the class requires custom ptrauth operations, so\n    // force clients to go through setClass/getClass by making this\n    // private.\n    Class cls;\n\npublic:\n#if defined(ISA_BITFIELD)\n    struct {\n        ISA_BITFIELD;  // defined in isa.h\n    };\n#endif\n\n    void setClass(Class cls, objc_object *obj);\n    Class getClass(bool authenticated);\n    Class getDecodedClass(bool authenticated);\n};\n')),(0,s.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u4f18\u5316\u540e\uff0c\u540c\u6837\u5360\u7528\u4e00\u4e2a\u6307\u9488\u7684\u5185\u5b58\u7a7a\u95f4\u5927\u5c0f\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86\u4f4d\u57df\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"bits")," \u4e2d\u53ef\u4ee5\u5b58\u50a8\u66f4\u591a\u7684\u4fe1\u606f\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c",metastring:"title='isa.h'",title:"'isa.h'"},"#define ISA_MASK 0x0000000ffffffff8ULL\nuintptr_t nonpointer        : 1; // 0 \u4ee3\u8868\u666e\u901a\u7684\u6307\u9488\u7c7b\u578b\uff0c\u5b58\u653e\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\uff1b1 \u4ee3\u8868\u4f18\u5316\u540e\u3001\u4f7f\u7528\u4f4d\u57df\u5b58\u50a8\u66f4\u591a\u4fe1\u606f\nuintptr_t has_assoc         : 1; // \u662f\u5426\u66fe\u7ecf\u8bbe\u7f6e\u8fc7\u5173\u8054\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u91ca\u653e\u65f6\u4f1a\u66f4\u5feb\nuintptr_t has_cxx_dtor      : 1; // \u662f\u5426\u6709 C++ \u6790\u6784\u51fd\u6570\uff08.cxx_destruct\uff09\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u91ca\u653e\u65f6\u4f1a\u66f4\u5feb\nuintptr_t shiftcls          : 33; /*MACH_VM_MAX_ADDRESS 0x1000000000 \u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u752833\u4f4d\u5b58\u50a8\u5c31\u591f\u4e86 */\nuintptr_t magic             : 6; // \u7528\u4e8e\u5728\u8c03\u8bd5\u65f6\u5206\u8fa8\u5bf9\u8c61\u662f\u5426\u5b8c\u6210\u521d\u59cb\u5316\nuintptr_t weakly_referenced : 1; // \u662f\u5426\u66fe\u7ecf\u88ab\u5f31\u5f15\u7528\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u91ca\u653e\u4f1a\u66f4\u5feb\nuintptr_t unused            : 1; // fixme: \u662f\u5426\u672a\u88ab\u4f7f\u7528\u8fc7\uff1f\nuintptr_t has_sidetable_rc  : 1; // \u5f53\u5f15\u7528\u8ba1\u6570\u5927\u5c0f\u8d85\u51fa 2^19 \u65f6\uff0c\u9700\u8981\u53e6\u5916\u5b58\u5728 SideTable \u7c7b\u91cc\nuintptr_t extra_rc          : 19 // rc \u5373 reference count\uff0c\u8fd9\u91cc\u5b58\u50a8\u7684\u503c\u662f\u5f15\u7528\u8ba1\u6570\u51cf 1\n")),(0,s.kt)("p",null,"\u5982\u679c\u6253\u5370\u7c7b\u5bf9\u8c61\u5730\u5740\u503c\u4f1a\u53d1\u73b0\uff0c\u6700\u4f4e 3 \u4f4d\u6c38\u8fdc\u662f 0\uff0c\u8fd9\u662f\u7531\u4e8e\u7c7b\u5bf9\u8c61\u5730\u5740\u503c\u662f\u5b58\u653e\u5728\u4f4e\u4f4d\u7b2c 4 \u4f4d\u5f00\u59cb\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'static void *key = &key;\n\nint main(int argc, const char * argv[]) {\n    NSLog(@"%p", [NSObject class]); // 0x21de7e330 \u7c7b\u5bf9\u8c61\u7684\u5730\u5740\u6700\u540e3\u4f4d\u6c38\u8fdc\u662f0\n\n    NSObject *obj = [[NSObject alloc] init];\n    /**\n     (lldb) p/x obj->isa\n     (Class) $0 = 0x010000021de7e331 NSObject\n     */\n    objc_setAssociatedObject(obj, &key, @1, OBJC_ASSOCIATION_ASSIGN); // \u6b64\u65f6\u8fd8\u672a\u8bbe\u7f6e\u5173\u8054\u5bf9\u8c61\uff0chas_assoc\u4e3a0\n    /**\n     (lldb) p/x obj->isa\n     (Class) $0 = 0x010000021de7e333 NSObject\n     */\n    objc_removeAssociatedObjects(obj); // has_assoc\u4e3a1\n    /**\n     (lldb) p/x obj->isa\n     (Class) $0 = 0x010000021de7e333 NSObject\n     */\n    // \u5c31\u7b97\u79fb\u9664\u4e86\u5173\u8054\u5bf9\u8c61\uff0chas_assoc\u4ecd\u7136\u4e3a1\n    return 0;\n}\n')),(0,s.kt)("p",null,"\u6709 cpp \u6790\u6784\u3001\u5173\u8054\u5bf9\u8c61\u7684\u5bf9\u8c61\uff0c\u91ca\u653e\u65f6\u4f1a\u591a\u505a\u4e00\u4e9b\u64cd\u4f5c\uff0c\u901f\u5ea6\u4f1a\u6162\u4e9b\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='objc-runtime-new.mm'",title:"'objc-runtime-new.mm'"},"void *objc_destructInstance(id obj)\n{\n    if (obj) {\n        // Read all of the flags at once for performance.\n        bool cxx = obj->hasCxxDtor();\n        bool assoc = obj->hasAssociatedObjects();\n\n        // This order is important.\n        if (cxx) object_cxxDestruct(obj);\n        if (assoc) _object_remove_assocations(obj, /*deallocating*/true);\n        obj->clearDeallocating();\n    }\n    return obj;\n}\n")),(0,s.kt)("h2",{id:"method_t"},"method_t"),(0,s.kt)("p",null,"\u63a5\u4e0b\u6765\u7814\u7a76\u7c7b\u5bf9\u8c61\u91cc\u7684\u65b9\u6cd5\u5217\u8868\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(52114).Z,width:"1240",height:"521"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='objc.h'",title:"'objc.h'"},"// \u770b\u4e0d\u5230 objc_selector \u7684\u6e90\u7801\uff0c\u4f46\u77e5\u9053\u5b83\u548c char * \u7c7b\u4f3c\u5c31\u53ef\u4ee5\u4e86\ntypedef struct objc_selector *SEL;\n// FIXME:\ntypedef void (*IMP)(void /* id, SEL, ... */ );\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='objc-runtime-new.mm'",title:"'objc-runtime-new.mm'"},'struct method_t {\n    // The representation of a "big" method. This is the traditional\n    // representation of three pointers storing the selector, types\n    // and implementation.\n    struct big {\n        SEL name; // SEL\u7406\u89e3\u4e3a\u51fd\u6570\u540d\u5c31\u53ef\u4ee5\u4e86\n        const char *types; // \u7f16\u7801\uff08\u8fd4\u56de\u503c\u7c7b\u578b\u3001\u53c2\u6570\u7c7b\u578b\uff09\n        MethodListIMP imp; // \u6307\u5411\u51fd\u6570\u7684\u6307\u9488\uff08\u5b58\u50a8\u7740\u51fd\u6570\u7684\u5730\u5740\uff09\n    };\n}\n')),(0,s.kt)("p",null,"\u4e0d\u540c\u7c7b\u4e2d\u76f8\u540c\u540d\u5b57\u7684\u65b9\u6cd5\uff0c\u6240\u5bf9\u5e94\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"SEL")," \u662f\u76f8\u540c\u7684\uff0c\u5185\u5b58\u5730\u5740\u90fd\u4e00\u6837\u3002"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(9285).Z,width:"1048",height:"598"})),(0,s.kt)("h2",{id:"type-encodings"},"Type Encodings"),(0,s.kt)("p",null,"\u82f9\u679c\u63d0\u4f9b\u4e86 ",(0,s.kt)("inlineCode",{parentName:"p"},"@encode")," \u7684\u6307\u4ee4\uff0c\u53ef\u4ee5\u5c06\u5177\u4f53\u7684\u7c7b\u578b\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\u7f16\u7801\uff0c\u8fd9\u662f\u4e3a\u4e86\u65b9\u4fbf\u5728 Runtime \u5185\u90e8\u8868\u793a\u7c7b\u578b\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'int main(int argc, const char * argv[]) {\n    NSLog(@"%s", @encode(int)); // i\n    NSLog(@"%s", @encode(id)); // @\n    NSLog(@"%s", @encode(SEL)); // :\n    return 0;\n}\n')),(0,s.kt)("p",null,"\u5177\u4f53\u7c7b\u578b\u53ef\u4ee5\u67e5\u9605\uff1a",(0,s.kt)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100"},"Type Encodings")),(0,s.kt)("h2",{id:"\u65b9\u6cd5\u7f13\u5b58"},"\u65b9\u6cd5\u7f13\u5b58"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc",metastring:"title='objc-runtime-new.h'",title:"'objc-runtime-new.h'"},"struct cache_t {\n    struct bucket_t *buckets() const; // hashtable\n    mask_t mask() const; // capacity - 1\n    mask_t occupied() const; // \u5df2\u7ecf\u7f13\u5b58\u7684\u65b9\u6cd5\u6570\u91cf\n}\n\nstruct bucket_t {\n    explicit_atomic<uintptr_t> _imp; // \u51fd\u6570\u5730\u5740\n    explicit_atomic<SEL> _sel; // SEL \u4f5c\u4e3a hashtable \u7684 key\n}\n")),(0,s.kt)("p",null,"\u54c8\u5e0c\u51fd\u6570\u5e38\u89c1\u7684\u5b9e\u73b0\u662f",(0,s.kt)("em",{parentName:"p"},"\u6a21\u9664"),"\u548c",(0,s.kt)("em",{parentName:"p"},"\u4f4d\u4e0e"),"\uff0c\u82f9\u679c\u7528\u7684\u662f\u4f4d\u4e0e\u3002\u65b9\u6cd5\u5728 hashtable \u4e2d\u7684\u7d22\u5f15\u662f sel & mask \u8ba1\u7b97\u51fa\u6765\u7684\uff08\u6570\u5b57 A \u4f4d\u4e0e\u6216\u6a21\u9664\u8fd0\u7b97\u7684\u7ed3\u679c\uff0c\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u6570\u5b57 A\uff09\u3002\u7531\u4e8e\u6700\u5927\u7684\u7d22\u5f15\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"capacity - 1"),"\uff0c\u56e0\u6b64 mask \u7684\u503c\u5c31\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"capacity - 1"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='objc-cache.mm'",title:"'objc-cache.mm'"},"static inline mask_t cache_next(mask_t i, mask_t mask) {\n    return i ? i-1 : mask; // \u54c8\u5e0c\u51b2\u7a81\u65f6\u91c7\u7528\u7ebf\u6027\u63a2\u6d4b\uff0c\u51cf\u4e00\uff0c\u5f88\u7b80\u5355\u7684\u5b9e\u73b0\n}\n\nstatic inline mask_t cache_hash(SEL sel, mask_t mask)\n{\n    uintptr_t value = (uintptr_t)sel;\n    return (mask_t)(value & mask);\n}\n\nvoid cache_t::insert(SEL sel, IMP imp, id receiver)\n{\n    // \u63d2\u5165\u524d\u7684\u51c6\u5907\u5de5\u4f5c\uff1a\u5bf9\u5bb9\u91cf\u8fdb\u884c\u68c0\u67e5\u3001\u5fc5\u8981\u65f6\u6269\u5bb9\n    // Use the cache as-is if until we exceed our expected fill ratio.\n    mask_t newOccupied = occupied() + 1;\n    unsigned oldCapacity = capacity(), capacity = oldCapacity;\n    if (slowpath(isConstantEmptyCache())) {\n        // Cache is read-only. Replace it.\n        if (!capacity) capacity = INIT_CACHE_SIZE;\n        reallocate(oldCapacity, capacity, /* freeOld */false);\n    }\n    else if (fastpath(newOccupied + CACHE_END_MARKER <= cache_fill_ratio(capacity))) {\n        // Cache is less than 3/4 or 7/8 full. Use it as-is.\n    }\n#if CACHE_ALLOW_FULL_UTILIZATION\n    else if (capacity <= FULL_UTILIZATION_CACHE_SIZE && newOccupied + CACHE_END_MARKER <= capacity) {\n        // Allow 100% cache utilization for small buckets. Use it as-is.\n    }\n#endif\n    else {\n        capacity = capacity ? capacity * 2 : INIT_CACHE_SIZE;\n        if (capacity > MAX_CACHE_SIZE) {\n            capacity = MAX_CACHE_SIZE;\n        }\n        reallocate(oldCapacity, capacity, true);\n    }\n\n    bucket_t *b = buckets();\n    mask_t m = capacity - 1;\n    mask_t begin = cache_hash(sel, m);\n    mask_t i = begin;\n\n    // Scan for the first unused slot and insert there.\n    // There is guaranteed to be an empty slot.\n    do {\n        if (fastpath(b[i].sel() == 0)) {\n            incrementOccupied();\n            b[i].set<Atomic, Encoded>(b, sel, imp, cls());\n            return;\n        }\n        if (b[i].sel() == sel) {\n            // The entry was added to the cache by some other thread\n            // before we grabbed the cacheUpdateLock.\n            return;\n        }\n    } while (fastpath((i = cache_next(i, m)) != begin));\n}\n\n// \u6269\u5bb9\u65f6\u4e0d\u4f1a\u5c06\u539f\u6765\u7684\u65b9\u6cd5\u7f13\u5b58\u590d\u5236\u8fc7\u6765\u7684\uff0c\u6269\u5bb9\u540e\u539f\u6765\u7684\u65b9\u6cd5\u7f13\u5b58\u5c31\u6ca1\u6709\u4e86\nvoid cache_t::reallocate(mask_t oldCapacity, mask_t newCapacity, bool freeOld)\n{\n    bucket_t *oldBuckets = buckets();\n    bucket_t *newBuckets = allocateBuckets(newCapacity);\n\n    setBucketsAndMask(newBuckets, newCapacity - 1);\n\n    if (freeOld) {\n        collect_free(oldBuckets, oldCapacity);\n    }\n}\n")),(0,s.kt)("h2",{id:"fastpath-\u548c-slowpath"},"fastpath \u548c slowpath"),(0,s.kt)("p",null,"\u5728 objc \u6e90\u7801\u91cc\u5b9a\u4e49\u4e86\u4e24\u4e2a\u5b8f\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#define fastpath(x) (__builtin_expect(bool(x), 1))\n#define slowpath(x) (__builtin_expect(bool(x), 0))\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"long __builtin_expect (long exp, long c)")," \u662f ",(0,s.kt)("a",{parentName:"p",href:"https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html"},"gcc \u7f16\u8bd1\u5668\u7684\u5185\u7f6e\u51fd\u6570"),"\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u54ea\u4e2a\u5206\u652f\u66f4\u6709\u53ef\u80fd\u88ab\u6267\u884c\u3002\u7f16\u8bd1\u5668\u4f1a\u5c06\u66f4\u6709\u53ef\u80fd\u6267\u884c\u7684\u5206\u652f\u7684\u673a\u5668\u7801\u7d27\u5bc6\u6392\u5217\u5728\u4e00\u8d77\uff0c\u51cf\u5c11\u6307\u4ee4\u8df3\u8f6c\u5e26\u6765\u7684\u6027\u80fd\u635f\u8017\u3002"),(0,s.kt)("p",null,"\u4f8b\u5982 ",(0,s.kt)("inlineCode",{parentName:"p"},"(__builtin_expect(bool(x), 1))")," \u544a\u8bc9\u7f16\u8bd1\u5668\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"x == 1")," \u7684\u53ef\u80fd\u6027\u5f88\u5927\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u4f1a\u8d70\u8fd9\u4e2a\u5206\u652f\uff0c\u56e0\u6b64\u547d\u540d\u4e3a ",(0,s.kt)("inlineCode",{parentName:"p"},"fastpath"),"\u3002"),(0,s.kt)("h2",{id:"objc_msgsend"},"objc_msgSend"),(0,s.kt)("p",null,"\u65b9\u6cd5\u8c03\u7528\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a1. \u6d88\u606f\u53d1\u9001\uff1b2. \u52a8\u6001\u65b9\u6cd5\u89e3\u6790\uff1b3. \u6d88\u606f\u8f6c\u53d1\u3002"),(0,s.kt)("p",null,"\u5728\u5b66\u4e60 ",(0,s.kt)("inlineCode",{parentName:"p"},"NSObject")," \u65f6\uff0c\u6211\u4eec\u5c06 oc \u4ee3\u7801\u91cd\u5199\u4e3a cpp \u4ee3\u7801\u540e\u53d1\u73b0\uff0coc \u7684\u65b9\u6cd5\u8c03\u7528\u5728\u5e95\u5c42\u90fd\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_msgSend")," \u51fd\u6570\uff0c\u5728 objc \u6e90\u7801\u91cc\u5b83\u662f\u7528\u6c47\u7f16\u5b9e\u73b0\u7684\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c",metastring:"title='objc-msg-arm64.s'",title:"'objc-msg-arm64.s'"},"    ENTRY _objc_msgSend\n    UNWIND _objc_msgSend, NoFrame\n\n    // x0\u5bc4\u5b58\u5668\uff0c\u5373objc_msgSend\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u6d88\u606f\u63a5\u6536\u8005\n    cmp p0, #0          // nil check and tagged pointer check\n#if SUPPORT_TAGGED_POINTERS\n    // b\u4ee3\u8868\u8df3\u8f6c\uff0cle\u5373less equal\uff0c\u5f53x0<=0\u65f6\uff0c\u8df3\u8f6c\u5230LNilOrTagged\n    b.le    LNilOrTagged        //  (MSB tagged pointer looks negative)\n#else\n    // \u5982\u679c\u6d88\u606f\u63a5\u6536\u8005\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de0\u4e86\n    b.eq    LReturnZero\n#endif\n    ldr p13, [x0]       // p13 = isa\n    GetClassFromIsa_p16 p13, 1, x0  // p16 = class\nLGetIsaDone:\n    // calls imp or objc_msgSend_uncached\n    CacheLookup NORMAL, _objc_msgSend, __objc_msgSend_uncached\n\n#if SUPPORT_TAGGED_POINTERS\nLNilOrTagged:\n    b.eq    LReturnZero     // nil check\n    GetTaggedClass\n    b   LGetIsaDone\n// SUPPORT_TAGGED_POINTERS\n#endif\n\nLReturnZero:\n    // x0 is already zero\n    mov x1, #0\n    movi    d0, #0\n    movi    d1, #0\n    movi    d2, #0\n    movi    d3, #0\n    ret\n\n    END_ENTRY _objc_msgSend\n\n.macro MethodTableLookup\n\n    SAVE_REGS MSGSEND\n\n    // lookUpImpOrForward(obj, sel, cls, LOOKUP_INITIALIZE | LOOKUP_RESOLVER)\n    // receiver and selector already in x0 and x1\n    mov x2, x16\n    mov x3, #3\n    bl  _lookUpImpOrForward\n\n    // IMP in x0\n    mov x17, x0\n\n    RESTORE_REGS MSGSEND\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"_lookUpImpOrForward")," \u5bf9\u5e94 C/C++ \u7684\u4ee3\u7801\u5e94\u8be5\u53bb\u6389\u6700\u524d\u9762\u7684\u4e00\u4e2a\u4e0b\u5212\u7ebf\uff0c\u56e0\u6b64\u5728 objc \u6e90\u7801\u91cc\u627e ",(0,s.kt)("inlineCode",{parentName:"p"},"lookUpImpOrForward")," \u65b9\u6cd5\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='objc-runtime-new.mm'",title:"'objc-runtime-new.mm'"},"NEVER_INLINE\nIMP lookUpImpOrForward(id inst, SEL sel, Class cls, int behavior)\n{\n    const IMP forward_imp = (IMP)_objc_msgForward_impcache;\n    IMP imp = nil;\n    // \u7b2c\u4e00\u6b65\uff0cself/superclass \u65b9\u6cd5\u5217\u8868\u67e5\u627e\n    for (unsigned attempts = unreasonableClassCount();;) {\n        // curClass method list.\n        Method meth = getMethodNoSuper_nolock(curClass, sel);\n        if (meth) {\n            imp = meth->imp(false); // \u627e\u5230\u4e86\n            goto done;\n        }\n        // getSuperclass\u4e00\u76f4\u5f80\u7236\u7c7b\u91cc\u627e\n        if (slowpath((curClass = curClass->getSuperclass()) == nil)) {\n            // No implementation found, and method resolver didn't help.\n            // Use forwarding.\n            imp = forward_imp; // 1\u30012\u6b65\u90fd\u6ca1\u627e\u5230\uff0c\u6700\u540e\u7b2c3\u6b65\u62ffforward_imp\u515c\u5e95\n            break;\n        }\n    }\n    // \u7b2c\u4e8c\u6b65\n    // No implementation found. Try method resolver once.\n    if (slowpath(behavior & LOOKUP_RESOLVER)) {\n        behavior ^= LOOKUP_RESOLVER;\n        return resolveMethod_locked(inst, sel, cls, behavior);\n    }\n}\n\nstatic NEVER_INLINE IMP\nresolveMethod_locked(id inst, SEL sel, Class cls, int behavior)\n{\n    if (! cls->isMetaClass()) {\n        // try [cls resolveInstanceMethod:sel]\n        resolveInstanceMethod(inst, sel, cls);\n    }\n    else {\n        // try [nonMetaClass resolveClassMethod:sel]\n        // and [cls resolveInstanceMethod:sel]\n        resolveClassMethod(inst, sel, cls);\n        if (!lookUpImpOrNilTryCache(inst, sel, cls)) {\n            resolveInstanceMethod(inst, sel, cls);\n        }\n    }\n    // \u8c03\u7528\u89e3\u6790\u5668\u53ef\u80fd\u5df2\u7ecf\u586b\u5145\u4e86\u7f13\u5b58\n    // chances are that calling the resolver have populated the cache\n    // so attempt using it\n    return lookUpImpOrForwardTryCache(inst, sel, cls, behavior);\n}\n\nstatic void resolveInstanceMethod(id inst, SEL sel, Class cls)\n{\n\n    SEL resolve_sel = @selector(resolveInstanceMethod:);\n    BOOL (*msg)(Class, SEL, SEL) = (typeof(msg))objc_msgSend; // \u5411\u7c7b\u53d1\u9001resolveInstanceMethod:\u6d88\u606f\n    bool resolved = msg(cls, resolve_sel, sel);\n\n    // \u628a\u52a8\u6001\u89e3\u6790\u7684\u65b9\u6cd5\u7f13\u5b58\u4e0b\u6765\u4e86\uff0c\u4e0b\u6b21\u5c31\u4e0d\u7528\u52a8\u6001\u89e3\u6790\u4e86\n    // Cache the result (good or bad) so the resolver doesn't fire next time.\n    // +resolveInstanceMethod adds to self a.k.a. cls\n    IMP imp = lookUpImpOrNilTryCache(inst, sel, cls);\n}\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"_objc_msgForward_impcache")," \u7684\u5b9e\u73b0\u53ef\u4ee5\u5728\u6c47\u7f16\u4ee3\u7801\u91cc\u627e\u5230\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c",metastring:"title='objc-msg-arm64.s'",title:"'objc-msg-arm64.s'"},"    STATIC_ENTRY __objc_msgForward_impcache\n\n    // No stret specialization.\n    b   __objc_msgForward\n\n    END_ENTRY __objc_msgForward_impcache\n\n\n    ENTRY __objc_msgForward\n\n    adrp    x17, __objc_forward_handler@PAGE\n    ldr p17, [x17, __objc_forward_handler@PAGEOFF]\n    TailCallFunctionPointer x17\n\n    END_ENTRY __objc_msgForward\n")),(0,s.kt)("p",null,"\u67e5\u5230 ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_defaultForwardHandler")," \u8fd9\u91cc\uff0c\u5c31\u627e\u4e0d\u5230\u4e86\uff0c\u56e0\u4e3a\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u6ca1\u6709\u5f00\u6e90\u3002\u4f46\u5df2\u6709\u56fd\u5916\u5927\u795e\u901a\u8fc7\u9006\u5411\u6574\u7406\u51fa ",(0,s.kt)("inlineCode",{parentName:"p"},"___forwarding___")," \u7684\u4f2a\u4ee3\u7801\uff0c\u56e0\u5b9e\u6218\u610f\u4e49\u4e0d\u5927\uff0c\u8fd9\u91cc\u4e0d\u7ee7\u7eed\u63a2\u7a76\u4e86\u3002"),(0,s.kt)("h2",{id:"objc_msgsendsuper"},"objc_msgSendSuper"),(0,s.kt)("p",null,"\u6211\u4eec\u91cd\u5199\u4e00\u6bb5\u5e38\u89c1\u7684\u4ee3\u7801\u4e3a cpp\uff0c\u6765\u63a2\u7a76 ",(0,s.kt)("inlineCode",{parentName:"p"},"super")," \u5173\u952e\u5b57\u80cc\u540e\u7684\u539f\u7406\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},'@interface Demo : NSObject\n- (void)test;\n@end\n\n@implementation Demo\n- (void)test {\n    Class superCls = [super class];\n    NSLog(@"%@", superCls); // \u4e3a\u4ec0\u4e48\u662fDemo\uff1f\n}\n@end\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'static void _I_Demo_test(Demo * self, SEL _cmd) {\n    Class superCls = objc_msgSendSuper((__rw_objc_super){\n        (id)self, // receiver\n        (id)class_getSuperclass(objc_getClass("Demo"))\n    }, sel_registerName("class"));\n    NSLog((NSString *)&__NSConstantStringImpl__var_folders_yb_d6gg31rn7snd9rnp12sctfb00000gn_T_Demo_52f45a_mi_0, superCls);\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='message.h'",title:"'message.h'"},"struct objc_super {\n    /// Specifies an instance of a class.\n    __unsafe_unretained _Nonnull id receiver;\n    /// Specifies the particular superclass of the instance to message.\n    __unsafe_unretained _Nonnull Class super_class;\n    /* super_class is the first class to search */\n};\n\n/**\n * @param super A pointer to an \\c objc_super data structure. Pass values identifying the\n *  context the message was sent to, including the instance of the class that is to receive the\n *  message and the superclass at which to start searching for the method implementation.\n */\nOBJC_EXPORT id _Nullable\nobjc_msgSendSuper(struct objc_super * _Nonnull super, SEL _Nonnull op, ...);\n")),(0,s.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136\u6211\u4eec\u8c03\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"[super class]"),"\uff0c\u4f46\u6d88\u606f\u63a5\u6536\u8005\u4ecd\u7136\u662f self \u5bf9\u8c61\uff01\u800c\u4e14\u662f\u6307\u4ece\u7236\u7c7b\u5f00\u59cb\u67e5\u627e\u65b9\u6cd5\u7684\u5b9e\u73b0\uff01"),(0,s.kt)("p",null,"\u7531\u4e8e ",(0,s.kt)("inlineCode",{parentName:"p"},"class")," \u7684\u5b9e\u73b0\u662f\u5728 ",(0,s.kt)("inlineCode",{parentName:"p"},"NSObject"),"\uff0c\u56e0\u6b64\u65e0\u8bba\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"[self class]")," \u6216\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"[super class]"),"\uff0c\u6700\u540e\u90fd\u662f\u8df3\u8f6c\u5230 ",(0,s.kt)("inlineCode",{parentName:"p"},"NSObject")," \u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"IMP"),"\uff0c\u800c\u6d88\u606f\u63a5\u6536\u8005\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"self")," \u5bf9\u8c61\uff0c\u56e0\u6b64\u6253\u5370\u51fa\u6765\u7684\u7c7b\u540d\u4ecd\u7136\u662f\u5f53\u524d\u7c7b\u7684\u7c7b\u540d\uff0c\u800c\u4e0d\u662f\u7236\u7c7b\u7684\u7c7b\u540d\u3002"),(0,s.kt)("h2",{id:"super-\u5f15\u51fa\u7684\u51fd\u6570\u8c03\u7528\u5206\u6790"},"super \u5f15\u51fa\u7684\u51fd\u6570\u8c03\u7528\u5206\u6790"),(0,s.kt)("p",null,"\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},'@interface Demo : NSObject\n@property (nonatomic, copy) NSString *name;\n- (void)print;\n@end\n\n@implementation Demo\n- (void)print {\n    NSLog(@"%@", self.name); // ptr->cls, cls \u504f\u79fb8\u4e2a\u5b57\u8282\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u6808\u4e0a\u7684 hello \u53d8\u91cf\uff01\n}\n@end\n\n@interface ViewController : UIViewController\n@end\n\n@implementation ViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    // \u6808\u7a7a\u95f4\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u4f38\u5c55\n    long long a = 1;\n    long long b = 2;\n\n    NSString *hello = @"hello";\n    id cls = [Demo class]; // typedef struct objc_object *id;\n    void *ptr = &cls;\n    [(__bridge id)ptr print]; // \u6253\u5370\u51fa\u6765\u662f"hello"\uff0c\u4e3a\u4ec0\u4e48\uff1f\n    // objc_msgSend(ptr, "print");\n\n    NSLog(@"%p, %p", &a, &b);\n    NSLog(@"%p, %p", &hello, hello);\n    NSLog(@"%p, %p", &cls, cls);\n    NSLog(@"%p", &ptr);\n}\n\n@end\n')),(0,s.kt)("p",null,"\u5185\u5b58\u7ed3\u6784\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(25379).Z,width:"2418",height:"1134"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(86791).Z,width:"1702",height:"988"})),(0,s.kt)("p",null,"\u5982\u679c\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4fee\u6539\u6210\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},"- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    id cls = [Demo class];\n    void *ptr = &cls;\n    [(__bridge id)ptr print];\n}\n")),(0,s.kt)("p",null,"\u6253\u5370\u51fa\u6765\u5c06\u662f ViewController \u7684\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u4e3a\u4ec0\u4e48\uff1f\u539f\u56e0\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"[super viewDidLoad]")," \u8c03\u7528\u5728\u5e95\u5c42\u521b\u5efa\u4e86\u4e34\u65f6\u7ed3\u6784\u4f53\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'(__rw_objc_super){\n    (id)self, // \u4f4e\u5730\u5740\n    (id)class_getSuperclass(objc_getClass("Demo")) // \u9ad8\u5730\u5740\n}\n')),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"cls")," \u6307\u9488\u987a\u7740\u504f\u79fb 8 \u4e2a\u5b57\u8282\uff0c\u5c06\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"self")," \u5bf9\u8c61\u3002"),(0,s.kt)("h2",{id:"\u6c47\u7f16\u4ee3\u7801\u4e0e\u4e2d\u95f4\u4ee3\u7801"},"\u6c47\u7f16\u4ee3\u7801\u4e0e\u4e2d\u95f4\u4ee3\u7801"),(0,s.kt)("p",null,"\u6ce8\u610f\uff0c\u521a\u624d\u6211\u4eec\u662f\u901a\u8fc7\u91cd\u5199\u4e3a cpp \u4ee3\u7801\u7684\u65b9\u5f0f\u6765\u63a2\u7d22\u5e95\u5c42\uff0c\u771f\u6b63\u8fd0\u884c\u65f6\u7684\u8c03\u7528\u8ddf cpp \u4ee3\u7801\u6709\u533a\u522b\uff0c\u5982\u679c\u65ad\u70b9\u5728\u6c47\u7f16\u4ee3\u7801\uff0c\u4f1a\u770b\u5230\u8c03\u7528\u7684\u5176\u5b9e\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_msgSendSuper2"),"\uff0c\u627e\u5230\u8fd9\u4e2a\u51fd\u6570\u7684\u6c47\u7f16\u5b9e\u73b0\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c",metastring:"title='objc-msg-arm64.s'",title:"'objc-msg-arm64.s'"},"    ENTRY _objc_msgSendSuper2\n    UNWIND _objc_msgSendSuper2, NoFrame\n\n#if __has_feature(ptrauth_calls)\n    ldp x0, x17, [x0]       // x0 = real receiver, x17 = class\n    add x17, x17, #SUPERCLASS   // x17 = &class->superclass\n    ldr x16, [x17]      // x16 = class->superclass\n    AuthISASuper x16, x17, ISA_SIGNING_DISCRIMINATOR_CLASS_SUPERCLASS\nLMsgSendSuperResume:\n#else\n    ldp p0, p16, [x0]       // p0 = real receiver, p16 = class\n    ldr p16, [x16, #SUPERCLASS] // p16 = class->superclass\n#endif\nL_objc_msgSendSuper2_body:\n    CacheLookup NORMAL, _objc_msgSendSuper2, __objc_msgSend_uncached\n\n    END_ENTRY _objc_msgSendSuper2\n")),(0,s.kt)("p",null,"\u53d1\u73b0 ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_msgSendSuper2")," \u8c03\u7528\u65f6\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"x0")," \u662f\u6d88\u606f\u63a5\u6536\u8005\u4e5f\u5c31\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"self"),"\uff0c\u4f46 ",(0,s.kt)("inlineCode",{parentName:"p"},"x17")," \u662f class \u672c\u8eab\u800c\u4e0d\u662f superclass\uff0c\u8fd9\u4e2a\u8ddf cpp \u4ee3\u7801\u662f\u6709\u533a\u522b\u7684\uff08\u4f46\u8fd9\u4e9b\u5fae\u5c0f\u5dee\u522b\u4e0d\u5f71\u54cd\u6211\u4eec\u7528\u91cd\u5199\u4e3a cpp \u4ee3\u7801\u7684\u65b9\u5f0f\u6765\u63a2\u7a76\u5e95\u5c42\u539f\u7406\uff09\u3002"),(0,s.kt)("p",null,"\u901a\u8fc7\u5c06\u5b9e\u73b0\u6587\u4ef6\u8f6c\u4e3a\u6c47\u7f16\u4ee3\u7801\uff0c\u5e76\u641c\u7d22\u5b9e\u73b0\u6587\u4ef6\u4e2d\u7684\u884c\u53f7\uff0c\u4e5f\u53ef\u4ee5\u627e\u5230\u5e95\u5c42\u7684\u5b9e\u73b0\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(34741).Z,width:"2620",height:"2152"})),(0,s.kt)("p",null,"\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7aa5\u63a2\u5e95\u5c42\u5b9e\u73b0\u3002\u82f9\u679c\u5728\u771f\u6b63\u7f16\u8bd1\u6211\u4eec\u7684\u7a0b\u5e8f\u65f6\uff0c\u5728 objc \u548c\u6c47\u7f16\u4ee3\u7801\u7684\u4e2d\u95f4\uff0c\u5e76\u4e0d\u662f cpp\uff0c\u800c\u662f\u4e00\u79cd\u4e2d\u95f4\u4ee3\u7801\uff0c\u540e\u7f00\u4e3a ",(0,s.kt)("inlineCode",{parentName:"p"},"ll"),"\uff08\u4ee3\u8868 LLVM\uff09\uff0c\u5176\u8bed\u6cd5\u53ef\u53c2\u8003 ",(0,s.kt)("a",{parentName:"p",href:"https://llvm.org/docs/LangRef.html"},"https://llvm.org/docs/LangRef.html"),"\u3002"),(0,s.kt)("p",null,"\u4e2d\u95f4\u4ee3\u7801\u662f\u5e73\u53f0\u65e0\u5173\u7684\u3002\u7f16\u8bd1\u65f6\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7684\u4ee3\u7801\u5148\u8f6c\u6210\u4e2d\u95f4\u4ee3\u7801\uff0c\u518d\u8f6c\u6210\u5177\u4f53\u67b6\u6784\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u6700\u540e\u8f6c\u6210\u673a\u5668\u7801\u3002"),(0,s.kt)("p",null,"\u7528\u4ee5\u4e0b\u6307\u4ee4\u8f6c\u6210\u7684 Demo.ll \u6587\u4ef6\u4e2d\uff0c\u540c\u6837\u80fd\u627e\u5230 ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_msgSendSuper2")," \u7684\u8c03\u7528\uff1a"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"clang -emit-llvm -S Demo.m")),(0,s.kt)("h2",{id:"\u65b9\u6cd5\u4ea4\u6362"},"\u65b9\u6cd5\u4ea4\u6362"),(0,s.kt)("p",null,"\u65b9\u6cd5\u4ea4\u6362\uff0c\u4ea4\u6362\u7684\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"struct class_rw_t")," \u91cc\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"method_array_t methods")," \u91cc\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"struct method_t")," \u91cc\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"MethodListIMP imp"),"\uff0c\u5b83\u5b58\u50a8\u7740\u51fd\u6570\u7684\u5730\u5740\uff0c\u6240\u4ee5\u4ea4\u6362\u7684\u662f\u51fd\u6570\u5b9e\u73b0\u7684\u5730\u5740\u3002"),(0,s.kt)("p",null,"\u8c03\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"method_exchangeImplementations")," \u65b9\u6cd5\u65f6\uff0c\u4f1a\u6e05\u7a7a\u65b9\u6cd5\u7f13\u5b58\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='objc-runtime-new.mm'",title:"'objc-runtime-new.mm'"},"void method_exchangeImplementations(Method m1, Method m2)\n{\n    if (!m1  ||  !m2) return;\n\n    mutex_locker_t lock(runtimeLock);\n\n    IMP imp1 = m1->imp(false);\n    IMP imp2 = m2->imp(false);\n    SEL sel1 = m1->name();\n    SEL sel2 = m2->name();\n\n    m1->setImp(imp2);\n    m2->setImp(imp1);\n\n    // \u6e05\u7a7a\u65b9\u6cd5\u7f13\u5b58\n    flushCaches(nil, __func__, [sel1, sel2, imp1, imp2](Class c){\n        return c->cache.shouldFlush(sel1, imp1) || c->cache.shouldFlush(sel2, imp2);\n    });\n\n    adjustCustomFlagsForMethodChange(nil, m1);\n    adjustCustomFlagsForMethodChange(nil, m2);\n}\n")),(0,s.kt)("h2",{id:"\u6570\u7ec4\u8d8a\u754c\u5982\u4f55\u4fdd\u62a4"},"\u6570\u7ec4\u8d8a\u754c\u5982\u4f55\u4fdd\u62a4"),(0,s.kt)("p",null,"\u8bbf\u95ee\u6570\u7ec4\u5185\u5143\u7d20\u6709\u4e24\u79cd\u63a5\u53e3\uff0c\u4e00\u79cd\u662f\u4e0b\u6807\u8bbf\u95ee ",(0,s.kt)("inlineCode",{parentName:"p"},"arr[1]"),"\uff0c\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u4e86 ",(0,s.kt)("inlineCode",{parentName:"p"},"objectAtIndexedSubscript:"),"\uff1b\u4e00\u79cd\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"NSArray")," \u7684\u5b9e\u4f8b\u65b9\u6cd5 ",(0,s.kt)("inlineCode",{parentName:"p"},"objectAtIndex:"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},"NSArray *array = @[@0, @1];\narray[2]; // crash\n[array objectAtIndex:2]; // crash\n")),(0,s.kt)("p",null,"\u53ef\u4ee5\u4e3a ",(0,s.kt)("inlineCode",{parentName:"p"},"NSArray")," \u521b\u5efa\u4e00\u4e2a\u5206\u7c7b\uff1a",(0,s.kt)("inlineCode",{parentName:"p"},"NSArray+Safe.h"),"\uff0c\u6dfb\u52a0\u5b89\u5168\u7684\u7d22\u5f15\u65b9\u6cd5\uff0c\u4f46\u83b7\u53d6\u7c7b\u5bf9\u8c61\u65f6\u8981\u6ce8\u610f\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"NSArray")," \u662f\u4e00\u4e2a\u7c7b\u7c07\uff0c\u5176\u80cc\u540e\u6709\u5404\u79cd\u5177\u4f53\u5b9e\u73b0\u7684\u5b50\u7c7b\uff01"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},'#import <objc/runtime.h>\n+ (void)load {\n    // \u6ce8\u610f\uff01NSArray \u80cc\u540e\u662f\u4e00\u4e2a\u7c7b\u7c07\n    swizzleInstanceMethod(objc_getClass("__NSArrayI"), @selector(objectAtIndex:), @selector(safeObjectAtIndex:));\n    swizzleInstanceMethod(objc_getClass("__NSArrayI"), @selector(objectAtIndexedSubscript:), @selector(safeObjectAtIndexedSubscript:));\n}\n\n- (id)safeObjectAtIndex:(NSUInteger)index {\n    if (index >= self.count || index < 0) {\n        return nil;\n    } else {\n        return [self safeObjectAtIndex:index];\n    }\n}\n\n- (id)safeObjectAtIndexedSubscript:(NSUInteger)index {\n    if (index >= self.count || index < 0) {\n        return nil;\n    } else {\n        return [self safeObjectAtIndexedSubscript:index];\n    }\n}\n')),(0,s.kt)("p",null,"\u53c2\u8003\u5b9e\u73b0\uff1a",(0,s.kt)("a",{parentName:"p",href:"https://github.com/jasenhuang/NSObjectSafe"},"NSObject-Safe")),(0,s.kt)("h2",{id:"\u6d88\u606f\u53d1\u9001"},"\u6d88\u606f\u53d1\u9001"),(0,s.kt)("p",null,"\u65b9\u6cd5\u7684\u8c03\u7528\u5b9e\u9645\u4e0a\u662f\u6d88\u606f\u53d1\u9001\uff1a",(0,s.kt)("inlineCode",{parentName:"p"},"objc_msgSend(demo, @selector(test), params);"),"\u3002"),(0,s.kt)("p",null,"\u901a\u8fc7 isa \u6307\u9488\u627e\u5230\u7c7b\u5bf9\u8c61\uff0c\u91cc\u9762\u6709 ",(0,s.kt)("inlineCode",{parentName:"p"},"struct objc_method_list")," \u548c ",(0,s.kt)("inlineCode",{parentName:"p"},"struct objc_cache"),"\u3002"),(0,s.kt)("p",null,"\u6839\u636e selector \u7684\u540d\u5b57\uff0c\u5728\u7c7b\u5bf9\u8c61\u7684\u7f13\u5b58\u5217\u8868\u4e2d\u67e5\u627e\uff08\u672c\u8d28\u662f\u5b57\u7b26\u4e32\u5339\u914d\uff09\uff0c\u5982\u679c\u6ca1\u6709\u547d\u4e2d\uff0c\u5219\u5728\u65b9\u6cd5\u5217\u8868\u4e2d\u67e5\u627e\uff0c\u627e\u5230\u540e\u7f13\u5b58\u4e0b\u6765\uff0c\u5e76\u8df3\u8f6c\u5230\u65b9\u6cd5\u7684\u5b9e\u73b0\uff1b\u4e0b\u6b21\u53d1\u9001\u540c\u4e00\u6d88\u606f\u65f6\uff0c\u547d\u4e2d\u7f13\u5b58\u5217\u8868\uff0c\u76f4\u63a5\u8df3\u8f6c\u5230\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002"),(0,s.kt)("p",null,"\u5982\u679c\u5728\u65b9\u6cd5\u5217\u8868\u91cc\u6ca1\u6709\u627e\u5230\uff0c\u901a\u8fc7 ",(0,s.kt)("inlineCode",{parentName:"p"},"super_class")," \u6307\u9488\u5f80\u7236\u7c7b\u91cc\u67e5\u627e\uff0c\u4e00\u76f4\u5230 ",(0,s.kt)("inlineCode",{parentName:"p"},"NSObject")," \u90fd\u6ca1\u6709\u627e\u5230\u7684\u8bdd\uff0c\u5219\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_msgForward")," \u51fd\u6570\u6307\u9488\u4ee3\u66ff IMP\uff0c\u6700\u540e\uff0c\u6267\u884c\u8fd9\u4e2a IMP\uff08\u542f\u52a8\u6d88\u606f\u8f6c\u53d1\u673a\u5236\uff0c\u5373\u52a8\u6001\u65b9\u6cd5\u51b3\u8bae\u3001\u66ff\u8865\u63a5\u6536\u8005\u3001\u5b8c\u6574\u6d88\u606f\u8f6c\u53d1\u4e09\u6b65\u8d70\uff09\u3002"),(0,s.kt)("p",null,"\u7eaf Swift \u7c7b\uff0c\u5728\u7f16\u8bd1\u671f\u5373\u901a\u8fc7 V-Table \u786e\u5b9a\u4e86\u51fd\u6570\u7684\u8c03\u7528\uff0c\u76f4\u63a5\u4ece\u865a\u51fd\u6570\u8868\u901a\u8fc7\u7d22\u5f15\u53d6\u51fa\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740\u6765\u8c03\u7528\uff0c\u4e0d\u5177\u5907\u8fd0\u884c\u65f6\u6d88\u606f\u8f6c\u53d1\u673a\u5236\u3002"),(0,s.kt)("p",null,"\u5728 OC \u4e2d\uff0c\u5bf9\u65b9\u6cd5\u7684\u8c03\u7528\u90fd\u4f1a\u88ab\u8f6c\u6362\u6210 ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_msgSend")," \u65b9\u6cd5\u7684\u8c03\u7528\u3002\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},'// 1\u3001\u521b\u5efa\u5bf9\u8c61\n// \u7ed9 MessageSendTest \u7c7b\u53d1\u9001\u6d88\u606f\uff0c\u521b\u5efa\u5bf9\u8c61\n// \u7b49\u540c\u4e8e\uff1aMessageSendTest *test = [MessageSendTest alloc];\nMessageSendTest *test = ((MessageSendTest * (*)(id,SEL)) objc_msgSend)((id) [MessageSendTest class], @selector(alloc));\n\n// 2\u3001\u521d\u59cb\u5316\u5bf9\u8c61\n// \u7ed9 test \u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u8fdb\u884c\u521d\u59cb\u5316\n// \u7b49\u540c\u4e8e\uff1a[test init];\ntest = ((MessageSendTest *(*)(id,SEL))objc_msgSend)((id) test, @selector(init));\n\n// 3\u3001\u8c03\u7528\u65e0\u53c2\u65e0\u8fd4\u56de\u503c\u65b9\u6cd5\n// \u7b49\u540c\u4e8e\n((void(*)(id, SEL))objc_msgSend)((id) test, @selector(noArgumentsAndNoReturnValue));\n\n// 4\u3001\u8c03\u7528\u5e26\u4e00\u4e2a\u53c2\u6570\u4f46\u65e0\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\n((void(*)(id, SEL, NSString *))objc_msgSend)((id) test, @selector(hasArguments:), @"\u53c2\u6570");\n\n// 5\u3001\u8c03\u7528\u5e26\u53c2\u6570\u5e26\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\u3002\nint result = ((int *(id, SEL, NSString *, int))objc_msgSend)((id) test, @selector(hasArguments:andReturnValue:), @"\u53c2\u6570", 1024);\n')),(0,s.kt)("p",null,"Selector\u3001Method\u3001IMP \u7684\u5173\u7cfb\uff1a\u5728 Runtime \u4e2d\uff0c\u7c7b\u5bf9\u8c61\u548c MetaClass \u90fd\u6709\u65b9\u6cd5\u5217\u8868\uff0c\u65b9\u6cd5\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u4e00\u4e2a Method\uff0c\u5b83\u7684\u540d\u79f0\u5c31\u662f Selector\uff0c\u5bf9\u5e94\u7740\u4e00\u4e2a\u65b9\u6cd5\u5b9e\u73b0\uff08IMP\uff09\u3002\u65b9\u6cd5\u4ea4\u6362\u5c31\u662f\u5c06 SEL \u548c IMP \u539f\u672c\u7684\u5bf9\u5e94\u65ad\u5f00\uff0c\u5e76\u751f\u6210\u65b0\u7684\u5bf9\u5e94\u5173\u7cfb\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n\n/// A pointer to the function of a method implementation.\n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ );\n#else\ntypedef id (*IMP)(id, SEL, ...);\n#endif\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n\nstruct objc_method {\n    SEL method_name;\n    char *method_types;\n    IMP method_imp;\n}\n")),(0,s.kt)("h2",{id:"weak-\u7684\u5b9e\u73b0\u63a2\u7d22"},"Weak \u7684\u5b9e\u73b0\u63a2\u7d22"),(0,s.kt)("p",null,"\u521d\u59cb\u5316\u4e00\u4e2a weak \u6307\u9488\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},"// (The nil case)\n__weak id weakPtr;\n// (The non-nil case)\n NSObject *o = ...;\n__weak id weakPtr = o;\n")),(0,s.kt)("p",null,"\u6211\u4eec\u901a\u8fc7\u67e5\u770b\u6c47\u7f16\u53d1\u73b0\u521d\u59cb\u5316 weak \u6307\u9488\u5e95\u5c42\u8c03\u7528\u7684\u662f ",(0,s.kt)("inlineCode",{parentName:"p"},"objc_initWeak"),"\uff0c\u6253\u5f00 Runtime \u6e90\u7801\uff0c\u627e\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n * @param location Address of __weak ptr.\n * @param newObj Object ptr.\n */\nid objc_initWeak(id *location, id newObj)\n{\n    if (!newObj) {\n        *location = nil;\n        return nil;\n    }\n\n    return storeWeak<false/*old*/, true/*new*/, true/*crash*/>\n        (location, (objc_object*)newObj);\n}\n\ntemplate <bool HaveOld, bool HaveNew, bool CrashIfDeallocating>\nstatic id storeWeak(id *location, objc_object *newObj)\n{\n    // ..\n    SideTable *oldTable; // \u65e7\u5bf9\u8c61\u6240\u5728\u7684 SideTable\n    SideTable *newTable; // \u65b0\u5bf9\u8c61\u6240\u5728\u7684 SideTable\n\n retry:\n    if (HaveOld) {\n        oldObj = *location;\n        // SideTables \u662f\u4e00\u4e2a\u5168\u5c40\u7684 StripedMap\uff0c\u662f\u4e00\u4e2a\u56fa\u5b9a\u5bb9\u91cf\u4e3a 64 \u7684\u6570\u7ec4\u3002\n        oldTable = &SideTables()[oldObj];\n    } else {\n        oldTable = nil;\n    }\n    if (HaveNew) {\n        // SideTables \u662f\u4e00\u4e2a\u5168\u5c40\u7684 StripedMap\uff0c\u662f\u4e00\u4e2a\u56fa\u5b9a\u5bb9\u91cf\u4e3a 64 \u7684\u6570\u7ec4\u3002\n        newTable = &SideTables()[newObj];\n    } else {\n        newTable = nil;\n    }\n\n    if (HaveNew) {\n        /**\n        * Registers a new (object, weak pointer) pair. Creates a new weak\n        * object entry if it does not exist.\n        *\n        * @param weak_table The global weak table.\n        * @param referent The object pointed to by the weak reference.\n        * @param referrer The weak pointer address.\n        */\n        newObj = (objc_object *)weak_register_no_lock(&newTable->weak_table,\n                                                      (id)newObj, location,\n                                                      CrashIfDeallocating);\n\n        // Set is-weakly-referenced bit in refcount table.\n        if (newObj  &&  !newObj->isTaggedPointer()) {\n            newObj->setWeaklyReferenced_nolock();\n        }\n\n        // weak \u6307\u9488\u6307\u5411\u5f31\u5f15\u7528\u7684\u5bf9\u8c61\n        *location = (id)newObj;\n    }\n    else {\n        // No new value. The storage is not changed.\n    }\n\n    return (id)newObj;\n}\n")),(0,s.kt)("p",null,"SideTable \u7528\u4e8e\u7ba1\u7406\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u548c\u5f31\u5f15\u7528\uff0c\u662f\u4e00\u4e2a\u56fa\u5b9a\u5bb9\u91cf\u4e3a 64 \u7684\u6570\u7ec4\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"static StripedMap<SideTable>& SideTables() {\n    return *reinterpret_cast<StripedMap<SideTable>*>(SideTableBuf);\n}\n")),(0,s.kt)("p",null,"\u4f20\u5165\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6839\u636e\u5176\u5185\u5b58\u5730\u5740\u5bf9\u5e94\u5230\u5177\u4f53\u7684\u4e00\u4e2a SideTable \u4e0a\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"struct SideTable {\n    spinlock_t slock; // \u81ea\u65cb\u9501\uff0c\u7528\u4e8e\u4fdd\u62a4 SideTable \u7684\u5e76\u53d1\u8bbf\u95ee\n    RefcountMap refcnts; // \u5f15\u7528\u8ba1\u6570\u8868\n    weak_table_t weak_table; // \u5f31\u5f15\u7528\u8868\n    // ...\n};\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"image",src:n(95694).Z,width:"2463",height:"753"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * The global weak references table. Stores object ids as keys,\n * and weak_entry_t structs as their values.\n */\nstruct weak_table_t {\n    weak_entry_t *weak_entries;\n    size_t    num_entries;\n    uintptr_t mask;\n    uintptr_t max_hash_displacement;\n};\n\n/**\n * The internal structure stored in the weak references table.\n * It maintains and stores\n * a hash set of weak references pointing to an object.\n * If out_of_line==0, the set is instead a small inline array.\n */\n#define WEAK_INLINE_COUNT 4\nstruct weak_entry_t {\n    // The object pointed to by the weak reference.\n    DisguisedPtr<objc_object> referent;\n    union {\n        struct {\n            /// The address of a __weak object reference\n            /// typedef objc_object ** weak_referrer_t;\n            weak_referrer_t *referrers;\n            uintptr_t        out_of_line : 1;\n            uintptr_t        num_refs : PTR_MINUS_1;\n            uintptr_t        mask;\n            uintptr_t        max_hash_displacement;\n        };\n        struct {\n            // out_of_line=0 is LSB(Least Significant Bit) of one of these (don't care which)\n            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];\n        };\n    };\n};\n")),(0,s.kt)("p",null,"\u8bfb\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u7ec8\u4e8e\u53d1\u73b0\uff0cRuntime \u7ef4\u62a4\u7684 SideTable \u5b58\u653e\u7740\u5168\u5c40\u7684\u5f15\u7528\u8ba1\u6570\u8868\u548c\u5f31\u5f15\u7528\u8868\uff0c\u5f31\u5f15\u7528\u8868\u4e5f\u662f\u4e00\u4e2a\u54c8\u5e0c\u8868\u7684\u7ed3\u6784\uff0c\u5b83\u6839\u636e\u6240\u6307\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u6620\u5c04\u5230\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u5b58\u653e\u7684\u662f weak \u6307\u9488\u7684\u5730\u5740\u3002"),(0,s.kt)("p",null,"\u5f80\u5168\u5c40 weak \u5f15\u7528\u8868\u91cc\u63d2\u5165\u65b0\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"weak_entry_t")," \u7684\u64cd\u4f5c\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"static void weak_entry_insert(weak_table_t *weak_table, weak_entry_t *new_entry)\n{\n    weak_entry_t *weak_entries = weak_table->weak_entries;\n    assert(weak_entries != nil);\n\n    size_t index = hash_pointer(new_entry->referent) & (weak_table->mask);\n    size_t hash_displacement = 0;\n    while (weak_entries[index].referent != nil) {\n        index = (index+1) & weak_table->mask;\n        hash_displacement++;\n    }\n\n    weak_entries[index] = *new_entry;\n    weak_table->num_entries++;\n\n    if (hash_displacement > weak_table->max_hash_displacement) {\n        weak_table->max_hash_displacement = hash_displacement;\n    }\n}\n")),(0,s.kt)("p",null,"\u5f53\u5bf9\u8c61\u4e0d\u518d\u88ab\u5f3a\u5f15\u7528\u3001\u9700\u8981\u9500\u6bc1\u65f6\uff0c\u901a\u8fc7 weak \u5f15\u7528\u8868\u627e\u5230\u6240\u6709\u7684\u5f31\u5f15\u7528\u6307\u9488\uff0c\u7f6e\u4e3a\u7a7a\u3002"),(0,s.kt)("h2",{id:"class_rw_ext_t"},"class_rw_ext_t"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://developer.apple.com/videos/play/wwdc2020/10163"},"WWDC 2020 - Advancements in the Objective-C runtime"))),(0,s.kt)("p",null,"Class object has a pointer to more data where additional information is stored, called the ",(0,s.kt)("inlineCode",{parentName:"p"},"class_ro_t"),"."),(0,s.kt)("p",null,"Swift classes and Objective-C classes share this infrastructure, so each Swift class has these data structures as well."),(0,s.kt)("p",null,"Clean memory is memory that isn\u2019t changed once it\u2019s loaded. The ",(0,s.kt)("inlineCode",{parentName:"p"},"class_ro_t")," is clean because it\u2019s read-only. Dirty memory is memory that\u2019s changed while the process is running. The class structure is dirtied once the class gets used because the runtime writes new data into it. For example, it creates a fresh method cache and points to it from the class."),(0,s.kt)("p",null,"When a class first gets used, the runtime allocates additional storage for it, the ",(0,s.kt)("inlineCode",{parentName:"p"},"class_rw_t"),", for read/write data. In this data structure, we store new information only generated at runtime."),(0,s.kt)("p",null,"Dirty memory is much more expensive than clean memory, and, is the reason why class data is split into two pieces. The more data that can be kept clean, the better. By separating out data that never changes, that allows for most of the class data to be kept as clean memory."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(89824).Z,width:"1580",height:"522"})),(0,s.kt)("p",null,"Why do we have methods and properties here when they're in the read-only data too? Because they can be changed at runtime. When a category is loaded, it can add new methods to the class, and the programmer can add them dynamically using runtime APIs. Since the ",(0,s.kt)("inlineCode",{parentName:"p"},"class_ro_t")," is read-only, we need to track these things in the ",(0,s.kt)("inlineCode",{parentName:"p"},"class_rw_t"),"."),(0,s.kt)("p",null,"There are a lot of classes in use in any given device. We measured about 30 megabytes of these ",(0,s.kt)("inlineCode",{parentName:"p"},"class_rw_t")," structures across the system on an iPhone. Examining usage on real devices, we found that only around 10% of classes ever actually have their methods changed at runtime. So, we can split off the parts that aren't usually used to ",(0,s.kt)("inlineCode",{parentName:"p"},"class_rw_ext_t"),", and this cuts the size of the ",(0,s.kt)("inlineCode",{parentName:"p"},"class_rw_t")," in half. That saves around 14 megabytes system wide."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(99031).Z,width:"1666",height:"812"})),(0,s.kt)("p",null,"To see the impact of this change, you can run ",(0,s.kt)("inlineCode",{parentName:"p"},"heap")," commands in the terminal. It lets you inspect the heap memory in use by a running process."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"> heap Mail | egrep 'class_rw|COUNT'")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-log"},"COUNT      BYTES       AVG   CLASS_NAME                                        TYPE    BINARY\n 6882     220224      32.0   Class.data (class_rw_t)                           C       libobjc.A.dylib\n  643      30864      48.0   Class.data.extended (class_rw_ext_t)              C       libobjc.A.dylib\n")),(0,s.kt)("p",null,"We can see that we're using 6882 of these ",(0,s.kt)("inlineCode",{parentName:"p"},"class_rw_t")," types in the Mail app, but only about a tenth of them actually needed this extended information."),(0,s.kt)("h2",{id:"method-list"},"Method List"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://developer.apple.com/videos/play/wwdc2020/10163?time=476"},"WWDC 2020 - Advancements in the Objective-C runtime"))),(0,s.kt)("p",null,"Every class has a list of methods attached to it. The runtime uses these lists to resolve message sends. Each method contains three pieces of information:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"First is the method's name or selector. Selectors are strings, but they're unique so they can be compared using pointer equality."),(0,s.kt)("li",{parentName:"ul"},"Next is the method's type encoding. This is a string that represents the parameter and return types, and it isn't used for sending messages, but it's needed for things like runtime introspection and message forwarding."),(0,s.kt)("li",{parentName:"ul"},"Finally, there's a pointer to the method's implementation. When you write a method, it gets compiled into a C function with your implementation in it, and then the entry in the method list points to that function.")),(0,s.kt)("p",null,"Each piece of data in the method list is a pointer. On our 64-bit systems, that means that each method table entry occupies 24 bytes. Now note that a class method entry from a binary only ever points to method implementations within that binary. There's no way to make a method that has its metadata in one binary and the code implementing it in another. That means that method list entries don't actually need to be able to refer to the entire 64-bit address space. So, instead of an absolute 64-bit address, they can use a 32-bit (that is 4 bytes) relative offset within the binary. And that's a change that we've made this year (2020)."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img-40",src:n(74370).Z,width:"766",height:"746"})),(0,s.kt)("p",null,"Now, because the offsets are always the same no matter where the image is loaded into memory, they don't have to be fixed up after they're loaded from disk. And, of course, 32-bit offsets mean that we've halved the amount of memory needed on 64-bit platforms. We've measured about 80MB of these methods system wide on a typical iPhone. Since they're half the size, we save 40 megabytes."),(0,s.kt)("p",null,"But what about swizzling? The method lists in a binary can't now refer to the full address space, but if you swizzle a method, that can be implemented anywhere. To handle this, we also have a global table mapping methods to their swizzled implementations. Swizzling is rare. The vast majority of methods never actually get swizzled, so this table doesn't end up getting very big. Even better, the table is compact. Memory is dirtied a page at a time. With the old style of method lists, swizzling a method would dirty the entire page it was on, resulting in many kilobytes of dirty memory for a single swizzle. With the table, we just pay the cost for an extra table entry."),(0,s.kt)("h2",{id:"tagged-pointer"},"Tagged Pointer"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://developer.apple.com/videos/play/wwdc2020/10163?time=476"},"WWDC 2020 - Advancements in the Objective-C runtime"))),(0,s.kt)("p",null,"A normal object pointer have 64 bits, however, we don't really use all of these bits. The low bits are always zero because of ",(0,s.kt)("strong",{parentName:"p"},"alignment")," requirements. Objects must always be located at an address that's a multiple of the pointer size. The high bits are always zero because the address space is limited. We don't actually go all the way up to 2^64. These high and low bits are always zero."),(0,s.kt)("p",null,"So, let's pick one of these bits that's always zero and make it a one. That can immediately tell us that this is not a real object pointer, and then we can assign some other meaning to all of the other bits. We call this a tagged pointer."),(0,s.kt)("p",null,"And another 3 bits indicates the type of the tagged pointer. For example, ",(0,s.kt)("inlineCode",{parentName:"p"},"NSNumber"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"NSDate"),". There's a special case for tag seven which indicates an extended tag. An extended tag uses another eight bits to encode the type, allowing for 256 more tag types at the cost of a smaller payload. This allows us to use tagged pointers for more types like ",(0,s.kt)("inlineCode",{parentName:"p"},"UIColor"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"NSIndexSet"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:n(11042).Z,width:"1840",height:"586"})),(0,s.kt)("p",null,"\u5728 2013 \u5e74\u7684 WWDC\uff0cApple \u63a8\u51fa\u4e86\u9996\u4e2a 64 \u4f4d\u67b6\u6784\u7684\u53cc\u6838\u5904\u7406\u5668\uff0c\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u548c\u63d0\u9ad8\u6267\u884c\u6548\u7387\uff0c\u82f9\u679c\u5f15\u5165\u4e86 Tagged Pointer\u3002\u5b83\u4e13\u95e8\u7528\u6765\u5b58\u50a8\u5360\u7528\u5185\u5b58\u5f88\u5c0f\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982 ",(0,s.kt)("inlineCode",{parentName:"p"},"NSNumber"),"\u3002Tagged Pointer \u4e0d\u6307\u5411\u4efb\u4f55\u4e00\u4e2a\u5730\u5740\uff0c\u5728\u5185\u5b58\u8bfb\u5199\u4e0a\u6709\u66f4\u9ad8\u7684\u6548\u7387\uff1b\u5b83\u5e76\u4e0d\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u4e5f\u4e0d\u9700\u8981 ",(0,s.kt)("inlineCode",{parentName:"p"},"malloc")," \u548c ",(0,s.kt)("inlineCode",{parentName:"p"},"free"),"\uff0c\u8282\u7701\u4e86\u5185\u5b58\u7a7a\u95f4\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-objc"},'#import <malloc/malloc.h>\n#import <objc/runtime.h>\n\nNSNumber *num = [NSNumber numberWithInt:100];\nNSLog(@"%zd", malloc_size((__bridge const void *)num)); // 0\nNSLog(@"%zd", class_getInstanceSize([NSNumber class])); // 8\n')))}d.isMDXComponent=!0},99031:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/368377dc-5805-4d9a-afd0-98b115d62cb5-55acae0f3b901a6934e90e0611c89cc6.png"},89824:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/5d98cf52-0b86-4f89-8259-d470120a81d7-806d844e6546e3c419091ea1b9fe603d.png"},74370:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/b8d5cde5-c77b-4a6a-9e30-8cc1361b1f04-f0bdc5f33fb51a97b269849c7d8f1064.png"},11042:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/c85cd5f2-5c44-4c37-bb96-844bf53a5735-bc8a8afbd81260adf942d056c3a3ab65.png"},95694:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/\u672a\u547d\u540d\u7ed8\u56fe-96534dd08fa465e4dd7dacca27df76a3.jpg"},86791:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2DE91D99-298C-4602-BE8A-179CF685C3DA-276251cffe4961ac8d1f44724e53cdab.png"},25379:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/44482986-12F8-4C4F-910D-073D47E4E3F9-74b1344b708277e0d8d8fb97e1e7f02b.png"},34741:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/530905B9-3C3A-4B69-AADC-A40308661394-ae70a47d7016cecc44602e102b398a02.png"},52114:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/564526B2-C25E-4137-8724-19411F8C4AA5-6839b6f4e4f8869af96180a603e32365.png"},9285:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/A4B3E68E-174E-4B48-AF34-6A09650016FC-c75b8de81d04e2d8c81a8d5f3065200b.png"}}]);