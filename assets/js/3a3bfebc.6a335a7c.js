"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8501],{43536:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var s=t(87462),i=(t(67294),t(3905));t(61839);const l={},r="\u5b57\u7b26\u4e32",a={unversionedId:"leetcode/leetcode5",id:"leetcode/leetcode5",title:"\u5b57\u7b26\u4e32",description:"\u56de\u6587",source:"@site/docs/dev/leetcode/leetcode5.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode5",permalink:"/docs/dev/leetcode/leetcode5",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6392\u5e8f\u3001\u67e5\u627e",permalink:"/docs/dev/leetcode/leetcode4"},next:{title:"\u8bbe\u8ba1\u9898",permalink:"/docs/dev/leetcode/leetcode6"}},o={},p=[{value:"\u56de\u6587",id:"\u56de\u6587",level:2},{value:"125-\u9a8c\u8bc1\u56de\u6587\u4e32\uff08\u53cc\u6307\u9488\u6216\u53cc\u5411\u961f\u5217\uff09",id:"125-\u9a8c\u8bc1\u56de\u6587\u4e32\u53cc\u6307\u9488\u6216\u53cc\u5411\u961f\u5217",level:3},{value:"5-\u6700\u957f\u56de\u6587\u5b50\u4e32\uff08\u4e2d\u5fc3\u6269\u6563\u6cd5\uff09",id:"5-\u6700\u957f\u56de\u6587\u5b50\u4e32\u4e2d\u5fc3\u6269\u6563\u6cd5",level:3},{value:"647-\u56de\u6587\u5b50\u4e32\uff08\u4e2d\u5fc3\u6269\u6563\u6cd5\uff09",id:"647-\u56de\u6587\u5b50\u4e32\u4e2d\u5fc3\u6269\u6563\u6cd5",level:3},{value:"516-\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\uff08\u52a8\u6001\u89c4\u5212\uff09",id:"516-\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u52a8\u6001\u89c4\u5212",level:3},{value:"\u5b50\u4e32\u95ee\u9898\uff08\u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\uff09",id:"\u5b50\u4e32\u95ee\u9898\u6ed1\u52a8\u7a97\u53e3--\u54c8\u5e0c\u8868",level:2},{value:"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",id:"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",level:3},{value:"76-\u5305\u542b\u4e86\u6307\u5b9a\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32",id:"76-\u5305\u542b\u4e86\u6307\u5b9a\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32",level:3},{value:"\u5b57\u7b26\u4e32\u5904\u7406",id:"\u5b57\u7b26\u4e32\u5904\u7406",level:2},{value:"14-\u6700\u957f\u516c\u5171\u524d\u7f00",id:"14-\u6700\u957f\u516c\u5171\u524d\u7f00",level:3},{value:"20-\u62ec\u53f7\u5339\u914d",id:"20-\u62ec\u53f7\u5339\u914d",level:3},{value:"242-\u5b57\u6bcd\u5f02\u4f4d\u8bcd",id:"242-\u5b57\u6bcd\u5f02\u4f4d\u8bcd",level:3},{value:"151-\u6309\u5355\u8bcd\u7ffb\u8f6c\u5b57\u7b26\u4e32",id:"151-\u6309\u5355\u8bcd\u7ffb\u8f6c\u5b57\u7b26\u4e32",level:3},{value:"557-\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd III",id:"557-\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd-iii",level:3}],c={toc:p};function u(n){let{components:e,...l}=n;return(0,i.kt)("wrapper",(0,s.Z)({},c,l,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5b57\u7b26\u4e32"},"\u5b57\u7b26\u4e32"),(0,i.kt)("h2",{id:"\u56de\u6587"},"\u56de\u6587"),(0,i.kt)("p",null,"\u56de\u6587\u662f\u6b63\u7740\u8bfb\u3001\u53cd\u7740\u8bfb\u90fd\u4e00\u6837\u7684\u5b57\u7b26\u4e32\u3002"),(0,i.kt)("h3",{id:"125-\u9a8c\u8bc1\u56de\u6587\u4e32\u53cc\u6307\u9488\u6216\u53cc\u5411\u961f\u5217"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-palindrome/"},"125-\u9a8c\u8bc1\u56de\u6587\u4e32"),"\uff08\u53cc\u6307\u9488\u6216\u53cc\u5411\u961f\u5217\uff09"),(0,i.kt)("p",null,"\u53cc\u6307\u9488\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isPalindrome(string s) {\n        int n = s.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            while (i < j && !isalnum(s[i])) ++i;\n            while (i < j && !isalnum(s[j])) --j;\n            if (tolower(s[i]) != tolower(s[j])) return false;\n            ++i;\n            --j;\n        }\n        return true;\n    }\n};\n")),(0,i.kt)("p",null,"\u53cc\u5411\u961f\u5217\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isPalindrome(string s) {\n        int N = s.size();\n        deque<char> dq;\n        for (const char &c : s) {\n            if (isalnum(c)) {\n                dq.push_back(tolower(c));\n            }\n        }\n        while (dq.size() >= 2) {\n            if (dq.front() != dq.back())\n                return false;\n            dq.pop_front();\n            dq.pop_back();\n        }\n        return true;\n    }\n};\n")),(0,i.kt)("h3",{id:"5-\u6700\u957f\u56de\u6587\u5b50\u4e32\u4e2d\u5fc3\u6269\u6563\u6cd5"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-palindromic-substring/"},"5-\u6700\u957f\u56de\u6587\u5b50\u4e32"),"\uff08\u4e2d\u5fc3\u6269\u6563\u6cd5\uff09"),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u56de\u6587\u5b50\u4e32\u95ee\u9898\uff0c\u4e2d\u5fc3\u6269\u6563\u6cd5\u662f\u66f4\u4f18\u7684\u89e3\u6cd5\u3002\u957f\u5ea6\u4e3a N \u7684\u5b57\u7b26\u4e32 s","[0...n-1]"," \u4e00\u5171\u6709 2N-1 \u4e2a\u4e2d\u5fc3\u6269\u6563\u70b9\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void expand(const string &s, int i, int j) {\n        if (i > j) return;\n        while (i >= 0 && j < s.size() && s[i] == s[j]) {\n            --i;\n            ++j;\n        }\n        ++i;\n        --j;\n        if (hi - lo < j - i) {\n            lo = i;\n            hi = j;\n        }\n    }\n    string longestPalindrome(const string &s) {\n        for (int i = 0; i < s.size(); ++i) {\n            expand(s, i, i);\n            expand(s, i, i + 1);\n        }\n        return s.substr(lo, hi - lo + 1);\n    }\nprivate:\n    int lo = 0;\n    int hi = 0;\n};\n")),(0,i.kt)("h3",{id:"647-\u56de\u6587\u5b50\u4e32\u4e2d\u5fc3\u6269\u6563\u6cd5"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/palindromic-substrings/"},"647-\u56de\u6587\u5b50\u4e32"),"\uff08\u4e2d\u5fc3\u6269\u6563\u6cd5\uff09"),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u56de\u6587\u5b50\u4e32\u95ee\u9898\uff0c\u4e2d\u5fc3\u6269\u6563\u6cd5\u662f\u66f4\u4f18\u7684\u89e3\u6cd5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void expand(const string &s, int i, int j) {\n        if (i > j) return;\n        while (i >= 0 && j < s.size() && s[i] == s[j]) {\n            ++res;\n            --i;\n            ++j;\n        }\n    }\n    int countSubstrings(const string &s) {\n        for (int i = 0; i < s.size(); ++i) {\n            expand(s, i, i);\n            expand(s, i, i + 1);\n        }\n        return res;\n    }\nprivate:\n    int res = 0;\n};\n")),(0,i.kt)("h3",{id:"516-\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u52a8\u6001\u89c4\u5212"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-palindromic-subsequence/"},"516-\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217"),"\uff08\u52a8\u6001\u89c4\u5212\uff09"),(0,i.kt)("p",null,"\u56de\u6587\u95ee\u9898\u8981\u6293\u4f4f\u4e00\u4e2a\u57fa\u672c\u7279\u5f81\uff0c\u5c31\u662f\u4e2d\u95f4\u5411\u4e24\u8fb9\u6269\u6563\u3002\u5047\u8bbe\u6709\u5b57\u7b26\u4e32 s\uff0c\u6211\u4eec\u5982\u679c\u5df2\u77e5 s","[i...j]"," \u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5f53 i\u3001j \u5206\u522b\u5411\u5de6\u53f3\u6269\u6563\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528 dp","[i][j]"," \u7684\u7ed3\u679c\u8fdb\u884c\u6269\u5c55\uff0c\u56e0\u6b64\u672c\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u3002"),(0,i.kt)("p",null,'\u5047\u8bbe\u5b57\u7b26\u4e32\u4e3a "abcbd"\uff0c\u957f\u5ea6\u4e3a 5\uff0c\u6211\u4eec\u753b\u4e00\u4e2a 5x5 \u7684\u8868\u683c\uff0cdp',"[i][j]"," \u8868\u793a s","[i...j]"," \u4e2d\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5f88\u663e\u7136\uff0c\u8fd9\u4e2a\u8868\u683c\u53ea\u6709\u5f53\u5217\u6570 > \u884c\u6570\u65f6\u624d\u6709\u610f\u4e49\u3002"),(0,i.kt)("p",null,"\u4e00\u3001\u6700\u4f18\u5b50\u7ed3\u6784\uff1adp","[i][j]"," \u8868\u793a s","[i...j]"," \u4e2d\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002"),(0,i.kt)("p",null,"\u4e8c\u3001\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c i == j\uff0cdp","[i][j]"," = 1"),(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c s","[i]"," == s","[j]","\uff0c\u5219 dp","[i][j]"," = dp","[i+1][j-1]"," + 2")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:t(87477).Z,width:"1666",height:"452"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c s","[i]"," != s","[j]","\uff0cdp","[i][j]"," = max(dp","[i+1][j]",", dp","[i][j-1]",")")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:t(25171).Z,width:"1694",height:"468"})),(0,i.kt)("p",null,"dp","[0][n-1]"," \u8868\u793a s","[0..<n]"," \u4e2d\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u957f\u5ea6\uff0c\u56e0\u6b64\u9898\u89e3\u5728\u8868\u683c\u7684\u53f3\u4e0a\u65b9\uff0c\u904d\u5386\u65b9\u5411\u662f\u4ece\u4e0b\u81f3\u4e0a\u3001\u4ece\u5de6\u81f3\u53f3\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int longestPalindromeSubseq(const string &s) {\n        int n = s.size();\n        vector<vector<int>> dp(n, vector<int>(n));\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i; j < n; ++j) {\n                if (i == j) {\n                    dp[i][j] = 1;\n                } else if (s[i] == s[j]) {\n                    dp[i][j] = dp[i+1][j-1] + 2;\n                } else {\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[0][n-1];\n    }\n};\n")),(0,i.kt)("h2",{id:"\u5b50\u4e32\u95ee\u9898\u6ed1\u52a8\u7a97\u53e3--\u54c8\u5e0c\u8868"},"\u5b50\u4e32\u95ee\u9898\uff08\u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\uff09"),(0,i.kt)("h3",{id:"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/"},"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32")),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002"),(0,i.kt)("p",null,"\u5b50\u4e32\u95ee\u9898\u7684\u7279\u5f81\u662f\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u7b26\u5408\u67d0\u79cd\u6761\u4ef6\u7684\u5b50\u4e32\u3002\u901a\u7528\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u6ed1\u52a8\u7a97\u53e3 + \u54c8\u5e0c\u8868\u3002"),(0,i.kt)("p",null,"\u9700\u8981\u4e00\u4e2a\u54c8\u5e0c\u8868\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:t(91319).Z,width:"699",height:"482"})),(0,i.kt)("p",null,"i \u53ea\u80fd\u53f3\u79fb\uff0c\u4e0d\u80fd\u5de6\u79fb\uff0c\u5f53\u53d1\u73b0\u4e86\u91cd\u590d\u5b57\u7b26\uff0ci = max(i, \u91cd\u590d\u5b57\u7b26\u7684\u4f4d\u7f6e + 1)\uff0c\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5de6\u79fb\u7684\u8bdd\uff0c\u521a\u624d\u5df2\u7ecf\u6392\u9664\u6389\u7684\u5176\u5b83\u91cd\u590d\u5b57\u7b26\u53c8\u4f1a\u5305\u62ec\u8fdb\u6765\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int lengthOfLongestSubstring(const string &s) {\n        int i = 0;\n        int j = 0;\n        int res = 0;\n        unordered_map<char, int> um;\n        while (j < s.size()) {\n            if (um.find(s[j]) != um.end()) {\n                i = max(i, um[s[j]] + 1); // \u4f7f i...j \u4e0d\u5305\u62ec\u91cd\u590d\u5b57\u7b26\n            }\n            um[s[j]] = j;\n            res = max(res, j - i + 1);\n            ++j;\n        }\n        return res;\n    }\n};\n")),(0,i.kt)("h3",{id:"76-\u5305\u542b\u4e86\u6307\u5b9a\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/minimum-window-substring/"},"76-\u5305\u542b\u4e86\u6307\u5b9a\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32")),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u5176\u4e2d\u5305\u542b\u4e86\u6307\u5b9a\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u6ce8\u610f\uff1a\u5982\u679c s \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7b54\u6848\u3002"),(0,i.kt)("p",null,"\u6b65\u9aa4\u4e00\uff1a\u4e0d\u65ad\u589e\u52a0 j \u4f7f\u6ed1\u52a8\u7a97\u53e3\u589e\u5927\uff0c\u76f4\u5230\u7a97\u53e3\u5305\u542b\u4e86 t \u4e2d\u6240\u6709\u5b57\u7b26\u3002"),(0,i.kt)("p",null,"\u6b65\u9aa4\u4e8c\uff1a\u4e0d\u65ad\u589e\u52a0 i \u4f7f\u6ed1\u52a8\u7a97\u53e3\u7f29\u5c0f\uff0c\u5c06\u4e0d\u5fc5\u8981\u7684\u5143\u7d20\u6392\u9664\u5728\u5916\uff0c\u76f4\u5230\u78b0\u5230\u4e00\u4e2a\u5fc5\u987b\u5305\u542b\u7684\u5143\u7d20\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e0d\u80fd\u518d\u6254\u4e86\uff0c\u518d\u6254\u5c31\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\uff0c\u4fdd\u5b58\u6b64\u65f6\u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e\u3002"),(0,i.kt)("p",null,"\u6b65\u9aa4\u4e09\uff1a\u8ba9 j \u7ee7\u7eed\u589e\u52a0\uff0c\u76f4\u5230\u78b0\u5230 s","[j]"," == s","[i]","\uff0c\u6b64\u65f6 s","[i]"," \u627e\u5230\u4e86\u201c\u63a5\u73ed\u4eba\u201d\uff0c\u53ef\u4ee5\u88ab\u6392\u9664\u5728\u5916\u4e86\uff0ci \u7ee7\u7eed\u589e\u52a0\u3002"),(0,i.kt)("p",null,"\u9700\u8981\u4e00\u4e2a\u54c8\u5e0c\u8868\u8bb0\u5f55\u6307\u5b9a\u7684\u6bcf\u4e2a\u5b57\u7b26\u53ca\u5176\u51fa\u73b0\u6b21\u6570\u3002\u8ba1\u6570\u4e3a\u6b63\u7684\u8868\u793a\u4ecd\u7136\u9700\u8981\u7684\u5143\u7d20\u6570\u91cf\uff0c\u8ba1\u6570\u4e3a\u8d1f\u7684\u8868\u793a\u591a\u4f59\u7684\u5143\u7d20\u6570\u91cf\u3001\u8ba1\u6570\u4e3a 0 \u8868\u793a\u521a\u521a\u597d\u3002"),(0,i.kt)("p",null,"\u4f8b\u5982 need \u7b49\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"{'A':-2,'B':0,'C':1}")," \u65f6\uff0cA \u591a\u4f59 2 \u4e2a\uff0cB \u6b63\u597d\uff0cC \u8fd8\u7f3a 1 \u4e2a\u3002"),(0,i.kt)("p",null,"python3\uff1aCounter \u662f dict \u7684\u5b50\u7c7b\uff0c\u7528\u4e8e\u8ba1\u6570\u53ef\u54c8\u5e0c\u5bf9\u8c61\u3002Counter \u5bf9\u8c61\u6709\u4e00\u4e2a\u5b57\u5178\u63a5\u53e3\uff0c\u5982\u679c\u5f15\u7528\u7684\u952e\u6ca1\u6709\u4efb\u4f55\u8bb0\u5f55\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a 0\uff0c\u800c\u4e0d\u662f\u5f39\u51fa\u4e00\u4e2a KeyError\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string minWindow(const string &s, const string &t) {\n        unordered_map<char, int> um;\n        for (const char &c : t) {\n            ++um[c];\n        }\n        int found = 0;\n        int N = s.size();\n        int lo = 0;\n        int hi = N;\n        int i = 0;\n        int j = 0;\n        while (j < N) {\n            if (um[s[j]] > 0) {\n                ++found;\n            }\n            --um[s[j]];\n            if (found == t.size() && (hi == N || s[j] == s[i])) {\n                // \u627e\u5230 t \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e86\uff0c\u4f46\u6b64\u65f6\u53ef\u80fd\u6709\u5f88\u591a\u5176\u5b83\u5b57\u7b26\u5305\u62ec\u4e86\u8fdb\u6765\n                // \u591a\u4f59\u7684\u5b57\u7b26\uff0c\u5728\u5b57\u5178\u4e2d\u7684\u8ba1\u6570\u4e3a\u8d1f\u6570\n                while (i < j) {\n                    if (um[s[i]] == 0) break;\n                    ++um[s[i]];\n                    ++i;\n                }\n                if (j - i < hi - lo) {\n                    lo = i;\n                    hi = j;\n                }\n                // \u7b2c\u4e00\u6b21\u627e\u9f50\uff1afound == t.size() && hi == N\n                // \u7b2c\u4e8c\u6b21\u6216\u4ee5\u540e\u627e\u9f50\uff1afound == t.size() && s[i] == s[j]\uff0c\u5fc5\u987b\u627e\u5230\u4e00\u4e2a\u4e0e\u5de6\u6307\u9488\u6307\u5411\u5b57\u7b26\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u5de6\u6307\u9488\u624d\u80fd\u53f3\u79fb\n            }\n            ++j;\n        }\n        if (found < t.size()) return "";\n        return s.substr(lo, hi - lo + 1);\n    }\n};\n')),(0,i.kt)("h2",{id:"\u5b57\u7b26\u4e32\u5904\u7406"},"\u5b57\u7b26\u4e32\u5904\u7406"),(0,i.kt)("h3",{id:"14-\u6700\u957f\u516c\u5171\u524d\u7f00"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-common-prefix/"},"14-\u6700\u957f\u516c\u5171\u524d\u7f00")),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e00\u7ec4\u5b57\u7b26\u4e32\uff0c\u6c42\u5b83\u4eec\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (strs.empty() || strs[0].empty()) return "";\n        string res = "";\n        for (int i = 0; i < strs[0].size(); ++i) {\n            for (int j = 1; j < strs.size(); ++j) {\n                if (strs[j][i] != strs[0][i]) {\n                    return res;\n                }\n            }\n            res += strs[0][i];\n        }\n        return res;\n    }\n};\n')),(0,i.kt)("h3",{id:"20-\u62ec\u53f7\u5339\u914d"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-parentheses/"},"20-\u62ec\u53f7\u5339\u914d")),(0,i.kt)("p",null,"\u501f\u52a9\u6808\u6570\u636e\u7ed3\u6784\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool match(const char &lhs, const char &rhs) {\n        return lhs == '(' && rhs == ')' || lhs == '{' && rhs == '}' || lhs == '[' && rhs == ']';\n    }\n    bool isValid(const string &s) {\n        stack<char> stk;\n        for (const char &c : s) {\n            if (c == ')' || c == ']' || c == '}') {\n                if (stk.empty()) return false;\n                if (!match(stk.top(), c)) return false;\n                stk.pop();\n            } else {\n                stk.push(c);\n            }\n        }\n        return stk.empty();\n    }\n};\n")),(0,i.kt)("h3",{id:"242-\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-anagram/"},"242-\u5b57\u6bcd\u5f02\u4f4d\u8bcd")),(0,i.kt)("p",null,"\u65b9\u6cd5\u4e00\uff1a\u54c8\u5e0c\u8868\u8ba1\u6570\uff1b\u65b9\u6cd5\u4e8c\uff1a\u5b57\u7b26\u4e32\u6392\u5e8f\u540e\u6bd4\u8f83\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isAnagram(const string &s, const string &t) {\n        if (s.size() != t.size()) return false;\n        unordered_map<char, int> um1;\n        unordered_map<char, int> um2;\n        for (const char &c : s) {\n            ++um1[c];\n        }\n        for (const char &c : t) {\n            ++um2[c];\n        }\n        return um1 == um2;\n    }\n};\n")),(0,i.kt)("h3",{id:"151-\u6309\u5355\u8bcd\u7ffb\u8f6c\u5b57\u7b26\u4e32"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/"},"151-\u6309\u5355\u8bcd\u7ffb\u8f6c\u5b57\u7b26\u4e32")),(0,i.kt)("p",null,"\u6309\u5355\u8bcd\u7ffb\u8f6c\u5b57\u7b26\u4e32\u3002"),(0,i.kt)("p",null,'\u8f93\u5165\uff1a" Bob Loves Alice "\uff1b'),(0,i.kt)("p",null,'\u8f93\u51fa "Alice Loves Bob"\u3002'),(0,i.kt)("p",null,"\u5b57\u7b26\u4e32\u6d41\u53ef\u4ee5\u89e3\u51b3\u53e5\u9996\u3001\u53e5\u5c3e\u3001\u5355\u8bcd\u4e2d\u95f4\u591a\u4f59\u7684\u7a7a\u683c\u95ee\u9898\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string reverseWords(string s) {\n        vector<string> vec;\n        string res;\n        stringstream ss(s);\n        string str;\n        while (ss >> str) {\n            vec.push_back(str);\n        }\n        for (int i = vec.size() - 1; i >= 0; --i) {\n            res += vec[i];\n            res += " "; // \u6700\u540e\u591a\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u8fd4\u56de\u7b54\u6848\u65f6\u8981\u622a\u6389\n        }\n        if (!res.empty()) {\n            res = string(res.begin(), res.end() - 1);\n            // \u7b49\u4ef7\u4e8e\n            // res = res.substr(0, res.size() - 1);\n        }\n        return res;\n    }\n};\n')),(0,i.kt)("p",null,"\u539f\u5730\u7ffb\u8f6c\u65b9\u6848\u3002\u5148\u6574\u4f53\u7ffb\u8f6c\uff0c\u518d\u9010\u4e2a\u5355\u8bcd\u7ffb\u8f6c\uff0c\u6700\u540e\uff0c\u540c\u5411\u53cc\u6307\u9488\u8986\u5199\u53bb\u9664\u591a\u4f59\u7a7a\u683c\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string reverseWords(string s) {\n        reverse(s.begin(), s.end());\n        int lo = 0;\n        int hi = s.size() - 1;\n        while (lo < hi && isspace(s[lo]))\n            ++lo; // \u53bb\u6389\u53e5\u9996\u7a7a\u683c\n        while (lo < hi && isspace(s[hi]))\n            --hi; // \u53bb\u6389\u53e5\u5c3e\u7a7a\u683c\n        int i = lo;\n        while (i <= hi) {\n            while (isspace(s[i]) && i < hi)\n                ++i; // \u5355\u8bcd\u7684\u5de6\u8fb9\u754c\n            int j = i;\n            while (!isspace(s[j]) && j <= hi)\n                ++j; // \u5355\u8bcd\u7684\u53f3\u8fb9\u754c\n            reverse(s.begin() + i, s.begin() + j);\n            i = j;\n        }\n        // \u53bb\u6389\u53e5\u4e2d\u5197\u4f59\u7a7a\u683c\uff1a\u5feb\u6162\u6307\u9488\u8986\u5199\n        int slow = lo + 1;\n        for (int quick = slow; quick <= hi; ++quick) {\n            if (isspace(s[quick]) && isspace(s[quick-1])) {\n                continue;\n            }\n            s[slow] = s[quick];\n            ++slow;\n        }\n        return s.substr(lo, slow - lo);\n    }\n};\n")),(0,i.kt)("h3",{id:"557-\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd-iii"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/"},"557-\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd III")),(0,i.kt)("p",null,'\u8f93\u5165\uff1a"Let\'s take LeetCode contest"\u3002'),(0,i.kt)("p",null,'\u8f93\u51fa\uff1a"s\'teL ekat edoCteeL tsetnoc"\u3002'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"stringstream")," \u65b9\u6848\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string reverseWords(string s) {\n        stringstream ss(s);\n        string str;\n        vector<string> vec;\n        while (ss >> str) {\n            reverse(str.begin(), str.end());\n            vec.push_back(str);\n        }\n        string res;\n        for (string s : vec) {\n            res += s;\n            res += " ";\n        }\n        return res.substr(0, res.size() - 1);\n    }\n};\n')),(0,i.kt)("p",null,"\u539f\u5730\u53cd\u8f6c\u65b9\u6848\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string reverseWords(string s) {\n        int lo = 0;\n        int hi = s.size() - 1;\n        while (lo <= hi) {\n            while (isspace(s[lo]) && lo < hi)\n                ++lo;\n            int j = lo;\n            while (!isspace(s[j]) && j <= hi)\n                ++j;\n            reverse(s.begin() + lo, s.begin() + j);\n            lo = j;\n        }\n        return s;\n    }\n};\n")))}u.isMDXComponent=!0},91319:(n,e,t)=>{t.d(e,{Z:()=>s});const s=t.p+"assets/images/9F2C1243-7A78-4E7E-B0E5-BDC06EA88745-a06769f542b471c87ae7c2481d8de2e7.png"},87477:(n,e,t)=>{t.d(e,{Z:()=>s});const s=t.p+"assets/images/\u622a\u5c4f2020-07-2715.34.55-2f515753ceaf2b6019c652fd5d9fb007.png"},25171:(n,e,t)=>{t.d(e,{Z:()=>s});const s=t.p+"assets/images/\u622a\u5c4f2020-07-2715.53.13-8d41ff35a2837403836017ba34e167cf.png"}}]);