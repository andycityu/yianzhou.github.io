"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6765],{93236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(87462),l=(t(67294),t(3905));t(61839);const i={},r="Ruby",o={unversionedId:"ruby",id:"ruby",title:"Ruby",description:"Installing Ruby",source:"@site/docs/language/ruby.md",sourceDirName:".",slug:"/ruby",permalink:"/docs/language/ruby",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Regex",permalink:"/docs/language/regex"},next:{title:"SQL",permalink:"/docs/language/sql"}},s={},u=[{value:"Installing Ruby",id:"installing-ruby",level:2},{value:"RubyGems",id:"rubygems",level:2},{value:"Bundler",id:"bundler",level:2},{value:"rbenv",id:"rbenv",level:2}],p={toc:u};function m(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"ruby"},"Ruby"),(0,l.kt)("h2",{id:"installing-ruby"},"Installing Ruby"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.moncefbelyamani.com/the-definitive-guide-to-installing-ruby-gems-on-a-mac/"},"The definitive guide to installing Ruby gems on a Mac"))),(0,l.kt)("p",null,"\u67d0\u4e9b gem \u7684\u5b89\u88c5\u6559\u7a0b\u544a\u8bc9\u8bfb\u8005\uff0c\u53ea\u8981\u80fd\u591f\u8fd0\u884c ",(0,l.kt)("inlineCode",{parentName:"p"},"ruby -v")," \u5c31\u53ef\u4ee5\u987a\u5229\u8fd0\u884c ",(0,l.kt)("inlineCode",{parentName:"p"},"gem install xx")," \u6765\u5b89\u88c5 gem\u3002\u4f46\u8fd9\u5728 macOS \u4e0a\u4f1a\u5f97\u5230\u9519\u8bef\u4fe1\u606f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ERROR: While executing gem ... (Gem::FilePermissionError)\nYou don't have write permissions for the /Library/Ruby/Gems/2.6.0 directory\n")),(0,l.kt)("p",null,"macOS returns this error because the default location for Ruby gem installations is the system Ruby directory that is preinstalled by Apple. That directory is not meant to be modified. Using sudo to install gems, or changing permissions of system files and directories is strongly discouraged, even if you know what you are doing."),(0,l.kt)("p",null,"\u6ca1\u6709\u81ea\u884c\u5b89\u88c5 Ruby \u4e4b\u524d\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"which ruby")," \u4f1a\u627e\u5230 ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/bin/ruby"),"\uff0c\u8fd9\u5c31\u662f macOS \u81ea\u5e26\u7684 Ruby\u3002"),(0,l.kt)("p",null,"The solution is: install a separate version of Ruby that does not interfere with the one that came with your Mac!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# 1. Install Homebrew\n# 2. Install the latest Ruby\nbrew install ruby\n# 3. Update the `PATH` environment variable\necho 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"' >> ~/.zshrc\n")),(0,l.kt)("p",null,"To verify that you are using the Homebrew version of Ruby, run this command: ",(0,l.kt)("inlineCode",{parentName:"p"},"which ruby"),", you should see ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/opt/ruby/bin/ruby"),"."),(0,l.kt)("p",null,"Then, tell RubyGems to install into your user directory by configuring the RubyGems environment. Edit ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.zshrc"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export GEM_HOME=$HOME/.gem\nexport PATH=$GEM_HOME/bin:$PATH\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/opt")," \u8fd9\u4e2a\u76ee\u5f55\u5b58\u653e\u7684\u90fd\u662f\u4e00\u4e9b\u7b26\u53f7\u94fe\u63a5\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd /usr/local/opt\nls -l\n...\nlrwxr-xr-x  1 zhouyian  admin   22 Jun 15 17:53 ruby -> ../Cellar/ruby/2.7.1_2\n")),(0,l.kt)("h2",{id:"rubygems"},"RubyGems"),(0,l.kt)("p",null,"Ruby ships with RubyGems built-in."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"gem search ^cocoapods$ -d")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"search")," command lets you find remote gems by name. You can use regular expression characters in your query. If you see a gem you want more information on you can add the details option ",(0,l.kt)("inlineCode",{parentName:"p"},"-d"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"gem list")," shows your locally installed gems."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"gem uninstall drip")," removes the gems you have installed."),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"gem environment")," to find out about your gem environment."),(0,l.kt)("h2",{id:"bundler"},"Bundler"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://guides.cocoapods.org/using/a-gemfile.html"},"Using a Gemfile"))),(0,l.kt)("p",null,"A lot of ideas for CocoaPods came from similar projects (for example ",(0,l.kt)("a",{parentName:"p",href:"https://rubygems.org/"},"RubyGems"),", ",(0,l.kt)("a",{parentName:"p",href:"https://bundler.io/"},"Bundler"),", ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/"},"npm")," and ",(0,l.kt)("a",{parentName:"p",href:"https://gradle.org/"},"Gradle"),")."),(0,l.kt)("p",null,"RubyGems is a hosted ruby library service. It centralizes where you look for a library, and installing ruby libraries/apps. These are installed into a central database of versions."),(0,l.kt)("p",null,"The downside of this is that there is no way to ensure that a project needing a specific version of a library can use that, it would always use the latest version.\uff08\u5c31\u50cf App Store \u6c38\u8fdc\u7ed9\u4f60\u5b89\u88c5\u6700\u65b0\u7248\u672c\u4e00\u6837\uff09This is the problem bundler solves."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://bundler.io/v2.1/rationale.html"},"Bundler's Purpose and Rationale"))),(0,l.kt)("p",null,"Bundler creates a consistent application environment for your application, by allowing you to specify the version of libraries. We took this idea almost whole-sale for CocoaPods. You define a ",(0,l.kt)("inlineCode",{parentName:"p"},"Gemfile")," that says what libraries you want to include, and can optionally specify a version or range. You run ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle install")," and it will generate a ",(0,l.kt)("inlineCode",{parentName:"p"},"Gemfile.lock")," saying the exact version of all of your libraries and then anyone else running bundle install with that project gets the exact same versions."),(0,l.kt)("p",null,"With a Gemfile setup, you run ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle install")," to install, or ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle update")," to update within your Gemfile's constraints. From here on in however, you will need to remember to run ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle exec")," before any terminal commands that have come in via bundler."),(0,l.kt)("p",null,"Doing it without ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle exec")," will bypass your Gemfile's specific versioning and will use the latest version of the library within RubyGems. This could potentially be the exact same version, but it can often not."),(0,l.kt)("h2",{id:"rbenv"},"rbenv"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://ruby-china.org/wiki/rbenv-guide"},"rbenv \u4f7f\u7528\u6307\u5357 \xb7 Ruby China")),(0,l.kt)("p",null,"\u67e5\u770b\u5df2\u5b89\u88c5\u7684\u7248\u672c\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"rbenv versions")),(0,l.kt)("p",null,"\u5207\u6362\u7248\u672c\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"rbenv global 3.8.2")),(0,l.kt)("p",null,"\u653e\u5230 ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.zshrc"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'export PATH="$HOME/.rbenv/bin:$PATH"\neval "$(rbenv init -)"\n')))}m.isMDXComponent=!0}}]);