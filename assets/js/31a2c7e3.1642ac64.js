"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[75],{49923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=t(87462),s=(t(67294),t(3905));t(61839);const l={},r="FlutterChannels",i={unversionedId:"\u6e90\u7801/flutter-channel",id:"\u6e90\u7801/flutter-channel",title:"FlutterChannels",description:"FlutterBasicMessageChannel",source:"@site/docs/flutter/\u6e90\u7801/flutter-channel.md",sourceDirName:"\u6e90\u7801",slug:"/\u6e90\u7801/flutter-channel",permalink:"/docs/flutter/\u6e90\u7801/flutter-channel",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flutter Widget",permalink:"/docs/flutter/flutter-widget"},next:{title:"FlutterEngine",permalink:"/docs/flutter/\u6e90\u7801/flutter-engine"}},o={},m=[{value:"FlutterBasicMessageChannel",id:"flutterbasicmessagechannel",level:2},{value:"FlutterBinaryMessengerRelay",id:"flutterbinarymessengerrelay",level:2},{value:"FlutterEngine",id:"flutterengine",level:2},{value:"PlatformView",id:"platformview",level:2},{value:"Shell",id:"shell",level:2},{value:"Engine",id:"engine",level:2},{value:"RuntimeController",id:"runtimecontroller",level:2},{value:"PlatformConfiguration",id:"platformconfiguration",level:2},{value:"DartInvoke",id:"dartinvoke",level:2}],g={toc:m};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"flutterchannels"},"FlutterChannels"),(0,s.kt)("h2",{id:"flutterbasicmessagechannel"},"FlutterBasicMessageChannel"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"- (void)sendMessage:(id)message {\n  // _messenger\u5c31\u662fFlutterBinaryMessengerRelay\n  [_messenger sendOnChannel:_name message:[_codec encode:message]];\n}\n")),(0,s.kt)("h2",{id:"flutterbinarymessengerrelay"},"FlutterBinaryMessengerRelay"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"- (void)sendOnChannel:(NSString*)channel message:(NSData*)message {\n  // parent\u5c31\u662fFlutterEngine\n  [self.parent sendOnChannel:channel message:message binaryReply:nil];\n}\n")),(0,s.kt)("h2",{id:"flutterengine"},"FlutterEngine"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"- (void)sendOnChannel:(NSString*)channel\n              message:(NSData*)message\n          binaryReply:(FlutterBinaryReply)callback {\n  fml::RefPtr<flutter::PlatformMessageResponseDarwin> response =\n      (callback == nil) ? nullptr\n                        : fml::MakeRefCounted<flutter::PlatformMessageResponseDarwin>(\n                              ^(NSData* reply) {\n                                callback(reply);\n                              },\n                              _shell->GetTaskRunners().GetPlatformTaskRunner());\n  std::unique_ptr<flutter::PlatformMessage> platformMessage =\n      (message == nil) ? std::make_unique<flutter::PlatformMessage>(channel.UTF8String, response)\n                       : std::make_unique<flutter::PlatformMessage>(\n                             channel.UTF8String, flutter::CopyNSDataToMapping(message), response);\n\n  _shell->GetPlatformView()->DispatchPlatformMessage(std::move(platformMessage));\n  // platformMessage takes ownership of response.\n}\n")),(0,s.kt)("h2",{id:"platformview"},"PlatformView"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/shell/common/platform_view.cc'",title:"'flutter/shell/common/platform_view.cc'"},"void PlatformView::DispatchPlatformMessage(\n    std::unique_ptr<PlatformMessage> message) {\n  // delegate_\u5c31\u662fshell\n  delegate_.OnPlatformViewDispatchPlatformMessage(std::move(message));\n}\n")),(0,s.kt)("h2",{id:"shell"},"Shell"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void Shell::OnPlatformViewDispatchPlatformMessage(\n    std::unique_ptr<PlatformMessage> message) {\n  task_runners_.GetUITaskRunner()->PostTask(fml::MakeCopyable(\n      [engine = engine_->GetWeakPtr(), message = std::move(message)]() mutable {\n        if (engine) {\n            // flutter::Engine\n          engine->DispatchPlatformMessage(std::move(message));\n        }\n      }));\n}\n")),(0,s.kt)("h2",{id:"engine"},"Engine"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='flutter/shell/common/engine.cc'",title:"'flutter/shell/common/engine.cc'"},'void Engine::DispatchPlatformMessage(std::unique_ptr<PlatformMessage> message) {\n  std::string channel = message->channel();\n  if (channel == kLifecycleChannel) {\n    if (HandleLifecyclePlatformMessage(message.get())) {\n      return;\n    }\n  } else if (channel == kLocalizationChannel) {\n    if (HandleLocalizationPlatformMessage(message.get())) {\n      return;\n    }\n  } else if (channel == kSettingsChannel) {\n    HandleSettingsPlatformMessage(message.get());\n    return;\n  } else if (!runtime_controller_->IsRootIsolateRunning() &&\n             channel == kNavigationChannel) {\n    // If there\'s no runtime_, we may still need to set the initial route.\n    HandleNavigationPlatformMessage(std::move(message));\n    return;\n  }\n\n  if (runtime_controller_->IsRootIsolateRunning() &&\n      runtime_controller_->DispatchPlatformMessage(std::move(message))) {\n    return;\n  }\n\n  FML_DLOG(WARNING) << "Dropping platform message on channel: " << channel;\n}\n')),(0,s.kt)("h2",{id:"runtimecontroller"},"RuntimeController"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'bool RuntimeController::DispatchPlatformMessage(\n    std::unique_ptr<PlatformMessage> message) {\n  if (auto* platform_configuration = GetPlatformConfigurationIfAvailable()) {\n    TRACE_EVENT1("flutter", "RuntimeController::DispatchPlatformMessage",\n                 "mode", "basic");\n    platform_configuration->DispatchPlatformMessage(std::move(message));\n    return true;\n  }\n\n  return false;\n}\n')),(0,s.kt)("h2",{id:"platformconfiguration"},"PlatformConfiguration"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void PlatformConfiguration::DispatchPlatformMessage(\n    std::unique_ptr<PlatformMessage> message) {\n  std::shared_ptr<tonic::DartState> dart_state =\n      dispatch_platform_message_.dart_state().lock();\n\n  tonic::DartState::Scope scope(dart_state);\n  Dart_Handle data_handle =\n      (message->hasData()) ? ToByteData(message->data()) : Dart_Null();\n\n  int response_id = 0;\n  if (auto response = message->response()) {\n    response_id = next_response_id_++;\n    pending_responses_[response_id] = response;\n  }\n\n  tonic::LogIfError(\n      tonic::DartInvoke(dispatch_platform_message_.Get(),\n                        {tonic::ToDart(message->channel()), data_handle,\n                         tonic::ToDart(response_id)}));\n}\n")),(0,s.kt)("h2",{id:"dartinvoke"},"DartInvoke"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"Dart_Handle DartInvoke(Dart_Handle closure,\n                       std::initializer_list<Dart_Handle> args) {\n  int argc = args.size();\n  Dart_Handle* argv = const_cast<Dart_Handle*>(args.begin());\n  Dart_Handle handle = Dart_InvokeClosure(closure, argc, argv);\n  LogIfError(handle);\n  return handle;\n}\n")))}u.isMDXComponent=!0}}]);