"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1750],{79715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));n(61839);const i={},l="Dart",o={unversionedId:"dart",id:"dart",title:"Dart",description:"Dart overview | Dart",source:"@site/docs/language/dart.md",sourceDirName:".",slug:"/dart",permalink:"/docs/language/dart",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u591a\u7ebf\u7a0b",permalink:"/docs/language/cpp/thread"},next:{title:"GLSL",permalink:"/docs/language/glsl"}},s={},p=[{value:"Runtime",id:"runtime",level:2},{value:"Garbage Collector",id:"garbage-collector",level:2},{value:"Language Tour",id:"language-tour",level:2},{value:"Variables",id:"variables",level:3},{value:"Build-in Types",id:"build-in-types",level:3},{value:"Functions",id:"functions",level:3},{value:"Operators",id:"operators",level:3},{value:"Dart Classes",id:"dart-classes",level:2},{value:"Constructors",id:"constructors",level:3},{value:"OOP",id:"oop",level:3},{value:"mixin",id:"mixin",level:3},{value:"Generics",id:"generics",level:2},{value:"Libraries and visibility",id:"libraries-and-visibility",level:2},{value:"Concurrency",id:"concurrency",level:2},{value:"Isolates",id:"isolates",level:2}],c={toc:p};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dart"},"Dart"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://dart.dev/overview"},"Dart overview | Dart"))),(0,r.kt)("p",null,"Dart forms the foundation of Flutter. Dart provides the language and runtimes that power Flutter apps."),(0,r.kt)("p",null,"The Dart language is type safe."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Type safety means that the compiler will validate types while compiling, and throw an error if you try to assign the wrong type to a variable.")),(0,r.kt)("p",null,"Dart is strongly typed."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Strong_and_weak_typing"},"Strong and weak typing - Wikipedia"),". There is no precise technical definition. Dynamically typed languages (where type checking happens at run time) can also be strongly typed.")),(0,r.kt)("p",null,"Dart offers ",(0,r.kt)("em",{parentName:"p"},"sound")," null safety."),(0,r.kt)("p",null,"For apps targeting mobile and desktop devices, Dart includes both a Dart VM with just-in-time (JIT) compilation and an ahead-of-time (AOT) compiler for producing machine code (native ARM or x64 machine code)."),(0,r.kt)("p",null,"For apps targeting the web, Dart includes compilers translate Dart into JavaScript."),(0,r.kt)("p",null,"\u5728\u6d4f\u89c8\u5668\u8bd5\u7528 Dart\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://dart.dev/tools/dartpad"},"https://dart.dev/tools/dartpad")),(0,r.kt)("h2",{id:"runtime"},"Runtime"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://dart.dev/overview"},"Dart overview | Dart"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:n(5901).Z,width:"642",height:"578"})),(0,r.kt)("p",null,"Dart runtime is responsible for the following critical tasks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Managing memory: Dart uses a managed memory model, where unused memory is reclaimed by a generational garbage collector."),(0,r.kt)("li",{parentName:"ul"},"Enforcing the Dart type system: Although most type checks in Dart are static (compile-time), some type checks are dynamic (runtime)."),(0,r.kt)("li",{parentName:"ul"},"Managing isolates: The Dart runtime controls the main isolate (where code normally runs) and any other isolates that the app creates.")),(0,r.kt)("h2",{id:"garbage-collector"},"Garbage Collector"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://medium.com/flutter/flutter-dont-fear-the-garbage-collector-d69b3ff1ca30"},"Flutter: Don\u2019t Fear the Garbage Collector | by Matt Sullivan | Flutter | Medium"))),(0,r.kt)("p",null,"Garbage collecting happens when the engine detects that the app is idle and there\u2019s no user interaction. The garbage collector can also run sliding compaction during those idle intervals, which minimizes memory overhead by reducing memory fragmentation."),(0,r.kt)("p",null,"Dart\u2019s garbage collector is ",(0,r.kt)("strong",{parentName:"p"},"generational")," and consists of two phases: the young space scavenger and parallel mark sweep collectors."),(0,r.kt)("p",null,"Young Space Scavenger: \u5206\u914d\u7ed9\u65b0\u5bf9\u8c61\u7684\u5185\u5b58\u7a7a\u95f4\u7531\u4e24\u534a\u7ec4\u6210\uff0c\u4e00\u4e2a\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\uff0c\u53e6\u4e00\u4e2a\u5904\u4e8e\u975e\u6d3b\u8dc3\u72b6\u6001\u3002\u65b0\u5bf9\u8c61\u88ab\u5206\u914d\u5230\u6d3b\u8dc3\u7684\u4e00\u534a\uff0c\u4e00\u65e6\u8fd9\u4e00\u534a\u88ab\u586b\u6ee1\uff0c\u6d3b\u8dc3\u7684\u5bf9\u8c61\u5c31\u4f1a\u4ece\u6d3b\u8dc3\u7684\u4e00\u534a\u590d\u5236\u5230\u975e\u6d3b\u8dc3\u7684\u4e00\u534a\uff0c\u6b7b\u5bf9\u8c61\u5c31\u4f1a\u88ab\u5ffd\u7565\u3002\u7136\u540e\u4e0d\u6d3b\u8dc3\u7684\u4e00\u534a\u53d8\u4e3a\u6d3b\u8dc3\u7684\u5e76\u4e14\u91cd\u590d\u8be5\u8fc7\u7a0b\u3002\u6b64\u9636\u6bb5\u65e8\u5728\u6e05\u7406\u751f\u547d\u5468\u671f\u8f83\u77ed\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u4f8b\u5982 stateless widget\u3002\u867d\u7136\u5b83\u662f\u963b\u585e\u7684\uff0c\u4f46\u5b83\u6bd4\u7b2c\u4e8c\u4ee3\u6807\u8bb0/\u6e05\u9664\u5feb\u5f97\u591a\uff0c\u5e76\u4e14\u5f53\u4e0e\u8c03\u5ea6\u76f8\u7ed3\u5408\u65f6\uff0c\u51e0\u4e4e\u6d88\u9664\u4e86\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u53ef\u611f\u77e5\u7684\u6682\u505c\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:n(10922).Z,width:"707",height:"642"})),(0,r.kt)("p",null,"Parallel mark sweep: When objects achieve a certain lifespan, they are promoted to a new memory space, managed by the second generation collector: mark-sweep. This garbage collection technique has two phases: the object graph is first traversed and objects that are still in use are marked. During the second phase the entire memory is scanned, and any objects not marked are recycled. All flags are then cleared. This form of garbage collection blocks on the marking phase; no memory mutation can occur and the UI thread is blocked."),(0,r.kt)("p",null,"Wrapping Up: Dart employs a powerful generational garbage collector to minimize the effects for blocking garbage collection in Flutter apps. \u7531\u4e8e Flutter Widget \u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5927\u591a\u6570\u5bf9\u8c61\u4f1a\u5728\u5e74\u8f7b\u65f6\u6b7b\u53bb\uff0c\u88ab\u7b2c\u4e00\u4ee3\u5783\u573e\u6536\u96c6\u5668\u6536\u96c6\uff0c\u56e0\u6b64\u5bf9\u6027\u80fd\u5f71\u54cd\u975e\u5e38\u5c0f\u3002"),(0,r.kt)("h2",{id:"language-tour"},"Language Tour"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void printInteger(int aNumber) { // \u9a7c\u5cf0\n  // String interpolation: $variableName or ${expression}\n  print('The number is $aNumber.');\n}\n\nvoid main() {\n  var number = 42; // \u5927\u90e8\u5206\u53d8\u91cf\u53ef\u4ee5\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\uff08\u5728\u7f16\u8bd1\u65f6\uff09\n  printInteger(number);\n}\n")),(0,r.kt)("p",null,"Everything is an object, and every object is an instance of a class. Even numbers, functions are objects. All objects inherit from the Object class."),(0,r.kt)("p",null,"If an identifier starts with an underscore (",(0,r.kt)("inlineCode",{parentName:"p"},"_"),"), it\u2019s private to its library."),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Lazily initializing a variable: ",(0,r.kt)("inlineCode",{parentName:"p"},"late String temperature = _readThermometer();")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"final")," variable can be set only once."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," ",(0,r.kt)("strong",{parentName:"p"},"variable")," is a compile-time constant, ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," variables are implicitly ",(0,r.kt)("inlineCode",{parentName:"p"},"final"),". (Note the diff between const variable and const value)."),(0,r.kt)("h3",{id:"build-in-types"},"Build-in Types"),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"double")," are subtypes of ",(0,r.kt)("inlineCode",{parentName:"p"},"num"),". If a number includes a decimal, it is a ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),", otherwise it's ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,r.kt)("p",null,"Here\u2019s how you turn a string into a number, or vice versa:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// String -> int\nvar one = int.parse('1');\n// String -> double\nvar onePointOne = double.parse('1.1');\n// int -> String\nString oneAsString = 1.toString();\n// double -> String\nString piAsString = 3.14159.toStringAsFixed(2);\n")),(0,r.kt)("p",null,"You can create a \u201craw\u201d string by prefixing it with ",(0,r.kt)("inlineCode",{parentName:"p"},"r"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"var s = r'In a raw string, not even \\n gets special treatment.';\n")),(0,r.kt)("p",null,"Dart list: ",(0,r.kt)("inlineCode",{parentName:"p"},"var listOfInts = [1, 2, 3];")),(0,r.kt)("p",null,"Dart 2.3 introduced the ",(0,r.kt)("strong",{parentName:"p"},"spread operator")," (...) and the ",(0,r.kt)("strong",{parentName:"p"},"null-aware spread operator")," (...?), which provide a concise way to insert multiple values into a collection."),(0,r.kt)("p",null,"Dart set: ",(0,r.kt)("inlineCode",{parentName:"p"},"var halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};")),(0,r.kt)("p",null,"Dart map: Both keys and values can be any type of object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"var nobleGases = Map<int, String>();\nnobleGases[2] = 'helium';\n")),(0,r.kt)("p",null,"Because a Dart string is a sequence of UTF-16 code units, expressing Unicode code points within a string requires special syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"\\u2665")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"\\u{1f606}"),"."),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,"\u7bad\u5934\u51fd\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"String get name => 'D'; // getter\nset name(String _name) => name = _name; // setter\n")),(0,r.kt)("p",null,"\u547d\u540d\u53c2\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void enableFlags({bool? bold, bool? hidden}) {...}\n")),(0,r.kt)("p",null,"\u8c03\u7528\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"enableFlags(bold: true, hidden: false);")),(0,r.kt)("p",null,"\u9664\u975e\u58f0\u660e ",(0,r.kt)("inlineCode",{parentName:"p"},"required"),"\uff0c\u5426\u5219\u547d\u540d\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\uff1a"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"const Scrollbar({Key? key, required Widget child})")),(0,r.kt)("p",null,"Wrapping a set of function parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," marks them as ",(0,r.kt)("strong",{parentName:"p"},"optional positional parameters"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"String say(String from, String msg, [String? device]) {...}\nsay('Bob', 'Howdy', 'smoke signal');\n")),(0,r.kt)("p",null,"Your function can use ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," to define ",(0,r.kt)("strong",{parentName:"p"},"default values")," for both named and positional parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void enableFlags({bool bold = false, bool hidden = false}) {...}\n")),(0,r.kt)("p",null,"You can create a nameless function called an ",(0,r.kt)("strong",{parentName:"p"},"anonymous function"),", or sometimes a ",(0,r.kt)("strong",{parentName:"p"},"lambda")," or ",(0,r.kt)("strong",{parentName:"p"},"closure"),"."),(0,r.kt)("p",null,"\u6392\u5e8f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// \u4ece\u5c0f\u5230\u5927\uff0ca.certificateId < b.certificateId\n_models.sort((CertificateInfo a, CertificateInfo b) => b.certificateId.compareTo(a.certificateId));\n")),(0,r.kt)("h3",{id:"operators"},"Operators"),(0,r.kt)("p",null,"cast an object to a particular type: ",(0,r.kt)("inlineCode",{parentName:"p"},"(employee as Person).firstName = 'Bob';")),(0,r.kt)("p",null,"check the type: ",(0,r.kt)("inlineCode",{parentName:"p"},"if (employee is Person) {...}")),(0,r.kt)("p",null,"To assign only if the assigned-to variable is null, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"??=")," operator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// Assign value to b if b is null; otherwise, b stays the same\nb ??= value;\n")),(0,r.kt)("p",null,"Cascade notation allow you to make a sequence of operations on the same object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"var paint = Paint()\n  ..color = Colors.black\n  ..strokeCap = StrokeCap.round\n  ..strokeWidth = 5.0;\n\n// The previous example is equivalent to this code:\nvar paint = Paint();\npaint.color = Colors.black;\npaint.strokeCap = StrokeCap.round;\npaint.strokeWidth = 5.0;\n")),(0,r.kt)("p",null,"If the object that the cascade operates on can be null, then use a null-shorting cascade (",(0,r.kt)("inlineCode",{parentName:"p"},"?.."),") for the first operation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"querySelector('#confirm') // Get an object.\n  ?..text = 'Confirm' // Use its members.\n  ..classes.add('important')\n  ..onClick.listen((e) => window.alert('Confirmed!'));\n\n// The previous code is equivalent to the following:\nvar button = querySelector('#confirm');\nbutton?.text = 'Confirm'; // use ?. to avoid an exception when the leftmost operand is null\nbutton?.classes.add('important');\nbutton?.onClick.listen((e) => window.alert('Confirmed!'));\n")),(0,r.kt)("h2",{id:"dart-classes"},"Dart Classes"),(0,r.kt)("p",null,"Dart is an object-oriented language with classes and mixin-based inheritance."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mixin-based")," inheritance means that although every class (except for the top class, Object?) has exactly one superclass, a class body can be reused in multiple class hierarchies."),(0,r.kt)("p",null,"Constructor names can be either ",(0,r.kt)("inlineCode",{parentName:"p"},"ClassName")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ClassName.identifier"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"var p1 = Point(2, 2);\nvar p2 = Point.fromJson({'x': 1, 'y': 2});\n")),(0,r.kt)("p",null,"To get an object\u2019s type at runtime: ",(0,r.kt)("inlineCode",{parentName:"p"},"print('The type of a is ${a.runtimeType}');")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class Point {\n  double? x; // nullable variable\n  double z = 0; // Declare z, initially 0.\n}\n")),(0,r.kt)("h3",{id:"constructors"},"Constructors"),(0,r.kt)("p",null,"\u6784\u9020\u51fd\u6570\u7684\u63a8\u8350\u5199\u6cd5\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://dart-lang.github.io/linter/lints/prefer_initializing_formals.html"},"prefer_initializing_formals")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/constructors-in-dart/"},"Constructors in Dart \u2013 Use Cases and Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class Car {\n    String make;\n    String model;\n    String yearMade;\n    bool hasABS;\n\n    // \u63a8\u8350\u5199\u6cd5\n    Car(this.make, this.model, this.yearMade, this.hasABS);\n}\n")),(0,r.kt)("p",null,"\u547d\u540d\u6784\u9020\u51fd\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// Initializer lists are handy when setting up `final` fields.\n// Note: Anything that is placed on the right hand side of the colon (:) has no access to `this`.\nCar.withoutABS(this.make, this.model, this.yearMade): hasABS = false;\n")),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"factory")," keyword when implementing a constructor that doesn\u2019t always create a new instance of its class."),(0,r.kt)("p",null,"If your class represents an object that will never change after its creation, you can benefit from the use of a ",(0,r.kt)("strong",{parentName:"p"},"constant constructor"),"."),(0,r.kt)("p",null,"When you want one constructor to call another constructor under the hood, it's referred to as redirecting constructors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Car.withoutABS(this.make, this.model, this.yearMade): this(make, model, yearMade, false);\n")),(0,r.kt)("h3",{id:"oop"},"OOP"),(0,r.kt)("p",null,"Abstract class: a class that can\u2019t be instantiated. Abstract classes are useful for defining interfaces, often with some implementation."),(0,r.kt)("p",null,"Dart \u91cc\u901a\u5e38\u7528\u62bd\u8c61\u7c7b\u6765\u58f0\u660e\u63a5\u53e3\u3002"),(0,r.kt)("p",null,"Dart \u91cc\u53ef\u4ee5\u7ee7\u627f\u62bd\u8c61\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u62bd\u8c61\u7c7b\u7684\u63a5\u53e3\u3002\u533a\u522b\u662f\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7ee7\u627f\uff08",(0,r.kt)("inlineCode",{parentName:"li"},"extends"),"\uff09\u5fc5\u987b\u5b9e\u73b0\u62bd\u8c61\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5"),(0,r.kt)("li",{parentName:"ul"},"\u5b9e\u73b0\uff08",(0,r.kt)("inlineCode",{parentName:"li"},"implements"),"\uff09\u5fc5\u987b\u5b9e\u73b0\u62bd\u8c61\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"extends")," \u7528\u5728\u62bd\u8c61\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u7684\u516c\u5171\u5b9e\u73b0\u7684\u60c5\u51b5\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Abstract methods")," can only exist in ",(0,r.kt)("strong",{parentName:"p"},"abstract classes"),"."),(0,r.kt)("p",null,"Dart \u91cc\u6ca1\u6709\u65b9\u6cd5\u4f53\u7684\u65b9\u6cd5\uff0c\u662f\u62bd\u8c61\u65b9\u6cd5\u3002"),(0,r.kt)("p",null,"Every class implicitly defines an interface containing all the instance members of the class and of any interfaces it implements."),(0,r.kt)("p",null,"If you want to create a class A that supports class B\u2019s API without inheriting B\u2019s implementation, class A should ",(0,r.kt)("strong",{parentName:"p"},"implement")," the B interface."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class Point implements Comparable, Location {...}\n")),(0,r.kt)("p",null,"Extension methods, are a way to add functionality to existing libraries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"extension NumberParsing on String {\n  int parseInt() {\n    return int.parse(this);\n  }\n}\n")),(0,r.kt)("h3",{id:"mixin"},"mixin"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mixin")," \u5c31\u662f\u5728\u7c7b\u4e2d\u6df7\u5165\u5176\u5b83\u7684\u529f\u80fd\uff0c\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"mixin")," \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u591a\u7ee7\u627f\u7684\u7279\u6027\u3002"),(0,r.kt)("p",null,"To use a ",(0,r.kt)("strong",{parentName:"p"},"mixin"),", use the ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," keyword."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class A {\n  String name = 'A';\n  void myPrint() {\n    print('A');\n  }\n}\n\nclass B {\n  void myPrint() {\n    print('B');\n  }\n}\n\nclass C with A, B {\n}\n\nclass D implements A, B {\n  String get name => 'D';\n  set name(String _name) => name = _name;\n\n  void myPrint() {\n    print('D');\n  }\n}\n\nvoid main() {\n  A insA = A();\n  B insB = B();\n  C insC = C();\n  D insD = D();\n\n  insA.myPrint(); // A\n  insB.myPrint(); // B\n  print(insC.name); // A\n  insC.myPrint(); // B\n  insD.myPrint(); // D\n\n  print(insC is A); // true\uff0cA \u53ef\u770b\u4f5c\u662f C \u7684\u7236\u7c7b\n  print(insC is B); // true\uff0cB \u53ef\u770b\u4f5c\u662f C \u7684\u7236\u7c7b\n}\n")),(0,r.kt)("p",null,"\u88ab ",(0,r.kt)("inlineCode",{parentName:"p"},"mixin")," \u7684\u7c7b\uff0c\u4e0d\u80fd\u7ee7\u627f\u522b\u7684\u7c7b\uff0c\u4e5f\u4e0d\u80fd\u6709\u6784\u9020\u51fd\u6570\u3002"),(0,r.kt)("p",null,"You can restrict a mixin\u2019s use by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"on")," keyword to specify the required superclass."),(0,r.kt)("h2",{id:"generics"},"Generics"),(0,r.kt)("p",null,"\u8303\u578b\u51fd\u6570\u53ef\u4ee5\u7ea6\u675f\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u51cf\u5c11\u91cd\u590d\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"T theSmallerOne<T>(T lhs, T rhs) {\n  if (T == num || T == int || T == double) {\n    return (lhs as num) < (rhs as num) ? lhs : rhs;\n  }\n  return rhs;\n}\n\nvoid main() {\n  // print(theSmallerOne<num>('a', 2)); // \u274c\n  print(theSmallerOne<num>(1, 2));\n  print(theSmallerOne<int>(1, 2));\n  print(theSmallerOne<double>(1, 2));\n}\n")),(0,r.kt)("p",null,"\u8303\u578b\u7c7b\u3001\u8303\u578b\u5bb9\u5668\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  // List \u662f\u4e00\u4e2a\u8303\u578b\u7c7b\uff0c\u4e0d\u7ed9\u5b83\u6307\u5b9a\u7c7b\u578b\u65f6\uff0c\u5b83\u53ef\u4ee5\u88c5\u4efb\u610f\u7c7b\u578b\n  var l1 = [1, 2, 'hello', 2.0];\n  for (var i in l1) {\n    print(i.runtimeType);\n  }\n  // \u5f53\u7ed9\u8303\u578b\u7c7b\u6307\u5b9a\u7c7b\u578b\u65f6\uff0c\u5219\u53ea\u80fd\u88c5\u6307\u5b9a\u7c7b\u578b\n  var l2 = <num>[1, 2, 2.0];\n  for (var i in l2) {\n    print(i.runtimeType);\n  }\n}\n")),(0,r.kt)("p",null,"\u8303\u578b\u63a5\u53e3\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"abstract class Cache<T> {\n  T? getByKey(String key);\n  void setByKey(String key, T value);\n}\n\nclass MemoryCache<T> implements Cache<T> {\n  Map<String, T> map = {};\n  T? getByKey(String key) {\n    return map[key];\n  }\n\n  void setByKey(String key, T value) {\n    map[key] = value;\n  }\n}\n\nvoid main() {\n  var cache = MemoryCache<num>();\n  cache.setByKey('1', 1);\n  cache.setByKey('2', 2.0);\n  print(cache.getByKey('1').runtimeType);\n  print(cache.getByKey('2').runtimeType);\n  print(cache.getByKey('3'));\n}\n")),(0,r.kt)("h2",{id:"libraries-and-visibility"},"Libraries and visibility"),(0,r.kt)("p",null,"The only required argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," is a ",(0,r.kt)("strong",{parentName:"p"},"URI")," specifying the library. For built-in libraries, the URI has the special ",(0,r.kt)("inlineCode",{parentName:"p"},"dart:")," scheme."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:html';\n")),(0,r.kt)("p",null,"For other libraries, you can use a file system path or the ",(0,r.kt)("inlineCode",{parentName:"p"},"package:")," scheme."),(0,r.kt)("p",null,"If you import two libraries that have conflicting identifiers, then you can specify a prefix for one or both libraries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n")),(0,r.kt)("p",null,"If you want to use only part of a library, you can selectively import the library. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// Import only foo.\nimport 'package:lib1/lib1.dart' show foo;\n\n// Import all names EXCEPT foo.\nimport 'package:lib2/lib2.dart' hide foo;\n")),(0,r.kt)("h2",{id:"concurrency"},"Concurrency"),(0,r.kt)("p",null,"Dart supports concurrent programming with async-await, isolates, and classes such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Future")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream"),"."),(0,r.kt)("p",null,"The Dart language and libraries use ",(0,r.kt)("inlineCode",{parentName:"p"},"Future")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream")," objects to represent values to be provided in the future."),(0,r.kt)("p",null,"For example, a ",(0,r.kt)("strong",{parentName:"p"},"promise")," to eventually provide an int value is typed as ",(0,r.kt)("inlineCode",{parentName:"p"},"Future<int>"),". A ",(0,r.kt)("strong",{parentName:"p"},"promise")," to provide a series of int values has the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream<int>"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," function executes only until it encounters its first ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," expression. Then it returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Future")," object, resuming execution only after the ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," expression completes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> checkVersion() async {\n  var version = await lookUpVersion();\n  // Do something with version\n}\n")),(0,r.kt)("p",null,"An asynchronous for loop has the following form, the value of expression must have type ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"await for (varOrType identifier in expression) {\n  // Executes each time the stream emits a value.\n}\n")),(0,r.kt)("h2",{id:"isolates"},"Isolates"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://dart.dev/guides/language/language-tour#isolates"},"Language tour | Dart"))),(0,r.kt)("p",null,"Most computers, even on mobile platforms, have multi-core CPUs. To take advantage of all those cores, developers traditionally use shared-memory threads running concurrently. However, shared-state concurrency is error prone and can lead to complicated code."),(0,r.kt)("p",null,"Instead of threads, all Dart code runs inside of isolates. Each Dart isolate has a single thread of execution and shares no mutable objects with other isolates."),(0,r.kt)("p",null,"Because there\u2019s no shared memory, you don\u2019t have to worry about mutexes or locks."),(0,r.kt)("p",null,"To communicate with each other, isolates use ",(0,r.kt)("strong",{parentName:"p"},"message passing"),"."),(0,r.kt)("p",null,"Isolates are like threads or processes, but each isolate has its own memory and a single thread running an ",(0,r.kt)("strong",{parentName:"p"},"event loop"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:n(958).Z,width:"163",height:"253"})),(0,r.kt)("p",null,"Dart isolates have their own private heap, independent of one another. As each isolate runs in a separate thread, garbage collection events for each isolate should not impact the performance of others. Using isolates is a great way to avoid blocking the UI and offloading process intensive activities."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://dart.dev/guides/language/concurrency"},"Concurrency in Dart | Dart"))),(0,r.kt)("p",null,"Many Dart apps use only one isolate (the main isolate), but you can create additional isolates, enabling parallel code execution on multiple processor cores."),(0,r.kt)("p",null,"If your app\u2019s UI becomes unresponsive due to a time-consuming computation \u2014 parsing a large JSON file, for example \u2014 consider offloading that computation to a worker isolate, often called a background worker."),(0,r.kt)("p",null,"In Flutter, the ",(0,r.kt)("inlineCode",{parentName:"p"},"compute()")," function is a simple way to move a single function call to a ",(0,r.kt)("strong",{parentName:"p"},"worker isolate"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/"},"JSONPlaceholder - Free Fake REST API")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"compute()")," function runs expensive functions in a background isolate and returns the result."))}u.isMDXComponent=!0},958:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/6F521845-C867-4E06-BCE5-DBD197FBD86C-20cf6a90795c681f98c93b601a6d0f6f.png"},10922:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/854CBD9D-2B5D-47FC-9D39-C3360BAC4EFF-8e4d2d2ca2679833c2830305129ec483.png"},5901:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/9B3D318C-B811-4D54-A328-595707BCE579-5207cf1a9834a5c00854f4796ef4c0b1.png"}}]);